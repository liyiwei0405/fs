/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.ucs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UCS {

  public interface Iface {

    /**
     * 获取用户策略数据，包括用户分类标识、地域策略值、地域策略是否生效三部分
     * 
     * @param UcsCondition ucsCondition 用户分类条件
     * @return UcsObjectResult
     * 
     * @param ucsCondition
     */
    public UcsObjectResult getUcsObject(UcsCondition ucsCondition) throws org.apache.thrift.TException;

    /**
     * 获取用户策略数据，用户分类标识、地域策略值、地域策略是否生效的拼接加密字符串
     * 
     * @param UcsCondition ucsCondition 用户分类条件
     * @return UcsStringResult
     * 
     * @param ucsCondition
     */
    public UcsStringResult getUcsString(UcsCondition ucsCondition) throws org.apache.thrift.TException;

    /**
     * 根据客户端类型获取默认的用户分类标识
     * 
     * @param string 客户端类型
     * @return UserClassResult
     * 
     * @param clientType
     */
    public UserClassResult getUserDefaultClassTag(String clientType) throws org.apache.thrift.TException;

    /**
     * 根据客户端类型和地区名称获取用户所在地域策略ID
     * 
     * @param string, 客户端类型, string 用户所在地区
     * @return AreaTacticResult
     * 
     * @param clientType
     * @param area
     */
    public AreaTacticResult getAreaTacticId(String clientType, String area) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getUcsObject(UcsCondition ucsCondition, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUcsObject_call> resultHandler) throws org.apache.thrift.TException;

    public void getUcsString(UcsCondition ucsCondition, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUcsString_call> resultHandler) throws org.apache.thrift.TException;

    public void getUserDefaultClassTag(String clientType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUserDefaultClassTag_call> resultHandler) throws org.apache.thrift.TException;

    public void getAreaTacticId(String clientType, String area, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAreaTacticId_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public UcsObjectResult getUcsObject(UcsCondition ucsCondition) throws org.apache.thrift.TException
    {
      send_getUcsObject(ucsCondition);
      return recv_getUcsObject();
    }

    public void send_getUcsObject(UcsCondition ucsCondition) throws org.apache.thrift.TException
    {
      getUcsObject_args args = new getUcsObject_args();
      args.setUcsCondition(ucsCondition);
      sendBase("getUcsObject", args);
    }

    public UcsObjectResult recv_getUcsObject() throws org.apache.thrift.TException
    {
      getUcsObject_result result = new getUcsObject_result();
      receiveBase(result, "getUcsObject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUcsObject failed: unknown result");
    }

    public UcsStringResult getUcsString(UcsCondition ucsCondition) throws org.apache.thrift.TException
    {
      send_getUcsString(ucsCondition);
      return recv_getUcsString();
    }

    public void send_getUcsString(UcsCondition ucsCondition) throws org.apache.thrift.TException
    {
      getUcsString_args args = new getUcsString_args();
      args.setUcsCondition(ucsCondition);
      sendBase("getUcsString", args);
    }

    public UcsStringResult recv_getUcsString() throws org.apache.thrift.TException
    {
      getUcsString_result result = new getUcsString_result();
      receiveBase(result, "getUcsString");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUcsString failed: unknown result");
    }

    public UserClassResult getUserDefaultClassTag(String clientType) throws org.apache.thrift.TException
    {
      send_getUserDefaultClassTag(clientType);
      return recv_getUserDefaultClassTag();
    }

    public void send_getUserDefaultClassTag(String clientType) throws org.apache.thrift.TException
    {
      getUserDefaultClassTag_args args = new getUserDefaultClassTag_args();
      args.setClientType(clientType);
      sendBase("getUserDefaultClassTag", args);
    }

    public UserClassResult recv_getUserDefaultClassTag() throws org.apache.thrift.TException
    {
      getUserDefaultClassTag_result result = new getUserDefaultClassTag_result();
      receiveBase(result, "getUserDefaultClassTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserDefaultClassTag failed: unknown result");
    }

    public AreaTacticResult getAreaTacticId(String clientType, String area) throws org.apache.thrift.TException
    {
      send_getAreaTacticId(clientType, area);
      return recv_getAreaTacticId();
    }

    public void send_getAreaTacticId(String clientType, String area) throws org.apache.thrift.TException
    {
      getAreaTacticId_args args = new getAreaTacticId_args();
      args.setClientType(clientType);
      args.setArea(area);
      sendBase("getAreaTacticId", args);
    }

    public AreaTacticResult recv_getAreaTacticId() throws org.apache.thrift.TException
    {
      getAreaTacticId_result result = new getAreaTacticId_result();
      receiveBase(result, "getAreaTacticId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAreaTacticId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getUcsObject(UcsCondition ucsCondition, org.apache.thrift.async.AsyncMethodCallback<getUcsObject_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUcsObject_call method_call = new getUcsObject_call(ucsCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUcsObject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UcsCondition ucsCondition;
      public getUcsObject_call(UcsCondition ucsCondition, org.apache.thrift.async.AsyncMethodCallback<getUcsObject_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ucsCondition = ucsCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUcsObject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUcsObject_args args = new getUcsObject_args();
        args.setUcsCondition(ucsCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UcsObjectResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUcsObject();
      }
    }

    public void getUcsString(UcsCondition ucsCondition, org.apache.thrift.async.AsyncMethodCallback<getUcsString_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUcsString_call method_call = new getUcsString_call(ucsCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUcsString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UcsCondition ucsCondition;
      public getUcsString_call(UcsCondition ucsCondition, org.apache.thrift.async.AsyncMethodCallback<getUcsString_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ucsCondition = ucsCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUcsString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUcsString_args args = new getUcsString_args();
        args.setUcsCondition(ucsCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UcsStringResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUcsString();
      }
    }

    public void getUserDefaultClassTag(String clientType, org.apache.thrift.async.AsyncMethodCallback<getUserDefaultClassTag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserDefaultClassTag_call method_call = new getUserDefaultClassTag_call(clientType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserDefaultClassTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientType;
      public getUserDefaultClassTag_call(String clientType, org.apache.thrift.async.AsyncMethodCallback<getUserDefaultClassTag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientType = clientType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserDefaultClassTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserDefaultClassTag_args args = new getUserDefaultClassTag_args();
        args.setClientType(clientType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserClassResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserDefaultClassTag();
      }
    }

    public void getAreaTacticId(String clientType, String area, org.apache.thrift.async.AsyncMethodCallback<getAreaTacticId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAreaTacticId_call method_call = new getAreaTacticId_call(clientType, area, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAreaTacticId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientType;
      private String area;
      public getAreaTacticId_call(String clientType, String area, org.apache.thrift.async.AsyncMethodCallback<getAreaTacticId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientType = clientType;
        this.area = area;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAreaTacticId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAreaTacticId_args args = new getAreaTacticId_args();
        args.setClientType(clientType);
        args.setArea(area);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AreaTacticResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAreaTacticId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getUcsObject", new getUcsObject());
      processMap.put("getUcsString", new getUcsString());
      processMap.put("getUserDefaultClassTag", new getUserDefaultClassTag());
      processMap.put("getAreaTacticId", new getAreaTacticId());
      return processMap;
    }

    public static class getUcsObject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUcsObject_args> {
      public getUcsObject() {
        super("getUcsObject");
      }

      public getUcsObject_args getEmptyArgsInstance() {
        return new getUcsObject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUcsObject_result getResult(I iface, getUcsObject_args args) throws org.apache.thrift.TException {
        getUcsObject_result result = new getUcsObject_result();
        result.success = iface.getUcsObject(args.ucsCondition);
        return result;
      }
    }

    public static class getUcsString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUcsString_args> {
      public getUcsString() {
        super("getUcsString");
      }

      public getUcsString_args getEmptyArgsInstance() {
        return new getUcsString_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUcsString_result getResult(I iface, getUcsString_args args) throws org.apache.thrift.TException {
        getUcsString_result result = new getUcsString_result();
        result.success = iface.getUcsString(args.ucsCondition);
        return result;
      }
    }

    public static class getUserDefaultClassTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserDefaultClassTag_args> {
      public getUserDefaultClassTag() {
        super("getUserDefaultClassTag");
      }

      public getUserDefaultClassTag_args getEmptyArgsInstance() {
        return new getUserDefaultClassTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserDefaultClassTag_result getResult(I iface, getUserDefaultClassTag_args args) throws org.apache.thrift.TException {
        getUserDefaultClassTag_result result = new getUserDefaultClassTag_result();
        result.success = iface.getUserDefaultClassTag(args.clientType);
        return result;
      }
    }

    public static class getAreaTacticId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAreaTacticId_args> {
      public getAreaTacticId() {
        super("getAreaTacticId");
      }

      public getAreaTacticId_args getEmptyArgsInstance() {
        return new getAreaTacticId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAreaTacticId_result getResult(I iface, getAreaTacticId_args args) throws org.apache.thrift.TException {
        getAreaTacticId_result result = new getAreaTacticId_result();
        result.success = iface.getAreaTacticId(args.clientType, args.area);
        return result;
      }
    }

  }

  public static class getUcsObject_args implements org.apache.thrift.TBase<getUcsObject_args, getUcsObject_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUcsObject_args");

    private static final org.apache.thrift.protocol.TField UCS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("ucsCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUcsObject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUcsObject_argsTupleSchemeFactory());
    }

    public UcsCondition ucsCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UCS_CONDITION((short)1, "ucsCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UCS_CONDITION
            return UCS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UCS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("ucsCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UcsCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUcsObject_args.class, metaDataMap);
    }

    public getUcsObject_args() {
    }

    public getUcsObject_args(
      UcsCondition ucsCondition)
    {
      this();
      this.ucsCondition = ucsCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUcsObject_args(getUcsObject_args other) {
      if (other.isSetUcsCondition()) {
        this.ucsCondition = new UcsCondition(other.ucsCondition);
      }
    }

    public getUcsObject_args deepCopy() {
      return new getUcsObject_args(this);
    }

    @Override
    public void clear() {
      this.ucsCondition = null;
    }

    public UcsCondition getUcsCondition() {
      return this.ucsCondition;
    }

    public getUcsObject_args setUcsCondition(UcsCondition ucsCondition) {
      this.ucsCondition = ucsCondition;
      return this;
    }

    public void unsetUcsCondition() {
      this.ucsCondition = null;
    }

    /** Returns true if field ucsCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetUcsCondition() {
      return this.ucsCondition != null;
    }

    public void setUcsConditionIsSet(boolean value) {
      if (!value) {
        this.ucsCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UCS_CONDITION:
        if (value == null) {
          unsetUcsCondition();
        } else {
          setUcsCondition((UcsCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UCS_CONDITION:
        return getUcsCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UCS_CONDITION:
        return isSetUcsCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUcsObject_args)
        return this.equals((getUcsObject_args)that);
      return false;
    }

    public boolean equals(getUcsObject_args that) {
      if (that == null)
        return false;

      boolean this_present_ucsCondition = true && this.isSetUcsCondition();
      boolean that_present_ucsCondition = true && that.isSetUcsCondition();
      if (this_present_ucsCondition || that_present_ucsCondition) {
        if (!(this_present_ucsCondition && that_present_ucsCondition))
          return false;
        if (!this.ucsCondition.equals(that.ucsCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUcsObject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUcsObject_args typedOther = (getUcsObject_args)other;

      lastComparison = Boolean.valueOf(isSetUcsCondition()).compareTo(typedOther.isSetUcsCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUcsCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucsCondition, typedOther.ucsCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUcsObject_args(");
      boolean first = true;

      sb.append("ucsCondition:");
      if (this.ucsCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.ucsCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ucsCondition != null) {
        ucsCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUcsObject_argsStandardSchemeFactory implements SchemeFactory {
      public getUcsObject_argsStandardScheme getScheme() {
        return new getUcsObject_argsStandardScheme();
      }
    }

    private static class getUcsObject_argsStandardScheme extends StandardScheme<getUcsObject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUcsObject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UCS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ucsCondition = new UcsCondition();
                struct.ucsCondition.read(iprot);
                struct.setUcsConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUcsObject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ucsCondition != null) {
          oprot.writeFieldBegin(UCS_CONDITION_FIELD_DESC);
          struct.ucsCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUcsObject_argsTupleSchemeFactory implements SchemeFactory {
      public getUcsObject_argsTupleScheme getScheme() {
        return new getUcsObject_argsTupleScheme();
      }
    }

    private static class getUcsObject_argsTupleScheme extends TupleScheme<getUcsObject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUcsObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUcsCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUcsCondition()) {
          struct.ucsCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUcsObject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ucsCondition = new UcsCondition();
          struct.ucsCondition.read(iprot);
          struct.setUcsConditionIsSet(true);
        }
      }
    }

  }

  public static class getUcsObject_result implements org.apache.thrift.TBase<getUcsObject_result, getUcsObject_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUcsObject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUcsObject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUcsObject_resultTupleSchemeFactory());
    }

    public UcsObjectResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UcsObjectResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUcsObject_result.class, metaDataMap);
    }

    public getUcsObject_result() {
    }

    public getUcsObject_result(
      UcsObjectResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUcsObject_result(getUcsObject_result other) {
      if (other.isSetSuccess()) {
        this.success = new UcsObjectResult(other.success);
      }
    }

    public getUcsObject_result deepCopy() {
      return new getUcsObject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UcsObjectResult getSuccess() {
      return this.success;
    }

    public getUcsObject_result setSuccess(UcsObjectResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UcsObjectResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUcsObject_result)
        return this.equals((getUcsObject_result)that);
      return false;
    }

    public boolean equals(getUcsObject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUcsObject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUcsObject_result typedOther = (getUcsObject_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUcsObject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUcsObject_resultStandardSchemeFactory implements SchemeFactory {
      public getUcsObject_resultStandardScheme getScheme() {
        return new getUcsObject_resultStandardScheme();
      }
    }

    private static class getUcsObject_resultStandardScheme extends StandardScheme<getUcsObject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUcsObject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UcsObjectResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUcsObject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUcsObject_resultTupleSchemeFactory implements SchemeFactory {
      public getUcsObject_resultTupleScheme getScheme() {
        return new getUcsObject_resultTupleScheme();
      }
    }

    private static class getUcsObject_resultTupleScheme extends TupleScheme<getUcsObject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUcsObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUcsObject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UcsObjectResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUcsString_args implements org.apache.thrift.TBase<getUcsString_args, getUcsString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUcsString_args");

    private static final org.apache.thrift.protocol.TField UCS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("ucsCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUcsString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUcsString_argsTupleSchemeFactory());
    }

    public UcsCondition ucsCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UCS_CONDITION((short)1, "ucsCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UCS_CONDITION
            return UCS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UCS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("ucsCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UcsCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUcsString_args.class, metaDataMap);
    }

    public getUcsString_args() {
    }

    public getUcsString_args(
      UcsCondition ucsCondition)
    {
      this();
      this.ucsCondition = ucsCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUcsString_args(getUcsString_args other) {
      if (other.isSetUcsCondition()) {
        this.ucsCondition = new UcsCondition(other.ucsCondition);
      }
    }

    public getUcsString_args deepCopy() {
      return new getUcsString_args(this);
    }

    @Override
    public void clear() {
      this.ucsCondition = null;
    }

    public UcsCondition getUcsCondition() {
      return this.ucsCondition;
    }

    public getUcsString_args setUcsCondition(UcsCondition ucsCondition) {
      this.ucsCondition = ucsCondition;
      return this;
    }

    public void unsetUcsCondition() {
      this.ucsCondition = null;
    }

    /** Returns true if field ucsCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetUcsCondition() {
      return this.ucsCondition != null;
    }

    public void setUcsConditionIsSet(boolean value) {
      if (!value) {
        this.ucsCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UCS_CONDITION:
        if (value == null) {
          unsetUcsCondition();
        } else {
          setUcsCondition((UcsCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UCS_CONDITION:
        return getUcsCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UCS_CONDITION:
        return isSetUcsCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUcsString_args)
        return this.equals((getUcsString_args)that);
      return false;
    }

    public boolean equals(getUcsString_args that) {
      if (that == null)
        return false;

      boolean this_present_ucsCondition = true && this.isSetUcsCondition();
      boolean that_present_ucsCondition = true && that.isSetUcsCondition();
      if (this_present_ucsCondition || that_present_ucsCondition) {
        if (!(this_present_ucsCondition && that_present_ucsCondition))
          return false;
        if (!this.ucsCondition.equals(that.ucsCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUcsString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUcsString_args typedOther = (getUcsString_args)other;

      lastComparison = Boolean.valueOf(isSetUcsCondition()).compareTo(typedOther.isSetUcsCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUcsCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucsCondition, typedOther.ucsCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUcsString_args(");
      boolean first = true;

      sb.append("ucsCondition:");
      if (this.ucsCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.ucsCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ucsCondition != null) {
        ucsCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUcsString_argsStandardSchemeFactory implements SchemeFactory {
      public getUcsString_argsStandardScheme getScheme() {
        return new getUcsString_argsStandardScheme();
      }
    }

    private static class getUcsString_argsStandardScheme extends StandardScheme<getUcsString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUcsString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UCS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ucsCondition = new UcsCondition();
                struct.ucsCondition.read(iprot);
                struct.setUcsConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUcsString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ucsCondition != null) {
          oprot.writeFieldBegin(UCS_CONDITION_FIELD_DESC);
          struct.ucsCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUcsString_argsTupleSchemeFactory implements SchemeFactory {
      public getUcsString_argsTupleScheme getScheme() {
        return new getUcsString_argsTupleScheme();
      }
    }

    private static class getUcsString_argsTupleScheme extends TupleScheme<getUcsString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUcsString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUcsCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUcsCondition()) {
          struct.ucsCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUcsString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ucsCondition = new UcsCondition();
          struct.ucsCondition.read(iprot);
          struct.setUcsConditionIsSet(true);
        }
      }
    }

  }

  public static class getUcsString_result implements org.apache.thrift.TBase<getUcsString_result, getUcsString_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUcsString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUcsString_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUcsString_resultTupleSchemeFactory());
    }

    public UcsStringResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UcsStringResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUcsString_result.class, metaDataMap);
    }

    public getUcsString_result() {
    }

    public getUcsString_result(
      UcsStringResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUcsString_result(getUcsString_result other) {
      if (other.isSetSuccess()) {
        this.success = new UcsStringResult(other.success);
      }
    }

    public getUcsString_result deepCopy() {
      return new getUcsString_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UcsStringResult getSuccess() {
      return this.success;
    }

    public getUcsString_result setSuccess(UcsStringResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UcsStringResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUcsString_result)
        return this.equals((getUcsString_result)that);
      return false;
    }

    public boolean equals(getUcsString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUcsString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUcsString_result typedOther = (getUcsString_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUcsString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUcsString_resultStandardSchemeFactory implements SchemeFactory {
      public getUcsString_resultStandardScheme getScheme() {
        return new getUcsString_resultStandardScheme();
      }
    }

    private static class getUcsString_resultStandardScheme extends StandardScheme<getUcsString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUcsString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UcsStringResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUcsString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUcsString_resultTupleSchemeFactory implements SchemeFactory {
      public getUcsString_resultTupleScheme getScheme() {
        return new getUcsString_resultTupleScheme();
      }
    }

    private static class getUcsString_resultTupleScheme extends TupleScheme<getUcsString_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUcsString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUcsString_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UcsStringResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserDefaultClassTag_args implements org.apache.thrift.TBase<getUserDefaultClassTag_args, getUserDefaultClassTag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserDefaultClassTag_args");

    private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserDefaultClassTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserDefaultClassTag_argsTupleSchemeFactory());
    }

    public String clientType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_TYPE((short)1, "clientType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_TYPE
            return CLIENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserDefaultClassTag_args.class, metaDataMap);
    }

    public getUserDefaultClassTag_args() {
    }

    public getUserDefaultClassTag_args(
      String clientType)
    {
      this();
      this.clientType = clientType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserDefaultClassTag_args(getUserDefaultClassTag_args other) {
      if (other.isSetClientType()) {
        this.clientType = other.clientType;
      }
    }

    public getUserDefaultClassTag_args deepCopy() {
      return new getUserDefaultClassTag_args(this);
    }

    @Override
    public void clear() {
      this.clientType = null;
    }

    public String getClientType() {
      return this.clientType;
    }

    public getUserDefaultClassTag_args setClientType(String clientType) {
      this.clientType = clientType;
      return this;
    }

    public void unsetClientType() {
      this.clientType = null;
    }

    /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
    public boolean isSetClientType() {
      return this.clientType != null;
    }

    public void setClientTypeIsSet(boolean value) {
      if (!value) {
        this.clientType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_TYPE:
        if (value == null) {
          unsetClientType();
        } else {
          setClientType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_TYPE:
        return getClientType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_TYPE:
        return isSetClientType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserDefaultClassTag_args)
        return this.equals((getUserDefaultClassTag_args)that);
      return false;
    }

    public boolean equals(getUserDefaultClassTag_args that) {
      if (that == null)
        return false;

      boolean this_present_clientType = true && this.isSetClientType();
      boolean that_present_clientType = true && that.isSetClientType();
      if (this_present_clientType || that_present_clientType) {
        if (!(this_present_clientType && that_present_clientType))
          return false;
        if (!this.clientType.equals(that.clientType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserDefaultClassTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserDefaultClassTag_args typedOther = (getUserDefaultClassTag_args)other;

      lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserDefaultClassTag_args(");
      boolean first = true;

      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserDefaultClassTag_argsStandardSchemeFactory implements SchemeFactory {
      public getUserDefaultClassTag_argsStandardScheme getScheme() {
        return new getUserDefaultClassTag_argsStandardScheme();
      }
    }

    private static class getUserDefaultClassTag_argsStandardScheme extends StandardScheme<getUserDefaultClassTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserDefaultClassTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientType = iprot.readString();
                struct.setClientTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserDefaultClassTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientType != null) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserDefaultClassTag_argsTupleSchemeFactory implements SchemeFactory {
      public getUserDefaultClassTag_argsTupleScheme getScheme() {
        return new getUserDefaultClassTag_argsTupleScheme();
      }
    }

    private static class getUserDefaultClassTag_argsTupleScheme extends TupleScheme<getUserDefaultClassTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserDefaultClassTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientType()) {
          oprot.writeString(struct.clientType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserDefaultClassTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientType = iprot.readString();
          struct.setClientTypeIsSet(true);
        }
      }
    }

  }

  public static class getUserDefaultClassTag_result implements org.apache.thrift.TBase<getUserDefaultClassTag_result, getUserDefaultClassTag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserDefaultClassTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserDefaultClassTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserDefaultClassTag_resultTupleSchemeFactory());
    }

    public UserClassResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserClassResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserDefaultClassTag_result.class, metaDataMap);
    }

    public getUserDefaultClassTag_result() {
    }

    public getUserDefaultClassTag_result(
      UserClassResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserDefaultClassTag_result(getUserDefaultClassTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserClassResult(other.success);
      }
    }

    public getUserDefaultClassTag_result deepCopy() {
      return new getUserDefaultClassTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserClassResult getSuccess() {
      return this.success;
    }

    public getUserDefaultClassTag_result setSuccess(UserClassResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserClassResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserDefaultClassTag_result)
        return this.equals((getUserDefaultClassTag_result)that);
      return false;
    }

    public boolean equals(getUserDefaultClassTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUserDefaultClassTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUserDefaultClassTag_result typedOther = (getUserDefaultClassTag_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserDefaultClassTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserDefaultClassTag_resultStandardSchemeFactory implements SchemeFactory {
      public getUserDefaultClassTag_resultStandardScheme getScheme() {
        return new getUserDefaultClassTag_resultStandardScheme();
      }
    }

    private static class getUserDefaultClassTag_resultStandardScheme extends StandardScheme<getUserDefaultClassTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserDefaultClassTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserClassResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserDefaultClassTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserDefaultClassTag_resultTupleSchemeFactory implements SchemeFactory {
      public getUserDefaultClassTag_resultTupleScheme getScheme() {
        return new getUserDefaultClassTag_resultTupleScheme();
      }
    }

    private static class getUserDefaultClassTag_resultTupleScheme extends TupleScheme<getUserDefaultClassTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserDefaultClassTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserDefaultClassTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserClassResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAreaTacticId_args implements org.apache.thrift.TBase<getAreaTacticId_args, getAreaTacticId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAreaTacticId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAreaTacticId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAreaTacticId_argsTupleSchemeFactory());
    }

    public String clientType; // required
    public String area; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_TYPE((short)1, "clientType"),
      AREA((short)2, "area");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_TYPE
            return CLIENT_TYPE;
          case 2: // AREA
            return AREA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAreaTacticId_args.class, metaDataMap);
    }

    public getAreaTacticId_args() {
    }

    public getAreaTacticId_args(
      String clientType,
      String area)
    {
      this();
      this.clientType = clientType;
      this.area = area;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAreaTacticId_args(getAreaTacticId_args other) {
      if (other.isSetClientType()) {
        this.clientType = other.clientType;
      }
      if (other.isSetArea()) {
        this.area = other.area;
      }
    }

    public getAreaTacticId_args deepCopy() {
      return new getAreaTacticId_args(this);
    }

    @Override
    public void clear() {
      this.clientType = null;
      this.area = null;
    }

    public String getClientType() {
      return this.clientType;
    }

    public getAreaTacticId_args setClientType(String clientType) {
      this.clientType = clientType;
      return this;
    }

    public void unsetClientType() {
      this.clientType = null;
    }

    /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
    public boolean isSetClientType() {
      return this.clientType != null;
    }

    public void setClientTypeIsSet(boolean value) {
      if (!value) {
        this.clientType = null;
      }
    }

    public String getArea() {
      return this.area;
    }

    public getAreaTacticId_args setArea(String area) {
      this.area = area;
      return this;
    }

    public void unsetArea() {
      this.area = null;
    }

    /** Returns true if field area is set (has been assigned a value) and false otherwise */
    public boolean isSetArea() {
      return this.area != null;
    }

    public void setAreaIsSet(boolean value) {
      if (!value) {
        this.area = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_TYPE:
        if (value == null) {
          unsetClientType();
        } else {
          setClientType((String)value);
        }
        break;

      case AREA:
        if (value == null) {
          unsetArea();
        } else {
          setArea((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_TYPE:
        return getClientType();

      case AREA:
        return getArea();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_TYPE:
        return isSetClientType();
      case AREA:
        return isSetArea();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAreaTacticId_args)
        return this.equals((getAreaTacticId_args)that);
      return false;
    }

    public boolean equals(getAreaTacticId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientType = true && this.isSetClientType();
      boolean that_present_clientType = true && that.isSetClientType();
      if (this_present_clientType || that_present_clientType) {
        if (!(this_present_clientType && that_present_clientType))
          return false;
        if (!this.clientType.equals(that.clientType))
          return false;
      }

      boolean this_present_area = true && this.isSetArea();
      boolean that_present_area = true && that.isSetArea();
      if (this_present_area || that_present_area) {
        if (!(this_present_area && that_present_area))
          return false;
        if (!this.area.equals(that.area))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAreaTacticId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAreaTacticId_args typedOther = (getAreaTacticId_args)other;

      lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArea()).compareTo(typedOther.isSetArea());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArea()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, typedOther.area);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAreaTacticId_args(");
      boolean first = true;

      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("area:");
      if (this.area == null) {
        sb.append("null");
      } else {
        sb.append(this.area);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAreaTacticId_argsStandardSchemeFactory implements SchemeFactory {
      public getAreaTacticId_argsStandardScheme getScheme() {
        return new getAreaTacticId_argsStandardScheme();
      }
    }

    private static class getAreaTacticId_argsStandardScheme extends StandardScheme<getAreaTacticId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAreaTacticId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientType = iprot.readString();
                struct.setClientTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.area = iprot.readString();
                struct.setAreaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAreaTacticId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientType != null) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
        if (struct.area != null) {
          oprot.writeFieldBegin(AREA_FIELD_DESC);
          oprot.writeString(struct.area);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAreaTacticId_argsTupleSchemeFactory implements SchemeFactory {
      public getAreaTacticId_argsTupleScheme getScheme() {
        return new getAreaTacticId_argsTupleScheme();
      }
    }

    private static class getAreaTacticId_argsTupleScheme extends TupleScheme<getAreaTacticId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAreaTacticId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientType()) {
          optionals.set(0);
        }
        if (struct.isSetArea()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientType()) {
          oprot.writeString(struct.clientType);
        }
        if (struct.isSetArea()) {
          oprot.writeString(struct.area);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAreaTacticId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientType = iprot.readString();
          struct.setClientTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.area = iprot.readString();
          struct.setAreaIsSet(true);
        }
      }
    }

  }

  public static class getAreaTacticId_result implements org.apache.thrift.TBase<getAreaTacticId_result, getAreaTacticId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAreaTacticId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAreaTacticId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAreaTacticId_resultTupleSchemeFactory());
    }

    public AreaTacticResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AreaTacticResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAreaTacticId_result.class, metaDataMap);
    }

    public getAreaTacticId_result() {
    }

    public getAreaTacticId_result(
      AreaTacticResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAreaTacticId_result(getAreaTacticId_result other) {
      if (other.isSetSuccess()) {
        this.success = new AreaTacticResult(other.success);
      }
    }

    public getAreaTacticId_result deepCopy() {
      return new getAreaTacticId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AreaTacticResult getSuccess() {
      return this.success;
    }

    public getAreaTacticId_result setSuccess(AreaTacticResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AreaTacticResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAreaTacticId_result)
        return this.equals((getAreaTacticId_result)that);
      return false;
    }

    public boolean equals(getAreaTacticId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAreaTacticId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAreaTacticId_result typedOther = (getAreaTacticId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAreaTacticId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAreaTacticId_resultStandardSchemeFactory implements SchemeFactory {
      public getAreaTacticId_resultStandardScheme getScheme() {
        return new getAreaTacticId_resultStandardScheme();
      }
    }

    private static class getAreaTacticId_resultStandardScheme extends StandardScheme<getAreaTacticId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAreaTacticId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AreaTacticResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAreaTacticId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAreaTacticId_resultTupleSchemeFactory implements SchemeFactory {
      public getAreaTacticId_resultTupleScheme getScheme() {
        return new getAreaTacticId_resultTupleScheme();
      }
    }

    private static class getAreaTacticId_resultTupleScheme extends TupleScheme<getAreaTacticId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAreaTacticId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAreaTacticId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AreaTacticResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
