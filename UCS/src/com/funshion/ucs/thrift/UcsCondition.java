/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.ucs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UcsCondition implements org.apache.thrift.TBase<UcsCondition, UcsCondition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UcsCondition");

  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientVersion", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INSTALLTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("installtime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IPADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ipaddr", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UcsConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UcsConditionTupleSchemeFactory());
  }

  public String clientType; // required
  public String clientVersion; // required
  public String channel; // required
  public String mac; // required
  public long installtime; // required
  public String ipaddr; // required
  public int userid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_TYPE((short)1, "clientType"),
    CLIENT_VERSION((short)2, "clientVersion"),
    CHANNEL((short)3, "channel"),
    MAC((short)4, "mac"),
    INSTALLTIME((short)5, "installtime"),
    IPADDR((short)6, "ipaddr"),
    USERID((short)7, "userid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 2: // CLIENT_VERSION
          return CLIENT_VERSION;
        case 3: // CHANNEL
          return CHANNEL;
        case 4: // MAC
          return MAC;
        case 5: // INSTALLTIME
          return INSTALLTIME;
        case 6: // IPADDR
          return IPADDR;
        case 7: // USERID
          return USERID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSTALLTIME_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("clientVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTALLTIME, new org.apache.thrift.meta_data.FieldMetaData("installtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IPADDR, new org.apache.thrift.meta_data.FieldMetaData("ipaddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UcsCondition.class, metaDataMap);
  }

  public UcsCondition() {
  }

  public UcsCondition(
    String clientType,
    String clientVersion,
    String channel,
    String mac,
    long installtime,
    String ipaddr,
    int userid)
  {
    this();
    this.clientType = clientType;
    this.clientVersion = clientVersion;
    this.channel = channel;
    this.mac = mac;
    this.installtime = installtime;
    setInstalltimeIsSet(true);
    this.ipaddr = ipaddr;
    this.userid = userid;
    setUseridIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UcsCondition(UcsCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    if (other.isSetClientVersion()) {
      this.clientVersion = other.clientVersion;
    }
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
    this.installtime = other.installtime;
    if (other.isSetIpaddr()) {
      this.ipaddr = other.ipaddr;
    }
    this.userid = other.userid;
  }

  public UcsCondition deepCopy() {
    return new UcsCondition(this);
  }

  @Override
  public void clear() {
    this.clientType = null;
    this.clientVersion = null;
    this.channel = null;
    this.mac = null;
    setInstalltimeIsSet(false);
    this.installtime = 0;
    this.ipaddr = null;
    setUseridIsSet(false);
    this.userid = 0;
  }

  public String getClientType() {
    return this.clientType;
  }

  public UcsCondition setClientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  public String getClientVersion() {
    return this.clientVersion;
  }

  public UcsCondition setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  public void unsetClientVersion() {
    this.clientVersion = null;
  }

  /** Returns true if field clientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetClientVersion() {
    return this.clientVersion != null;
  }

  public void setClientVersionIsSet(boolean value) {
    if (!value) {
      this.clientVersion = null;
    }
  }

  public String getChannel() {
    return this.channel;
  }

  public UcsCondition setChannel(String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public UcsCondition setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public long getInstalltime() {
    return this.installtime;
  }

  public UcsCondition setInstalltime(long installtime) {
    this.installtime = installtime;
    setInstalltimeIsSet(true);
    return this;
  }

  public void unsetInstalltime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLTIME_ISSET_ID);
  }

  /** Returns true if field installtime is set (has been assigned a value) and false otherwise */
  public boolean isSetInstalltime() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLTIME_ISSET_ID);
  }

  public void setInstalltimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLTIME_ISSET_ID, value);
  }

  public String getIpaddr() {
    return this.ipaddr;
  }

  public UcsCondition setIpaddr(String ipaddr) {
    this.ipaddr = ipaddr;
    return this;
  }

  public void unsetIpaddr() {
    this.ipaddr = null;
  }

  /** Returns true if field ipaddr is set (has been assigned a value) and false otherwise */
  public boolean isSetIpaddr() {
    return this.ipaddr != null;
  }

  public void setIpaddrIsSet(boolean value) {
    if (!value) {
      this.ipaddr = null;
    }
  }

  public int getUserid() {
    return this.userid;
  }

  public UcsCondition setUserid(int userid) {
    this.userid = userid;
    setUseridIsSet(true);
    return this;
  }

  public void unsetUserid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUseridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((String)value);
      }
      break;

    case CLIENT_VERSION:
      if (value == null) {
        unsetClientVersion();
      } else {
        setClientVersion((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    case INSTALLTIME:
      if (value == null) {
        unsetInstalltime();
      } else {
        setInstalltime((Long)value);
      }
      break;

    case IPADDR:
      if (value == null) {
        unsetIpaddr();
      } else {
        setIpaddr((String)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_TYPE:
      return getClientType();

    case CLIENT_VERSION:
      return getClientVersion();

    case CHANNEL:
      return getChannel();

    case MAC:
      return getMac();

    case INSTALLTIME:
      return Long.valueOf(getInstalltime());

    case IPADDR:
      return getIpaddr();

    case USERID:
      return Integer.valueOf(getUserid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_TYPE:
      return isSetClientType();
    case CLIENT_VERSION:
      return isSetClientVersion();
    case CHANNEL:
      return isSetChannel();
    case MAC:
      return isSetMac();
    case INSTALLTIME:
      return isSetInstalltime();
    case IPADDR:
      return isSetIpaddr();
    case USERID:
      return isSetUserid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UcsCondition)
      return this.equals((UcsCondition)that);
    return false;
  }

  public boolean equals(UcsCondition that) {
    if (that == null)
      return false;

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_clientVersion = true && this.isSetClientVersion();
    boolean that_present_clientVersion = true && that.isSetClientVersion();
    if (this_present_clientVersion || that_present_clientVersion) {
      if (!(this_present_clientVersion && that_present_clientVersion))
        return false;
      if (!this.clientVersion.equals(that.clientVersion))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    boolean this_present_installtime = true;
    boolean that_present_installtime = true;
    if (this_present_installtime || that_present_installtime) {
      if (!(this_present_installtime && that_present_installtime))
        return false;
      if (this.installtime != that.installtime)
        return false;
    }

    boolean this_present_ipaddr = true && this.isSetIpaddr();
    boolean that_present_ipaddr = true && that.isSetIpaddr();
    if (this_present_ipaddr || that_present_ipaddr) {
      if (!(this_present_ipaddr && that_present_ipaddr))
        return false;
      if (!this.ipaddr.equals(that.ipaddr))
        return false;
    }

    boolean this_present_userid = true;
    boolean that_present_userid = true;
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (this.userid != that.userid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UcsCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UcsCondition typedOther = (UcsCondition)other;

    lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientVersion()).compareTo(typedOther.isSetClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientVersion, typedOther.clientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(typedOther.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, typedOther.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstalltime()).compareTo(typedOther.isSetInstalltime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstalltime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installtime, typedOther.installtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpaddr()).compareTo(typedOther.isSetIpaddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpaddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipaddr, typedOther.ipaddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UcsCondition(");
    boolean first = true;

    sb.append("clientType:");
    if (this.clientType == null) {
      sb.append("null");
    } else {
      sb.append(this.clientType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientVersion:");
    if (this.clientVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.clientVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mac:");
    if (this.mac == null) {
      sb.append("null");
    } else {
      sb.append(this.mac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("installtime:");
    sb.append(this.installtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipaddr:");
    if (this.ipaddr == null) {
      sb.append("null");
    } else {
      sb.append(this.ipaddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    sb.append(this.userid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UcsConditionStandardSchemeFactory implements SchemeFactory {
    public UcsConditionStandardScheme getScheme() {
      return new UcsConditionStandardScheme();
    }
  }

  private static class UcsConditionStandardScheme extends StandardScheme<UcsCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UcsCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientVersion = iprot.readString();
              struct.setClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INSTALLTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.installtime = iprot.readI64();
              struct.setInstalltimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IPADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipaddr = iprot.readString();
              struct.setIpaddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userid = iprot.readI32();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UcsCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientType != null) {
        oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.clientType);
        oprot.writeFieldEnd();
      }
      if (struct.clientVersion != null) {
        oprot.writeFieldBegin(CLIENT_VERSION_FIELD_DESC);
        oprot.writeString(struct.clientVersion);
        oprot.writeFieldEnd();
      }
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeString(struct.channel);
        oprot.writeFieldEnd();
      }
      if (struct.mac != null) {
        oprot.writeFieldBegin(MAC_FIELD_DESC);
        oprot.writeString(struct.mac);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTALLTIME_FIELD_DESC);
      oprot.writeI64(struct.installtime);
      oprot.writeFieldEnd();
      if (struct.ipaddr != null) {
        oprot.writeFieldBegin(IPADDR_FIELD_DESC);
        oprot.writeString(struct.ipaddr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USERID_FIELD_DESC);
      oprot.writeI32(struct.userid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UcsConditionTupleSchemeFactory implements SchemeFactory {
    public UcsConditionTupleScheme getScheme() {
      return new UcsConditionTupleScheme();
    }
  }

  private static class UcsConditionTupleScheme extends TupleScheme<UcsCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UcsCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientType()) {
        optionals.set(0);
      }
      if (struct.isSetClientVersion()) {
        optionals.set(1);
      }
      if (struct.isSetChannel()) {
        optionals.set(2);
      }
      if (struct.isSetMac()) {
        optionals.set(3);
      }
      if (struct.isSetInstalltime()) {
        optionals.set(4);
      }
      if (struct.isSetIpaddr()) {
        optionals.set(5);
      }
      if (struct.isSetUserid()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetClientVersion()) {
        oprot.writeString(struct.clientVersion);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
      if (struct.isSetInstalltime()) {
        oprot.writeI64(struct.installtime);
      }
      if (struct.isSetIpaddr()) {
        oprot.writeString(struct.ipaddr);
      }
      if (struct.isSetUserid()) {
        oprot.writeI32(struct.userid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UcsCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientVersion = iprot.readString();
        struct.setClientVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
      if (incoming.get(4)) {
        struct.installtime = iprot.readI64();
        struct.setInstalltimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ipaddr = iprot.readString();
        struct.setIpaddrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userid = iprot.readI32();
        struct.setUseridIsSet(true);
      }
    }
  }

}

