package com.funshion.fsql.expression;

import java.util.Arrays;
import java.util.List;

import org.apache.lucene.search.Query;

import com.funshion.fsql.expression.OrderInfo;
import com.funshion.fsql.expression.ast.ItemConditionNode;
import com.funshion.fsql.expression.ast.QueryMakeableConditionNode;

/**
 * Interpreter directly evaluates the abstract syntax tree generated by the
 * Parser. It checks the semantics as it process the tree.
 *
 */
public class FsqlInterpreter {
	public static final String[]NOPARA = new String[0];
	final String sql;
	final List<ItemConditionNode>var;
	public final QueryMakeableConditionNode head;
	public final String[]paras;
	public final int limit[] = new int[]{-1, -1};
	public final List<OrderInfo>orders;
	public FsqlInterpreter(String sql) throws Exception{
		this(sql, NOPARA);
	}

	public FsqlInterpreter(String sql, List<String>paras) throws Exception{
		this(sql, paras == null || paras.size() == 0 ? NOPARA : toArray(paras));
	}
	private static String[] toArray(List<String> paras2) {
		String[]arr = new String[paras2.size()];
		paras2.toArray(arr);
		return arr;
	}
	public FsqlInterpreter(String sql, String[]paras) throws Exception{
		this.sql = sql;
		Lexer lexer = new Lexer(sql);
		Parser parser = new Parser(lexer);
		parser.program();
		head = parser.conds;
		var = parser.getVar();
		limit[0] = parser.getResultOffset();
		limit[1] = parser.getResultLimit();
		this.paras = paras;

		orders = parser.getOrders();
		if(this.orders.size() == 0){
			throw new Exception("no orders set!");
		}

	}

	public Query toQuery() throws Exception {
		int x = 0; 
		for(;x < var.size(); x ++){
			var.get(x).setValue(paras[x]);
		}
		try{
			if(limit[0] == -1){
				limit[0] = Integer.parseInt(paras[x++]);
			}

			if(limit[1] == -1){
				limit[1] = Integer.parseInt(paras[x++]);
			}
		}catch(Exception e){
			throw new Exception("limit not set properly: " + e);
		}
		if(limit[0] < 0){
			throw new Exception("limit not set properly: offset = " + limit[0]);
		}
		
		if(limit[1] < 0){
			throw new Exception("limit not set properly: limit = " + limit[1]);
		}
		
		if(x != paras.length){
			throw new Exception("expect " + x + " paras, but real paras=" + Arrays.asList(paras) + ", size " + paras.length);
		}
		return head.colletQuery(this);
	}
}
