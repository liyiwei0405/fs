/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.search.media.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryStruct implements org.apache.thrift.TBase<QueryStruct, QueryStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryStruct");

  private static final org.apache.thrift.protocol.TField WEIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("weights", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LIMITS_FIELD_DESC = new org.apache.thrift.protocol.TField("limits", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFields", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RQS_FIELD_DESC = new org.apache.thrift.protocol.TField("rqs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("word", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SEARCH_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("searchModel", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HIT_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("hitField", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryStructTupleSchemeFactory());
  }

  public List<FieldWeight> weights; // required
  public List<FieldFilter> filters; // required
  public LimitBy limits; // required
  public List<SortBy> sortFields; // required
  public List<RangeQuery> rqs; // required
  public String word; // required
  public String indexName; // required
  public int searchModel; // required
  public List<String> hitField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WEIGHTS((short)1, "weights"),
    FILTERS((short)2, "filters"),
    LIMITS((short)3, "limits"),
    SORT_FIELDS((short)4, "sortFields"),
    RQS((short)5, "rqs"),
    WORD((short)6, "word"),
    INDEX_NAME((short)7, "indexName"),
    SEARCH_MODEL((short)8, "searchModel"),
    HIT_FIELD((short)9, "hitField");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WEIGHTS
          return WEIGHTS;
        case 2: // FILTERS
          return FILTERS;
        case 3: // LIMITS
          return LIMITS;
        case 4: // SORT_FIELDS
          return SORT_FIELDS;
        case 5: // RQS
          return RQS;
        case 6: // WORD
          return WORD;
        case 7: // INDEX_NAME
          return INDEX_NAME;
        case 8: // SEARCH_MODEL
          return SEARCH_MODEL;
        case 9: // HIT_FIELD
          return HIT_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEARCHMODEL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WEIGHTS, new org.apache.thrift.meta_data.FieldMetaData("weights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldWeight.class))));
    tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldFilter.class))));
    tmpMap.put(_Fields.LIMITS, new org.apache.thrift.meta_data.FieldMetaData("limits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitBy.class)));
    tmpMap.put(_Fields.SORT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("sortFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SortBy.class))));
    tmpMap.put(_Fields.RQS, new org.apache.thrift.meta_data.FieldMetaData("rqs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RangeQuery.class))));
    tmpMap.put(_Fields.WORD, new org.apache.thrift.meta_data.FieldMetaData("word", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEARCH_MODEL, new org.apache.thrift.meta_data.FieldMetaData("searchModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIT_FIELD, new org.apache.thrift.meta_data.FieldMetaData("hitField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryStruct.class, metaDataMap);
  }

  public QueryStruct() {
  }

  public QueryStruct(
    List<FieldWeight> weights,
    List<FieldFilter> filters,
    LimitBy limits,
    List<SortBy> sortFields,
    List<RangeQuery> rqs,
    String word,
    String indexName,
    int searchModel,
    List<String> hitField)
  {
    this();
    this.weights = weights;
    this.filters = filters;
    this.limits = limits;
    this.sortFields = sortFields;
    this.rqs = rqs;
    this.word = word;
    this.indexName = indexName;
    this.searchModel = searchModel;
    setSearchModelIsSet(true);
    this.hitField = hitField;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryStruct(QueryStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWeights()) {
      List<FieldWeight> __this__weights = new ArrayList<FieldWeight>();
      for (FieldWeight other_element : other.weights) {
        __this__weights.add(new FieldWeight(other_element));
      }
      this.weights = __this__weights;
    }
    if (other.isSetFilters()) {
      List<FieldFilter> __this__filters = new ArrayList<FieldFilter>();
      for (FieldFilter other_element : other.filters) {
        __this__filters.add(new FieldFilter(other_element));
      }
      this.filters = __this__filters;
    }
    if (other.isSetLimits()) {
      this.limits = new LimitBy(other.limits);
    }
    if (other.isSetSortFields()) {
      List<SortBy> __this__sortFields = new ArrayList<SortBy>();
      for (SortBy other_element : other.sortFields) {
        __this__sortFields.add(new SortBy(other_element));
      }
      this.sortFields = __this__sortFields;
    }
    if (other.isSetRqs()) {
      List<RangeQuery> __this__rqs = new ArrayList<RangeQuery>();
      for (RangeQuery other_element : other.rqs) {
        __this__rqs.add(new RangeQuery(other_element));
      }
      this.rqs = __this__rqs;
    }
    if (other.isSetWord()) {
      this.word = other.word;
    }
    if (other.isSetIndexName()) {
      this.indexName = other.indexName;
    }
    this.searchModel = other.searchModel;
    if (other.isSetHitField()) {
      List<String> __this__hitField = new ArrayList<String>();
      for (String other_element : other.hitField) {
        __this__hitField.add(other_element);
      }
      this.hitField = __this__hitField;
    }
  }

  public QueryStruct deepCopy() {
    return new QueryStruct(this);
  }

  @Override
  public void clear() {
    this.weights = null;
    this.filters = null;
    this.limits = null;
    this.sortFields = null;
    this.rqs = null;
    this.word = null;
    this.indexName = null;
    setSearchModelIsSet(false);
    this.searchModel = 0;
    this.hitField = null;
  }

  public int getWeightsSize() {
    return (this.weights == null) ? 0 : this.weights.size();
  }

  public java.util.Iterator<FieldWeight> getWeightsIterator() {
    return (this.weights == null) ? null : this.weights.iterator();
  }

  public void addToWeights(FieldWeight elem) {
    if (this.weights == null) {
      this.weights = new ArrayList<FieldWeight>();
    }
    this.weights.add(elem);
  }

  public List<FieldWeight> getWeights() {
    return this.weights;
  }

  public QueryStruct setWeights(List<FieldWeight> weights) {
    this.weights = weights;
    return this;
  }

  public void unsetWeights() {
    this.weights = null;
  }

  /** Returns true if field weights is set (has been assigned a value) and false otherwise */
  public boolean isSetWeights() {
    return this.weights != null;
  }

  public void setWeightsIsSet(boolean value) {
    if (!value) {
      this.weights = null;
    }
  }

  public int getFiltersSize() {
    return (this.filters == null) ? 0 : this.filters.size();
  }

  public java.util.Iterator<FieldFilter> getFiltersIterator() {
    return (this.filters == null) ? null : this.filters.iterator();
  }

  public void addToFilters(FieldFilter elem) {
    if (this.filters == null) {
      this.filters = new ArrayList<FieldFilter>();
    }
    this.filters.add(elem);
  }

  public List<FieldFilter> getFilters() {
    return this.filters;
  }

  public QueryStruct setFilters(List<FieldFilter> filters) {
    this.filters = filters;
    return this;
  }

  public void unsetFilters() {
    this.filters = null;
  }

  /** Returns true if field filters is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters() {
    return this.filters != null;
  }

  public void setFiltersIsSet(boolean value) {
    if (!value) {
      this.filters = null;
    }
  }

  public LimitBy getLimits() {
    return this.limits;
  }

  public QueryStruct setLimits(LimitBy limits) {
    this.limits = limits;
    return this;
  }

  public void unsetLimits() {
    this.limits = null;
  }

  /** Returns true if field limits is set (has been assigned a value) and false otherwise */
  public boolean isSetLimits() {
    return this.limits != null;
  }

  public void setLimitsIsSet(boolean value) {
    if (!value) {
      this.limits = null;
    }
  }

  public int getSortFieldsSize() {
    return (this.sortFields == null) ? 0 : this.sortFields.size();
  }

  public java.util.Iterator<SortBy> getSortFieldsIterator() {
    return (this.sortFields == null) ? null : this.sortFields.iterator();
  }

  public void addToSortFields(SortBy elem) {
    if (this.sortFields == null) {
      this.sortFields = new ArrayList<SortBy>();
    }
    this.sortFields.add(elem);
  }

  public List<SortBy> getSortFields() {
    return this.sortFields;
  }

  public QueryStruct setSortFields(List<SortBy> sortFields) {
    this.sortFields = sortFields;
    return this;
  }

  public void unsetSortFields() {
    this.sortFields = null;
  }

  /** Returns true if field sortFields is set (has been assigned a value) and false otherwise */
  public boolean isSetSortFields() {
    return this.sortFields != null;
  }

  public void setSortFieldsIsSet(boolean value) {
    if (!value) {
      this.sortFields = null;
    }
  }

  public int getRqsSize() {
    return (this.rqs == null) ? 0 : this.rqs.size();
  }

  public java.util.Iterator<RangeQuery> getRqsIterator() {
    return (this.rqs == null) ? null : this.rqs.iterator();
  }

  public void addToRqs(RangeQuery elem) {
    if (this.rqs == null) {
      this.rqs = new ArrayList<RangeQuery>();
    }
    this.rqs.add(elem);
  }

  public List<RangeQuery> getRqs() {
    return this.rqs;
  }

  public QueryStruct setRqs(List<RangeQuery> rqs) {
    this.rqs = rqs;
    return this;
  }

  public void unsetRqs() {
    this.rqs = null;
  }

  /** Returns true if field rqs is set (has been assigned a value) and false otherwise */
  public boolean isSetRqs() {
    return this.rqs != null;
  }

  public void setRqsIsSet(boolean value) {
    if (!value) {
      this.rqs = null;
    }
  }

  public String getWord() {
    return this.word;
  }

  public QueryStruct setWord(String word) {
    this.word = word;
    return this;
  }

  public void unsetWord() {
    this.word = null;
  }

  /** Returns true if field word is set (has been assigned a value) and false otherwise */
  public boolean isSetWord() {
    return this.word != null;
  }

  public void setWordIsSet(boolean value) {
    if (!value) {
      this.word = null;
    }
  }

  public String getIndexName() {
    return this.indexName;
  }

  public QueryStruct setIndexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  public void unsetIndexName() {
    this.indexName = null;
  }

  /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexName() {
    return this.indexName != null;
  }

  public void setIndexNameIsSet(boolean value) {
    if (!value) {
      this.indexName = null;
    }
  }

  public int getSearchModel() {
    return this.searchModel;
  }

  public QueryStruct setSearchModel(int searchModel) {
    this.searchModel = searchModel;
    setSearchModelIsSet(true);
    return this;
  }

  public void unsetSearchModel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHMODEL_ISSET_ID);
  }

  /** Returns true if field searchModel is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchModel() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHMODEL_ISSET_ID);
  }

  public void setSearchModelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHMODEL_ISSET_ID, value);
  }

  public int getHitFieldSize() {
    return (this.hitField == null) ? 0 : this.hitField.size();
  }

  public java.util.Iterator<String> getHitFieldIterator() {
    return (this.hitField == null) ? null : this.hitField.iterator();
  }

  public void addToHitField(String elem) {
    if (this.hitField == null) {
      this.hitField = new ArrayList<String>();
    }
    this.hitField.add(elem);
  }

  public List<String> getHitField() {
    return this.hitField;
  }

  public QueryStruct setHitField(List<String> hitField) {
    this.hitField = hitField;
    return this;
  }

  public void unsetHitField() {
    this.hitField = null;
  }

  /** Returns true if field hitField is set (has been assigned a value) and false otherwise */
  public boolean isSetHitField() {
    return this.hitField != null;
  }

  public void setHitFieldIsSet(boolean value) {
    if (!value) {
      this.hitField = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WEIGHTS:
      if (value == null) {
        unsetWeights();
      } else {
        setWeights((List<FieldWeight>)value);
      }
      break;

    case FILTERS:
      if (value == null) {
        unsetFilters();
      } else {
        setFilters((List<FieldFilter>)value);
      }
      break;

    case LIMITS:
      if (value == null) {
        unsetLimits();
      } else {
        setLimits((LimitBy)value);
      }
      break;

    case SORT_FIELDS:
      if (value == null) {
        unsetSortFields();
      } else {
        setSortFields((List<SortBy>)value);
      }
      break;

    case RQS:
      if (value == null) {
        unsetRqs();
      } else {
        setRqs((List<RangeQuery>)value);
      }
      break;

    case WORD:
      if (value == null) {
        unsetWord();
      } else {
        setWord((String)value);
      }
      break;

    case INDEX_NAME:
      if (value == null) {
        unsetIndexName();
      } else {
        setIndexName((String)value);
      }
      break;

    case SEARCH_MODEL:
      if (value == null) {
        unsetSearchModel();
      } else {
        setSearchModel((Integer)value);
      }
      break;

    case HIT_FIELD:
      if (value == null) {
        unsetHitField();
      } else {
        setHitField((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WEIGHTS:
      return getWeights();

    case FILTERS:
      return getFilters();

    case LIMITS:
      return getLimits();

    case SORT_FIELDS:
      return getSortFields();

    case RQS:
      return getRqs();

    case WORD:
      return getWord();

    case INDEX_NAME:
      return getIndexName();

    case SEARCH_MODEL:
      return Integer.valueOf(getSearchModel());

    case HIT_FIELD:
      return getHitField();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WEIGHTS:
      return isSetWeights();
    case FILTERS:
      return isSetFilters();
    case LIMITS:
      return isSetLimits();
    case SORT_FIELDS:
      return isSetSortFields();
    case RQS:
      return isSetRqs();
    case WORD:
      return isSetWord();
    case INDEX_NAME:
      return isSetIndexName();
    case SEARCH_MODEL:
      return isSetSearchModel();
    case HIT_FIELD:
      return isSetHitField();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryStruct)
      return this.equals((QueryStruct)that);
    return false;
  }

  public boolean equals(QueryStruct that) {
    if (that == null)
      return false;

    boolean this_present_weights = true && this.isSetWeights();
    boolean that_present_weights = true && that.isSetWeights();
    if (this_present_weights || that_present_weights) {
      if (!(this_present_weights && that_present_weights))
        return false;
      if (!this.weights.equals(that.weights))
        return false;
    }

    boolean this_present_filters = true && this.isSetFilters();
    boolean that_present_filters = true && that.isSetFilters();
    if (this_present_filters || that_present_filters) {
      if (!(this_present_filters && that_present_filters))
        return false;
      if (!this.filters.equals(that.filters))
        return false;
    }

    boolean this_present_limits = true && this.isSetLimits();
    boolean that_present_limits = true && that.isSetLimits();
    if (this_present_limits || that_present_limits) {
      if (!(this_present_limits && that_present_limits))
        return false;
      if (!this.limits.equals(that.limits))
        return false;
    }

    boolean this_present_sortFields = true && this.isSetSortFields();
    boolean that_present_sortFields = true && that.isSetSortFields();
    if (this_present_sortFields || that_present_sortFields) {
      if (!(this_present_sortFields && that_present_sortFields))
        return false;
      if (!this.sortFields.equals(that.sortFields))
        return false;
    }

    boolean this_present_rqs = true && this.isSetRqs();
    boolean that_present_rqs = true && that.isSetRqs();
    if (this_present_rqs || that_present_rqs) {
      if (!(this_present_rqs && that_present_rqs))
        return false;
      if (!this.rqs.equals(that.rqs))
        return false;
    }

    boolean this_present_word = true && this.isSetWord();
    boolean that_present_word = true && that.isSetWord();
    if (this_present_word || that_present_word) {
      if (!(this_present_word && that_present_word))
        return false;
      if (!this.word.equals(that.word))
        return false;
    }

    boolean this_present_indexName = true && this.isSetIndexName();
    boolean that_present_indexName = true && that.isSetIndexName();
    if (this_present_indexName || that_present_indexName) {
      if (!(this_present_indexName && that_present_indexName))
        return false;
      if (!this.indexName.equals(that.indexName))
        return false;
    }

    boolean this_present_searchModel = true;
    boolean that_present_searchModel = true;
    if (this_present_searchModel || that_present_searchModel) {
      if (!(this_present_searchModel && that_present_searchModel))
        return false;
      if (this.searchModel != that.searchModel)
        return false;
    }

    boolean this_present_hitField = true && this.isSetHitField();
    boolean that_present_hitField = true && that.isSetHitField();
    if (this_present_hitField || that_present_hitField) {
      if (!(this_present_hitField && that_present_hitField))
        return false;
      if (!this.hitField.equals(that.hitField))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryStruct typedOther = (QueryStruct)other;

    lastComparison = Boolean.valueOf(isSetWeights()).compareTo(typedOther.isSetWeights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weights, typedOther.weights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilters()).compareTo(typedOther.isSetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, typedOther.filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimits()).compareTo(typedOther.isSetLimits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limits, typedOther.limits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortFields()).compareTo(typedOther.isSetSortFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFields, typedOther.sortFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRqs()).compareTo(typedOther.isSetRqs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRqs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rqs, typedOther.rqs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWord()).compareTo(typedOther.isSetWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word, typedOther.word);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexName()).compareTo(typedOther.isSetIndexName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, typedOther.indexName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchModel()).compareTo(typedOther.isSetSearchModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchModel, typedOther.searchModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitField()).compareTo(typedOther.isSetHitField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitField, typedOther.hitField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryStruct(");
    boolean first = true;

    sb.append("weights:");
    if (this.weights == null) {
      sb.append("null");
    } else {
      sb.append(this.weights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filters:");
    if (this.filters == null) {
      sb.append("null");
    } else {
      sb.append(this.filters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limits:");
    if (this.limits == null) {
      sb.append("null");
    } else {
      sb.append(this.limits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortFields:");
    if (this.sortFields == null) {
      sb.append("null");
    } else {
      sb.append(this.sortFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rqs:");
    if (this.rqs == null) {
      sb.append("null");
    } else {
      sb.append(this.rqs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("word:");
    if (this.word == null) {
      sb.append("null");
    } else {
      sb.append(this.word);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexName:");
    if (this.indexName == null) {
      sb.append("null");
    } else {
      sb.append(this.indexName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchModel:");
    sb.append(this.searchModel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitField:");
    if (this.hitField == null) {
      sb.append("null");
    } else {
      sb.append(this.hitField);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (limits != null) {
      limits.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStructStandardSchemeFactory implements SchemeFactory {
    public QueryStructStandardScheme getScheme() {
      return new QueryStructStandardScheme();
    }
  }

  private static class QueryStructStandardScheme extends StandardScheme<QueryStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WEIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.weights = new ArrayList<FieldWeight>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  FieldWeight _elem2; // required
                  _elem2 = new FieldWeight();
                  _elem2.read(iprot);
                  struct.weights.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setWeightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.filters = new ArrayList<FieldFilter>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  FieldFilter _elem5; // required
                  _elem5 = new FieldFilter();
                  _elem5.read(iprot);
                  struct.filters.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.limits = new LimitBy();
              struct.limits.read(iprot);
              struct.setLimitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.sortFields = new ArrayList<SortBy>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  SortBy _elem8; // required
                  _elem8 = new SortBy();
                  _elem8.read(iprot);
                  struct.sortFields.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setSortFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RQS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.rqs = new ArrayList<RangeQuery>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  RangeQuery _elem11; // required
                  _elem11 = new RangeQuery();
                  _elem11.read(iprot);
                  struct.rqs.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setRqsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.word = iprot.readString();
              struct.setWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INDEX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexName = iprot.readString();
              struct.setIndexNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEARCH_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.searchModel = iprot.readI32();
              struct.setSearchModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HIT_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.hitField = new ArrayList<String>(_list12.size);
                for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                {
                  String _elem14; // required
                  _elem14 = iprot.readString();
                  struct.hitField.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setHitFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.weights != null) {
        oprot.writeFieldBegin(WEIGHTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.weights.size()));
          for (FieldWeight _iter15 : struct.weights)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.filters != null) {
        oprot.writeFieldBegin(FILTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters.size()));
          for (FieldFilter _iter16 : struct.filters)
          {
            _iter16.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.limits != null) {
        oprot.writeFieldBegin(LIMITS_FIELD_DESC);
        struct.limits.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sortFields != null) {
        oprot.writeFieldBegin(SORT_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortFields.size()));
          for (SortBy _iter17 : struct.sortFields)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rqs != null) {
        oprot.writeFieldBegin(RQS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rqs.size()));
          for (RangeQuery _iter18 : struct.rqs)
          {
            _iter18.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.word != null) {
        oprot.writeFieldBegin(WORD_FIELD_DESC);
        oprot.writeString(struct.word);
        oprot.writeFieldEnd();
      }
      if (struct.indexName != null) {
        oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
        oprot.writeString(struct.indexName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEARCH_MODEL_FIELD_DESC);
      oprot.writeI32(struct.searchModel);
      oprot.writeFieldEnd();
      if (struct.hitField != null) {
        oprot.writeFieldBegin(HIT_FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hitField.size()));
          for (String _iter19 : struct.hitField)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryStructTupleSchemeFactory implements SchemeFactory {
    public QueryStructTupleScheme getScheme() {
      return new QueryStructTupleScheme();
    }
  }

  private static class QueryStructTupleScheme extends TupleScheme<QueryStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWeights()) {
        optionals.set(0);
      }
      if (struct.isSetFilters()) {
        optionals.set(1);
      }
      if (struct.isSetLimits()) {
        optionals.set(2);
      }
      if (struct.isSetSortFields()) {
        optionals.set(3);
      }
      if (struct.isSetRqs()) {
        optionals.set(4);
      }
      if (struct.isSetWord()) {
        optionals.set(5);
      }
      if (struct.isSetIndexName()) {
        optionals.set(6);
      }
      if (struct.isSetSearchModel()) {
        optionals.set(7);
      }
      if (struct.isSetHitField()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetWeights()) {
        {
          oprot.writeI32(struct.weights.size());
          for (FieldWeight _iter20 : struct.weights)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetFilters()) {
        {
          oprot.writeI32(struct.filters.size());
          for (FieldFilter _iter21 : struct.filters)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetLimits()) {
        struct.limits.write(oprot);
      }
      if (struct.isSetSortFields()) {
        {
          oprot.writeI32(struct.sortFields.size());
          for (SortBy _iter22 : struct.sortFields)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetRqs()) {
        {
          oprot.writeI32(struct.rqs.size());
          for (RangeQuery _iter23 : struct.rqs)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetWord()) {
        oprot.writeString(struct.word);
      }
      if (struct.isSetIndexName()) {
        oprot.writeString(struct.indexName);
      }
      if (struct.isSetSearchModel()) {
        oprot.writeI32(struct.searchModel);
      }
      if (struct.isSetHitField()) {
        {
          oprot.writeI32(struct.hitField.size());
          for (String _iter24 : struct.hitField)
          {
            oprot.writeString(_iter24);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.weights = new ArrayList<FieldWeight>(_list25.size);
          for (int _i26 = 0; _i26 < _list25.size; ++_i26)
          {
            FieldWeight _elem27; // required
            _elem27 = new FieldWeight();
            _elem27.read(iprot);
            struct.weights.add(_elem27);
          }
        }
        struct.setWeightsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.filters = new ArrayList<FieldFilter>(_list28.size);
          for (int _i29 = 0; _i29 < _list28.size; ++_i29)
          {
            FieldFilter _elem30; // required
            _elem30 = new FieldFilter();
            _elem30.read(iprot);
            struct.filters.add(_elem30);
          }
        }
        struct.setFiltersIsSet(true);
      }
      if (incoming.get(2)) {
        struct.limits = new LimitBy();
        struct.limits.read(iprot);
        struct.setLimitsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortFields = new ArrayList<SortBy>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            SortBy _elem33; // required
            _elem33 = new SortBy();
            _elem33.read(iprot);
            struct.sortFields.add(_elem33);
          }
        }
        struct.setSortFieldsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rqs = new ArrayList<RangeQuery>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            RangeQuery _elem36; // required
            _elem36 = new RangeQuery();
            _elem36.read(iprot);
            struct.rqs.add(_elem36);
          }
        }
        struct.setRqsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.word = iprot.readString();
        struct.setWordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.indexName = iprot.readString();
        struct.setIndexNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.searchModel = iprot.readI32();
        struct.setSearchModelIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hitField = new ArrayList<String>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            String _elem39; // required
            _elem39 = iprot.readString();
            struct.hitField.add(_elem39);
          }
        }
        struct.setHitFieldIsSet(true);
      }
    }
  }

}

