/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.search.media.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FieldFilter implements org.apache.thrift.TBase<FieldFilter, FieldFilter._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FieldFilter");

  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldValue", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXCLUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("exclude", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FieldFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FieldFilterTupleSchemeFactory());
  }

  public String fieldName; // required
  public int fieldValue; // required
  public boolean exclude; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_NAME((short)1, "fieldName"),
    FIELD_VALUE((short)2, "fieldValue"),
    EXCLUDE((short)3, "exclude");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_NAME
          return FIELD_NAME;
        case 2: // FIELD_VALUE
          return FIELD_VALUE;
        case 3: // EXCLUDE
          return EXCLUDE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FIELDVALUE_ISSET_ID = 0;
  private static final int __EXCLUDE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fieldValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCLUDE, new org.apache.thrift.meta_data.FieldMetaData("exclude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FieldFilter.class, metaDataMap);
  }

  public FieldFilter() {
  }

  public FieldFilter(
    String fieldName,
    int fieldValue,
    boolean exclude)
  {
    this();
    this.fieldName = fieldName;
    this.fieldValue = fieldValue;
    setFieldValueIsSet(true);
    this.exclude = exclude;
    setExcludeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FieldFilter(FieldFilter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
    this.fieldValue = other.fieldValue;
    this.exclude = other.exclude;
  }

  public FieldFilter deepCopy() {
    return new FieldFilter(this);
  }

  @Override
  public void clear() {
    this.fieldName = null;
    setFieldValueIsSet(false);
    this.fieldValue = 0;
    setExcludeIsSet(false);
    this.exclude = false;
  }

  public String getFieldName() {
    return this.fieldName;
  }

  public FieldFilter setFieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public int getFieldValue() {
    return this.fieldValue;
  }

  public FieldFilter setFieldValue(int fieldValue) {
    this.fieldValue = fieldValue;
    setFieldValueIsSet(true);
    return this;
  }

  public void unsetFieldValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELDVALUE_ISSET_ID);
  }

  /** Returns true if field fieldValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldValue() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELDVALUE_ISSET_ID);
  }

  public void setFieldValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELDVALUE_ISSET_ID, value);
  }

  public boolean isExclude() {
    return this.exclude;
  }

  public FieldFilter setExclude(boolean exclude) {
    this.exclude = exclude;
    setExcludeIsSet(true);
    return this;
  }

  public void unsetExclude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCLUDE_ISSET_ID);
  }

  /** Returns true if field exclude is set (has been assigned a value) and false otherwise */
  public boolean isSetExclude() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCLUDE_ISSET_ID);
  }

  public void setExcludeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCLUDE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((String)value);
      }
      break;

    case FIELD_VALUE:
      if (value == null) {
        unsetFieldValue();
      } else {
        setFieldValue((Integer)value);
      }
      break;

    case EXCLUDE:
      if (value == null) {
        unsetExclude();
      } else {
        setExclude((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_NAME:
      return getFieldName();

    case FIELD_VALUE:
      return Integer.valueOf(getFieldValue());

    case EXCLUDE:
      return Boolean.valueOf(isExclude());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_NAME:
      return isSetFieldName();
    case FIELD_VALUE:
      return isSetFieldValue();
    case EXCLUDE:
      return isSetExclude();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FieldFilter)
      return this.equals((FieldFilter)that);
    return false;
  }

  public boolean equals(FieldFilter that) {
    if (that == null)
      return false;

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    boolean this_present_fieldValue = true;
    boolean that_present_fieldValue = true;
    if (this_present_fieldValue || that_present_fieldValue) {
      if (!(this_present_fieldValue && that_present_fieldValue))
        return false;
      if (this.fieldValue != that.fieldValue)
        return false;
    }

    boolean this_present_exclude = true;
    boolean that_present_exclude = true;
    if (this_present_exclude || that_present_exclude) {
      if (!(this_present_exclude && that_present_exclude))
        return false;
      if (this.exclude != that.exclude)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FieldFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FieldFilter typedOther = (FieldFilter)other;

    lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(typedOther.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, typedOther.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldValue()).compareTo(typedOther.isSetFieldValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldValue, typedOther.fieldValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExclude()).compareTo(typedOther.isSetExclude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExclude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclude, typedOther.exclude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FieldFilter(");
    boolean first = true;

    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldValue:");
    sb.append(this.fieldValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exclude:");
    sb.append(this.exclude);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FieldFilterStandardSchemeFactory implements SchemeFactory {
    public FieldFilterStandardScheme getScheme() {
      return new FieldFilterStandardScheme();
    }
  }

  private static class FieldFilterStandardScheme extends StandardScheme<FieldFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FieldFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fieldValue = iprot.readI32();
              struct.setFieldValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCLUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exclude = iprot.readBool();
              struct.setExcludeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FieldFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FIELD_VALUE_FIELD_DESC);
      oprot.writeI32(struct.fieldValue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCLUDE_FIELD_DESC);
      oprot.writeBool(struct.exclude);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FieldFilterTupleSchemeFactory implements SchemeFactory {
    public FieldFilterTupleScheme getScheme() {
      return new FieldFilterTupleScheme();
    }
  }

  private static class FieldFilterTupleScheme extends TupleScheme<FieldFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FieldFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFieldName()) {
        optionals.set(0);
      }
      if (struct.isSetFieldValue()) {
        optionals.set(1);
      }
      if (struct.isSetExclude()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
      if (struct.isSetFieldValue()) {
        oprot.writeI32(struct.fieldValue);
      }
      if (struct.isSetExclude()) {
        oprot.writeBool(struct.exclude);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FieldFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fieldValue = iprot.readI32();
        struct.setFieldValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exclude = iprot.readBool();
        struct.setExcludeIsSet(true);
      }
    }
  }

}

