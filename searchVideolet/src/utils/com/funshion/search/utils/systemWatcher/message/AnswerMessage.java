/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.search.utils.systemWatcher.message;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AnswerMessage implements org.apache.thrift.TBase<AnswerMessage, AnswerMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnswerMessage");

  private static final org.apache.thrift.protocol.TField ANSWER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("answerStatus", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("actionStatus", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("serverSeq", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ANSWER_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("answerBody", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnswerMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnswerMessageTupleSchemeFactory());
  }

  public short answerStatus; // required
  public int actionStatus; // required
  public long serverSeq; // required
  public List<String> answerBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANSWER_STATUS((short)1, "answerStatus"),
    ACTION_STATUS((short)2, "actionStatus"),
    SERVER_SEQ((short)3, "serverSeq"),
    ANSWER_BODY((short)4, "answerBody");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANSWER_STATUS
          return ANSWER_STATUS;
        case 2: // ACTION_STATUS
          return ACTION_STATUS;
        case 3: // SERVER_SEQ
          return SERVER_SEQ;
        case 4: // ANSWER_BODY
          return ANSWER_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANSWERSTATUS_ISSET_ID = 0;
  private static final int __ACTIONSTATUS_ISSET_ID = 1;
  private static final int __SERVERSEQ_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANSWER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("answerStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ACTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("actionStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVER_SEQ, new org.apache.thrift.meta_data.FieldMetaData("serverSeq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ANSWER_BODY, new org.apache.thrift.meta_data.FieldMetaData("answerBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnswerMessage.class, metaDataMap);
  }

  public AnswerMessage() {
  }

  public AnswerMessage(
    short answerStatus,
    int actionStatus,
    long serverSeq,
    List<String> answerBody)
  {
    this();
    this.answerStatus = answerStatus;
    setAnswerStatusIsSet(true);
    this.actionStatus = actionStatus;
    setActionStatusIsSet(true);
    this.serverSeq = serverSeq;
    setServerSeqIsSet(true);
    this.answerBody = answerBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnswerMessage(AnswerMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.answerStatus = other.answerStatus;
    this.actionStatus = other.actionStatus;
    this.serverSeq = other.serverSeq;
    if (other.isSetAnswerBody()) {
      List<String> __this__answerBody = new ArrayList<String>();
      for (String other_element : other.answerBody) {
        __this__answerBody.add(other_element);
      }
      this.answerBody = __this__answerBody;
    }
  }

  public AnswerMessage deepCopy() {
    return new AnswerMessage(this);
  }

  @Override
  public void clear() {
    setAnswerStatusIsSet(false);
    this.answerStatus = 0;
    setActionStatusIsSet(false);
    this.actionStatus = 0;
    setServerSeqIsSet(false);
    this.serverSeq = 0;
    this.answerBody = null;
  }

  public short getAnswerStatus() {
    return this.answerStatus;
  }

  public AnswerMessage setAnswerStatus(short answerStatus) {
    this.answerStatus = answerStatus;
    setAnswerStatusIsSet(true);
    return this;
  }

  public void unsetAnswerStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERSTATUS_ISSET_ID);
  }

  /** Returns true if field answerStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERSTATUS_ISSET_ID);
  }

  public void setAnswerStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERSTATUS_ISSET_ID, value);
  }

  public int getActionStatus() {
    return this.actionStatus;
  }

  public AnswerMessage setActionStatus(int actionStatus) {
    this.actionStatus = actionStatus;
    setActionStatusIsSet(true);
    return this;
  }

  public void unsetActionStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONSTATUS_ISSET_ID);
  }

  /** Returns true if field actionStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetActionStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONSTATUS_ISSET_ID);
  }

  public void setActionStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONSTATUS_ISSET_ID, value);
  }

  public long getServerSeq() {
    return this.serverSeq;
  }

  public AnswerMessage setServerSeq(long serverSeq) {
    this.serverSeq = serverSeq;
    setServerSeqIsSet(true);
    return this;
  }

  public void unsetServerSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERSEQ_ISSET_ID);
  }

  /** Returns true if field serverSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetServerSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERSEQ_ISSET_ID);
  }

  public void setServerSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERSEQ_ISSET_ID, value);
  }

  public int getAnswerBodySize() {
    return (this.answerBody == null) ? 0 : this.answerBody.size();
  }

  public java.util.Iterator<String> getAnswerBodyIterator() {
    return (this.answerBody == null) ? null : this.answerBody.iterator();
  }

  public void addToAnswerBody(String elem) {
    if (this.answerBody == null) {
      this.answerBody = new ArrayList<String>();
    }
    this.answerBody.add(elem);
  }

  public List<String> getAnswerBody() {
    return this.answerBody;
  }

  public AnswerMessage setAnswerBody(List<String> answerBody) {
    this.answerBody = answerBody;
    return this;
  }

  public void unsetAnswerBody() {
    this.answerBody = null;
  }

  /** Returns true if field answerBody is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerBody() {
    return this.answerBody != null;
  }

  public void setAnswerBodyIsSet(boolean value) {
    if (!value) {
      this.answerBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANSWER_STATUS:
      if (value == null) {
        unsetAnswerStatus();
      } else {
        setAnswerStatus((Short)value);
      }
      break;

    case ACTION_STATUS:
      if (value == null) {
        unsetActionStatus();
      } else {
        setActionStatus((Integer)value);
      }
      break;

    case SERVER_SEQ:
      if (value == null) {
        unsetServerSeq();
      } else {
        setServerSeq((Long)value);
      }
      break;

    case ANSWER_BODY:
      if (value == null) {
        unsetAnswerBody();
      } else {
        setAnswerBody((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANSWER_STATUS:
      return Short.valueOf(getAnswerStatus());

    case ACTION_STATUS:
      return Integer.valueOf(getActionStatus());

    case SERVER_SEQ:
      return Long.valueOf(getServerSeq());

    case ANSWER_BODY:
      return getAnswerBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANSWER_STATUS:
      return isSetAnswerStatus();
    case ACTION_STATUS:
      return isSetActionStatus();
    case SERVER_SEQ:
      return isSetServerSeq();
    case ANSWER_BODY:
      return isSetAnswerBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnswerMessage)
      return this.equals((AnswerMessage)that);
    return false;
  }

  public boolean equals(AnswerMessage that) {
    if (that == null)
      return false;

    boolean this_present_answerStatus = true;
    boolean that_present_answerStatus = true;
    if (this_present_answerStatus || that_present_answerStatus) {
      if (!(this_present_answerStatus && that_present_answerStatus))
        return false;
      if (this.answerStatus != that.answerStatus)
        return false;
    }

    boolean this_present_actionStatus = true;
    boolean that_present_actionStatus = true;
    if (this_present_actionStatus || that_present_actionStatus) {
      if (!(this_present_actionStatus && that_present_actionStatus))
        return false;
      if (this.actionStatus != that.actionStatus)
        return false;
    }

    boolean this_present_serverSeq = true;
    boolean that_present_serverSeq = true;
    if (this_present_serverSeq || that_present_serverSeq) {
      if (!(this_present_serverSeq && that_present_serverSeq))
        return false;
      if (this.serverSeq != that.serverSeq)
        return false;
    }

    boolean this_present_answerBody = true && this.isSetAnswerBody();
    boolean that_present_answerBody = true && that.isSetAnswerBody();
    if (this_present_answerBody || that_present_answerBody) {
      if (!(this_present_answerBody && that_present_answerBody))
        return false;
      if (!this.answerBody.equals(that.answerBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AnswerMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AnswerMessage typedOther = (AnswerMessage)other;

    lastComparison = Boolean.valueOf(isSetAnswerStatus()).compareTo(typedOther.isSetAnswerStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerStatus, typedOther.answerStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionStatus()).compareTo(typedOther.isSetActionStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionStatus, typedOther.actionStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerSeq()).compareTo(typedOther.isSetServerSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverSeq, typedOther.serverSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerBody()).compareTo(typedOther.isSetAnswerBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerBody, typedOther.answerBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AnswerMessage(");
    boolean first = true;

    sb.append("answerStatus:");
    sb.append(this.answerStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actionStatus:");
    sb.append(this.actionStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverSeq:");
    sb.append(this.serverSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerBody:");
    if (this.answerBody == null) {
      sb.append("null");
    } else {
      sb.append(this.answerBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnswerMessageStandardSchemeFactory implements SchemeFactory {
    public AnswerMessageStandardScheme getScheme() {
      return new AnswerMessageStandardScheme();
    }
  }

  private static class AnswerMessageStandardScheme extends StandardScheme<AnswerMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnswerMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANSWER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.answerStatus = iprot.readI16();
              struct.setAnswerStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actionStatus = iprot.readI32();
              struct.setActionStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverSeq = iprot.readI64();
              struct.setServerSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANSWER_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.answerBody = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10; // required
                  _elem10 = iprot.readString();
                  struct.answerBody.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setAnswerBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnswerMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANSWER_STATUS_FIELD_DESC);
      oprot.writeI16(struct.answerStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_STATUS_FIELD_DESC);
      oprot.writeI32(struct.actionStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVER_SEQ_FIELD_DESC);
      oprot.writeI64(struct.serverSeq);
      oprot.writeFieldEnd();
      if (struct.answerBody != null) {
        oprot.writeFieldBegin(ANSWER_BODY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.answerBody.size()));
          for (String _iter11 : struct.answerBody)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnswerMessageTupleSchemeFactory implements SchemeFactory {
    public AnswerMessageTupleScheme getScheme() {
      return new AnswerMessageTupleScheme();
    }
  }

  private static class AnswerMessageTupleScheme extends TupleScheme<AnswerMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnswerMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnswerStatus()) {
        optionals.set(0);
      }
      if (struct.isSetActionStatus()) {
        optionals.set(1);
      }
      if (struct.isSetServerSeq()) {
        optionals.set(2);
      }
      if (struct.isSetAnswerBody()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAnswerStatus()) {
        oprot.writeI16(struct.answerStatus);
      }
      if (struct.isSetActionStatus()) {
        oprot.writeI32(struct.actionStatus);
      }
      if (struct.isSetServerSeq()) {
        oprot.writeI64(struct.serverSeq);
      }
      if (struct.isSetAnswerBody()) {
        {
          oprot.writeI32(struct.answerBody.size());
          for (String _iter12 : struct.answerBody)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnswerMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.answerStatus = iprot.readI16();
        struct.setAnswerStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actionStatus = iprot.readI32();
        struct.setActionStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serverSeq = iprot.readI64();
        struct.setServerSeqIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.answerBody = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.answerBody.add(_elem15);
          }
        }
        struct.setAnswerBodyIsSet(true);
      }
    }
  }

}

