/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.retrieve.media.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RetrieveStruct implements org.apache.thrift.TBase<RetrieveStruct, RetrieveStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RetrieveStruct");

  private static final org.apache.thrift.protocol.TField VER_FIELD_DESC = new org.apache.thrift.protocol.TField("ver", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIMITS_FIELD_DESC = new org.apache.thrift.protocol.TField("limits", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortFields", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("conditions", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RetrieveStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RetrieveStructTupleSchemeFactory());
  }

  public int ver; // required
  public LimitRetrieve limits; // required
  public List<SortRetrieve> sortFields; // required
  public List<Token> conditions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VER((short)1, "ver"),
    LIMITS((short)2, "limits"),
    SORT_FIELDS((short)3, "sortFields"),
    CONDITIONS((short)4, "conditions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VER
          return VER;
        case 2: // LIMITS
          return LIMITS;
        case 3: // SORT_FIELDS
          return SORT_FIELDS;
        case 4: // CONDITIONS
          return CONDITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VER, new org.apache.thrift.meta_data.FieldMetaData("ver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMITS, new org.apache.thrift.meta_data.FieldMetaData("limits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LimitRetrieve.class)));
    tmpMap.put(_Fields.SORT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("sortFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SortRetrieve.class))));
    tmpMap.put(_Fields.CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("conditions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Token.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RetrieveStruct.class, metaDataMap);
  }

  public RetrieveStruct() {
  }

  public RetrieveStruct(
    int ver,
    LimitRetrieve limits,
    List<SortRetrieve> sortFields,
    List<Token> conditions)
  {
    this();
    this.ver = ver;
    setVerIsSet(true);
    this.limits = limits;
    this.sortFields = sortFields;
    this.conditions = conditions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RetrieveStruct(RetrieveStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ver = other.ver;
    if (other.isSetLimits()) {
      this.limits = new LimitRetrieve(other.limits);
    }
    if (other.isSetSortFields()) {
      List<SortRetrieve> __this__sortFields = new ArrayList<SortRetrieve>();
      for (SortRetrieve other_element : other.sortFields) {
        __this__sortFields.add(new SortRetrieve(other_element));
      }
      this.sortFields = __this__sortFields;
    }
    if (other.isSetConditions()) {
      List<Token> __this__conditions = new ArrayList<Token>();
      for (Token other_element : other.conditions) {
        __this__conditions.add(new Token(other_element));
      }
      this.conditions = __this__conditions;
    }
  }

  public RetrieveStruct deepCopy() {
    return new RetrieveStruct(this);
  }

  @Override
  public void clear() {
    setVerIsSet(false);
    this.ver = 0;
    this.limits = null;
    this.sortFields = null;
    this.conditions = null;
  }

  public int getVer() {
    return this.ver;
  }

  public RetrieveStruct setVer(int ver) {
    this.ver = ver;
    setVerIsSet(true);
    return this;
  }

  public void unsetVer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VER_ISSET_ID);
  }

  /** Returns true if field ver is set (has been assigned a value) and false otherwise */
  public boolean isSetVer() {
    return EncodingUtils.testBit(__isset_bitfield, __VER_ISSET_ID);
  }

  public void setVerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VER_ISSET_ID, value);
  }

  public LimitRetrieve getLimits() {
    return this.limits;
  }

  public RetrieveStruct setLimits(LimitRetrieve limits) {
    this.limits = limits;
    return this;
  }

  public void unsetLimits() {
    this.limits = null;
  }

  /** Returns true if field limits is set (has been assigned a value) and false otherwise */
  public boolean isSetLimits() {
    return this.limits != null;
  }

  public void setLimitsIsSet(boolean value) {
    if (!value) {
      this.limits = null;
    }
  }

  public int getSortFieldsSize() {
    return (this.sortFields == null) ? 0 : this.sortFields.size();
  }

  public java.util.Iterator<SortRetrieve> getSortFieldsIterator() {
    return (this.sortFields == null) ? null : this.sortFields.iterator();
  }

  public void addToSortFields(SortRetrieve elem) {
    if (this.sortFields == null) {
      this.sortFields = new ArrayList<SortRetrieve>();
    }
    this.sortFields.add(elem);
  }

  public List<SortRetrieve> getSortFields() {
    return this.sortFields;
  }

  public RetrieveStruct setSortFields(List<SortRetrieve> sortFields) {
    this.sortFields = sortFields;
    return this;
  }

  public void unsetSortFields() {
    this.sortFields = null;
  }

  /** Returns true if field sortFields is set (has been assigned a value) and false otherwise */
  public boolean isSetSortFields() {
    return this.sortFields != null;
  }

  public void setSortFieldsIsSet(boolean value) {
    if (!value) {
      this.sortFields = null;
    }
  }

  public int getConditionsSize() {
    return (this.conditions == null) ? 0 : this.conditions.size();
  }

  public java.util.Iterator<Token> getConditionsIterator() {
    return (this.conditions == null) ? null : this.conditions.iterator();
  }

  public void addToConditions(Token elem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<Token>();
    }
    this.conditions.add(elem);
  }

  public List<Token> getConditions() {
    return this.conditions;
  }

  public RetrieveStruct setConditions(List<Token> conditions) {
    this.conditions = conditions;
    return this;
  }

  public void unsetConditions() {
    this.conditions = null;
  }

  /** Returns true if field conditions is set (has been assigned a value) and false otherwise */
  public boolean isSetConditions() {
    return this.conditions != null;
  }

  public void setConditionsIsSet(boolean value) {
    if (!value) {
      this.conditions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VER:
      if (value == null) {
        unsetVer();
      } else {
        setVer((Integer)value);
      }
      break;

    case LIMITS:
      if (value == null) {
        unsetLimits();
      } else {
        setLimits((LimitRetrieve)value);
      }
      break;

    case SORT_FIELDS:
      if (value == null) {
        unsetSortFields();
      } else {
        setSortFields((List<SortRetrieve>)value);
      }
      break;

    case CONDITIONS:
      if (value == null) {
        unsetConditions();
      } else {
        setConditions((List<Token>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VER:
      return Integer.valueOf(getVer());

    case LIMITS:
      return getLimits();

    case SORT_FIELDS:
      return getSortFields();

    case CONDITIONS:
      return getConditions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VER:
      return isSetVer();
    case LIMITS:
      return isSetLimits();
    case SORT_FIELDS:
      return isSetSortFields();
    case CONDITIONS:
      return isSetConditions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RetrieveStruct)
      return this.equals((RetrieveStruct)that);
    return false;
  }

  public boolean equals(RetrieveStruct that) {
    if (that == null)
      return false;

    boolean this_present_ver = true;
    boolean that_present_ver = true;
    if (this_present_ver || that_present_ver) {
      if (!(this_present_ver && that_present_ver))
        return false;
      if (this.ver != that.ver)
        return false;
    }

    boolean this_present_limits = true && this.isSetLimits();
    boolean that_present_limits = true && that.isSetLimits();
    if (this_present_limits || that_present_limits) {
      if (!(this_present_limits && that_present_limits))
        return false;
      if (!this.limits.equals(that.limits))
        return false;
    }

    boolean this_present_sortFields = true && this.isSetSortFields();
    boolean that_present_sortFields = true && that.isSetSortFields();
    if (this_present_sortFields || that_present_sortFields) {
      if (!(this_present_sortFields && that_present_sortFields))
        return false;
      if (!this.sortFields.equals(that.sortFields))
        return false;
    }

    boolean this_present_conditions = true && this.isSetConditions();
    boolean that_present_conditions = true && that.isSetConditions();
    if (this_present_conditions || that_present_conditions) {
      if (!(this_present_conditions && that_present_conditions))
        return false;
      if (!this.conditions.equals(that.conditions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RetrieveStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RetrieveStruct typedOther = (RetrieveStruct)other;

    lastComparison = Boolean.valueOf(isSetVer()).compareTo(typedOther.isSetVer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ver, typedOther.ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimits()).compareTo(typedOther.isSetLimits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limits, typedOther.limits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortFields()).compareTo(typedOther.isSetSortFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortFields, typedOther.sortFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditions()).compareTo(typedOther.isSetConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditions, typedOther.conditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RetrieveStruct(");
    boolean first = true;

    sb.append("ver:");
    sb.append(this.ver);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limits:");
    if (this.limits == null) {
      sb.append("null");
    } else {
      sb.append(this.limits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortFields:");
    if (this.sortFields == null) {
      sb.append("null");
    } else {
      sb.append(this.sortFields);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("conditions:");
    if (this.conditions == null) {
      sb.append("null");
    } else {
      sb.append(this.conditions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (limits != null) {
      limits.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RetrieveStructStandardSchemeFactory implements SchemeFactory {
    public RetrieveStructStandardScheme getScheme() {
      return new RetrieveStructStandardScheme();
    }
  }

  private static class RetrieveStructStandardScheme extends StandardScheme<RetrieveStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RetrieveStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ver = iprot.readI32();
              struct.setVerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.limits = new LimitRetrieve();
              struct.limits.read(iprot);
              struct.setLimitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.sortFields = new ArrayList<SortRetrieve>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  SortRetrieve _elem2; // required
                  _elem2 = new SortRetrieve();
                  _elem2.read(iprot);
                  struct.sortFields.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSortFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.conditions = new ArrayList<Token>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  Token _elem5; // required
                  _elem5 = new Token();
                  _elem5.read(iprot);
                  struct.conditions.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RetrieveStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VER_FIELD_DESC);
      oprot.writeI32(struct.ver);
      oprot.writeFieldEnd();
      if (struct.limits != null) {
        oprot.writeFieldBegin(LIMITS_FIELD_DESC);
        struct.limits.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sortFields != null) {
        oprot.writeFieldBegin(SORT_FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortFields.size()));
          for (SortRetrieve _iter6 : struct.sortFields)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.conditions != null) {
        oprot.writeFieldBegin(CONDITIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conditions.size()));
          for (Token _iter7 : struct.conditions)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RetrieveStructTupleSchemeFactory implements SchemeFactory {
    public RetrieveStructTupleScheme getScheme() {
      return new RetrieveStructTupleScheme();
    }
  }

  private static class RetrieveStructTupleScheme extends TupleScheme<RetrieveStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RetrieveStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVer()) {
        optionals.set(0);
      }
      if (struct.isSetLimits()) {
        optionals.set(1);
      }
      if (struct.isSetSortFields()) {
        optionals.set(2);
      }
      if (struct.isSetConditions()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVer()) {
        oprot.writeI32(struct.ver);
      }
      if (struct.isSetLimits()) {
        struct.limits.write(oprot);
      }
      if (struct.isSetSortFields()) {
        {
          oprot.writeI32(struct.sortFields.size());
          for (SortRetrieve _iter8 : struct.sortFields)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetConditions()) {
        {
          oprot.writeI32(struct.conditions.size());
          for (Token _iter9 : struct.conditions)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RetrieveStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ver = iprot.readI32();
        struct.setVerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limits = new LimitRetrieve();
        struct.limits.read(iprot);
        struct.setLimitsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortFields = new ArrayList<SortRetrieve>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            SortRetrieve _elem12; // required
            _elem12 = new SortRetrieve();
            _elem12.read(iprot);
            struct.sortFields.add(_elem12);
          }
        }
        struct.setSortFieldsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.conditions = new ArrayList<Token>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            Token _elem15; // required
            _elem15 = new Token();
            _elem15.read(iprot);
            struct.conditions.add(_elem15);
          }
        }
        struct.setConditionsIsSet(true);
      }
    }
  }

}

