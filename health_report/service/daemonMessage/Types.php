<?php

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class QueryMessage {
  static $_TSPEC;

  public $messageName = null;
  public $ienv = null;
  public $messageBody = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ienv',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'messageBody',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageName'])) {
        $this->messageName = $vals['messageName'];
      }
      if (isset($vals['ienv'])) {
        $this->ienv = $vals['ienv'];
      }
      if (isset($vals['messageBody'])) {
        $this->messageBody = $vals['messageBody'];
      }
    }
  }

  public function getName() {
    return 'QueryMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ienv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->messageBody = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->messageBody []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryMessage');
    if ($this->messageName !== null) {
      $xfer += $output->writeFieldBegin('messageName', TType::STRING, 1);
      $xfer += $output->writeString($this->messageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ienv !== null) {
      $xfer += $output->writeFieldBegin('ienv', TType::STRING, 2);
      $xfer += $output->writeString($this->ienv);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageBody !== null) {
      if (!is_array($this->messageBody)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBody', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->messageBody));
        {
          foreach ($this->messageBody as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AnswerMessage {
  static $_TSPEC;

  public $answerStatus = null;
  public $actionStatus = null;
  public $serverSeq = null;
  public $answerBody = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'answerStatus',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'actionStatus',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'serverSeq',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'answerBody',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['answerStatus'])) {
        $this->answerStatus = $vals['answerStatus'];
      }
      if (isset($vals['actionStatus'])) {
        $this->actionStatus = $vals['actionStatus'];
      }
      if (isset($vals['serverSeq'])) {
        $this->serverSeq = $vals['serverSeq'];
      }
      if (isset($vals['answerBody'])) {
        $this->answerBody = $vals['answerBody'];
      }
    }
  }

  public function getName() {
    return 'AnswerMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->answerStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->actionStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->serverSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->answerBody = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->answerBody []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AnswerMessage');
    if ($this->answerStatus !== null) {
      $xfer += $output->writeFieldBegin('answerStatus', TType::I16, 1);
      $xfer += $output->writeI16($this->answerStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionStatus !== null) {
      $xfer += $output->writeFieldBegin('actionStatus', TType::I32, 2);
      $xfer += $output->writeI32($this->actionStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverSeq !== null) {
      $xfer += $output->writeFieldBegin('serverSeq', TType::I64, 3);
      $xfer += $output->writeI64($this->serverSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answerBody !== null) {
      if (!is_array($this->answerBody)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('answerBody', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->answerBody));
        {
          foreach ($this->answerBody as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


