/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.searchHint.thrift.v2;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class requestStruct implements org.apache.thrift.TBase<requestStruct, requestStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestStruct");

  private static final org.apache.thrift.protocol.TField WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("word", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDE_STAFF_FIELD_DESC = new org.apache.thrift.protocol.TField("includeStaff", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField FILTER_COPY_RIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("filterCopyRight", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new requestStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new requestStructTupleSchemeFactory());
  }

  public String word; // required
  public int limit; // required
  public int offset; // required
  public boolean includeStaff; // required
  public boolean filterCopyRight; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORD((short)1, "word"),
    LIMIT((short)2, "limit"),
    OFFSET((short)3, "offset"),
    INCLUDE_STAFF((short)4, "includeStaff"),
    FILTER_COPY_RIGHT((short)5, "filterCopyRight");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORD
          return WORD;
        case 2: // LIMIT
          return LIMIT;
        case 3: // OFFSET
          return OFFSET;
        case 4: // INCLUDE_STAFF
          return INCLUDE_STAFF;
        case 5: // FILTER_COPY_RIGHT
          return FILTER_COPY_RIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMIT_ISSET_ID = 0;
  private static final int __OFFSET_ISSET_ID = 1;
  private static final int __INCLUDESTAFF_ISSET_ID = 2;
  private static final int __FILTERCOPYRIGHT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORD, new org.apache.thrift.meta_data.FieldMetaData("word", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INCLUDE_STAFF, new org.apache.thrift.meta_data.FieldMetaData("includeStaff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FILTER_COPY_RIGHT, new org.apache.thrift.meta_data.FieldMetaData("filterCopyRight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestStruct.class, metaDataMap);
  }

  public requestStruct() {
  }

  public requestStruct(
    String word,
    int limit,
    int offset,
    boolean includeStaff,
    boolean filterCopyRight)
  {
    this();
    this.word = word;
    this.limit = limit;
    setLimitIsSet(true);
    this.offset = offset;
    setOffsetIsSet(true);
    this.includeStaff = includeStaff;
    setIncludeStaffIsSet(true);
    this.filterCopyRight = filterCopyRight;
    setFilterCopyRightIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public requestStruct(requestStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWord()) {
      this.word = other.word;
    }
    this.limit = other.limit;
    this.offset = other.offset;
    this.includeStaff = other.includeStaff;
    this.filterCopyRight = other.filterCopyRight;
  }

  public requestStruct deepCopy() {
    return new requestStruct(this);
  }

  @Override
  public void clear() {
    this.word = null;
    setLimitIsSet(false);
    this.limit = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    setIncludeStaffIsSet(false);
    this.includeStaff = false;
    setFilterCopyRightIsSet(false);
    this.filterCopyRight = false;
  }

  public String getWord() {
    return this.word;
  }

  public requestStruct setWord(String word) {
    this.word = word;
    return this;
  }

  public void unsetWord() {
    this.word = null;
  }

  /** Returns true if field word is set (has been assigned a value) and false otherwise */
  public boolean isSetWord() {
    return this.word != null;
  }

  public void setWordIsSet(boolean value) {
    if (!value) {
      this.word = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public requestStruct setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public requestStruct setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public boolean isIncludeStaff() {
    return this.includeStaff;
  }

  public requestStruct setIncludeStaff(boolean includeStaff) {
    this.includeStaff = includeStaff;
    setIncludeStaffIsSet(true);
    return this;
  }

  public void unsetIncludeStaff() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDESTAFF_ISSET_ID);
  }

  /** Returns true if field includeStaff is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeStaff() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDESTAFF_ISSET_ID);
  }

  public void setIncludeStaffIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDESTAFF_ISSET_ID, value);
  }

  public boolean isFilterCopyRight() {
    return this.filterCopyRight;
  }

  public requestStruct setFilterCopyRight(boolean filterCopyRight) {
    this.filterCopyRight = filterCopyRight;
    setFilterCopyRightIsSet(true);
    return this;
  }

  public void unsetFilterCopyRight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILTERCOPYRIGHT_ISSET_ID);
  }

  /** Returns true if field filterCopyRight is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterCopyRight() {
    return EncodingUtils.testBit(__isset_bitfield, __FILTERCOPYRIGHT_ISSET_ID);
  }

  public void setFilterCopyRightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILTERCOPYRIGHT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WORD:
      if (value == null) {
        unsetWord();
      } else {
        setWord((String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case INCLUDE_STAFF:
      if (value == null) {
        unsetIncludeStaff();
      } else {
        setIncludeStaff((Boolean)value);
      }
      break;

    case FILTER_COPY_RIGHT:
      if (value == null) {
        unsetFilterCopyRight();
      } else {
        setFilterCopyRight((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WORD:
      return getWord();

    case LIMIT:
      return Integer.valueOf(getLimit());

    case OFFSET:
      return Integer.valueOf(getOffset());

    case INCLUDE_STAFF:
      return Boolean.valueOf(isIncludeStaff());

    case FILTER_COPY_RIGHT:
      return Boolean.valueOf(isFilterCopyRight());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WORD:
      return isSetWord();
    case LIMIT:
      return isSetLimit();
    case OFFSET:
      return isSetOffset();
    case INCLUDE_STAFF:
      return isSetIncludeStaff();
    case FILTER_COPY_RIGHT:
      return isSetFilterCopyRight();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof requestStruct)
      return this.equals((requestStruct)that);
    return false;
  }

  public boolean equals(requestStruct that) {
    if (that == null)
      return false;

    boolean this_present_word = true && this.isSetWord();
    boolean that_present_word = true && that.isSetWord();
    if (this_present_word || that_present_word) {
      if (!(this_present_word && that_present_word))
        return false;
      if (!this.word.equals(that.word))
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_includeStaff = true;
    boolean that_present_includeStaff = true;
    if (this_present_includeStaff || that_present_includeStaff) {
      if (!(this_present_includeStaff && that_present_includeStaff))
        return false;
      if (this.includeStaff != that.includeStaff)
        return false;
    }

    boolean this_present_filterCopyRight = true;
    boolean that_present_filterCopyRight = true;
    if (this_present_filterCopyRight || that_present_filterCopyRight) {
      if (!(this_present_filterCopyRight && that_present_filterCopyRight))
        return false;
      if (this.filterCopyRight != that.filterCopyRight)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(requestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    requestStruct typedOther = (requestStruct)other;

    lastComparison = Boolean.valueOf(isSetWord()).compareTo(typedOther.isSetWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word, typedOther.word);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeStaff()).compareTo(typedOther.isSetIncludeStaff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeStaff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeStaff, typedOther.includeStaff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilterCopyRight()).compareTo(typedOther.isSetFilterCopyRight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterCopyRight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterCopyRight, typedOther.filterCopyRight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("requestStruct(");
    boolean first = true;

    sb.append("word:");
    if (this.word == null) {
      sb.append("null");
    } else {
      sb.append(this.word);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeStaff:");
    sb.append(this.includeStaff);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filterCopyRight:");
    sb.append(this.filterCopyRight);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class requestStructStandardSchemeFactory implements SchemeFactory {
    public requestStructStandardScheme getScheme() {
      return new requestStructStandardScheme();
    }
  }

  private static class requestStructStandardScheme extends StandardScheme<requestStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, requestStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.word = iprot.readString();
              struct.setWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDE_STAFF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeStaff = iprot.readBool();
              struct.setIncludeStaffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILTER_COPY_RIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.filterCopyRight = iprot.readBool();
              struct.setFilterCopyRightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, requestStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.word != null) {
        oprot.writeFieldBegin(WORD_FIELD_DESC);
        oprot.writeString(struct.word);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCLUDE_STAFF_FIELD_DESC);
      oprot.writeBool(struct.includeStaff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILTER_COPY_RIGHT_FIELD_DESC);
      oprot.writeBool(struct.filterCopyRight);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class requestStructTupleSchemeFactory implements SchemeFactory {
    public requestStructTupleScheme getScheme() {
      return new requestStructTupleScheme();
    }
  }

  private static class requestStructTupleScheme extends TupleScheme<requestStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, requestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWord()) {
        optionals.set(0);
      }
      if (struct.isSetLimit()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetIncludeStaff()) {
        optionals.set(3);
      }
      if (struct.isSetFilterCopyRight()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetWord()) {
        oprot.writeString(struct.word);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetIncludeStaff()) {
        oprot.writeBool(struct.includeStaff);
      }
      if (struct.isSetFilterCopyRight()) {
        oprot.writeBool(struct.filterCopyRight);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, requestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.word = iprot.readString();
        struct.setWordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.includeStaff = iprot.readBool();
        struct.setIncludeStaffIsSet(true);
      }
      if (incoming.get(4)) {
        struct.filterCopyRight = iprot.readBool();
        struct.setFilterCopyRightIsSet(true);
      }
    }
  }

}

