/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.gamma.atdd.vodInfo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlayInfoRec implements org.apache.thrift.TBase<PlayInfoRec, PlayInfoRec._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayInfoRec");

  private static final org.apache.thrift.protocol.TField PLAY_INFO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playInfoID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaID", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SERIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialID", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HASH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("hashID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EDITOR_TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("editorTaskName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOCAL_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("localFilePath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TORRENT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("torrentFiles", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileFormat", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField TIME_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("timeLength", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CLARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("clarity", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SUBTITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("subtitle", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BYTE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteRate", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField DUB_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("dubOne", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DUB_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("dubTwo", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayInfoRecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayInfoRecTupleSchemeFactory());
  }

  public int playInfoID; // required
  public int mediaID; // required
  public int serialID; // required
  public String hashID; // required
  public String cID; // required
  public String editorTaskName; // required
  public String taskName; // required
  public String localFilePath; // required
  public String torrentFiles; // required
  public String fileFormat; // required
  public long fileSize; // required
  public int timeLength; // required
  public String clarity; // required
  public String subtitle; // required
  public short byteRate; // required
  public String dubOne; // required
  public String dubTwo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAY_INFO_ID((short)1, "playInfoID"),
    MEDIA_ID((short)2, "mediaID"),
    SERIAL_ID((short)3, "serialID"),
    HASH_ID((short)4, "hashID"),
    C_ID((short)5, "cID"),
    EDITOR_TASK_NAME((short)6, "editorTaskName"),
    TASK_NAME((short)7, "taskName"),
    LOCAL_FILE_PATH((short)8, "localFilePath"),
    TORRENT_FILES((short)9, "torrentFiles"),
    FILE_FORMAT((short)10, "fileFormat"),
    FILE_SIZE((short)11, "fileSize"),
    TIME_LENGTH((short)12, "timeLength"),
    CLARITY((short)13, "clarity"),
    SUBTITLE((short)14, "subtitle"),
    BYTE_RATE((short)15, "byteRate"),
    DUB_ONE((short)16, "dubOne"),
    DUB_TWO((short)17, "dubTwo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAY_INFO_ID
          return PLAY_INFO_ID;
        case 2: // MEDIA_ID
          return MEDIA_ID;
        case 3: // SERIAL_ID
          return SERIAL_ID;
        case 4: // HASH_ID
          return HASH_ID;
        case 5: // C_ID
          return C_ID;
        case 6: // EDITOR_TASK_NAME
          return EDITOR_TASK_NAME;
        case 7: // TASK_NAME
          return TASK_NAME;
        case 8: // LOCAL_FILE_PATH
          return LOCAL_FILE_PATH;
        case 9: // TORRENT_FILES
          return TORRENT_FILES;
        case 10: // FILE_FORMAT
          return FILE_FORMAT;
        case 11: // FILE_SIZE
          return FILE_SIZE;
        case 12: // TIME_LENGTH
          return TIME_LENGTH;
        case 13: // CLARITY
          return CLARITY;
        case 14: // SUBTITLE
          return SUBTITLE;
        case 15: // BYTE_RATE
          return BYTE_RATE;
        case 16: // DUB_ONE
          return DUB_ONE;
        case 17: // DUB_TWO
          return DUB_TWO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAYINFOID_ISSET_ID = 0;
  private static final int __MEDIAID_ISSET_ID = 1;
  private static final int __SERIALID_ISSET_ID = 2;
  private static final int __FILESIZE_ISSET_ID = 3;
  private static final int __TIMELENGTH_ISSET_ID = 4;
  private static final int __BYTERATE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAY_INFO_ID, new org.apache.thrift.meta_data.FieldMetaData("playInfoID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERIAL_ID, new org.apache.thrift.meta_data.FieldMetaData("serialID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HASH_ID, new org.apache.thrift.meta_data.FieldMetaData("hashID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("cID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EDITOR_TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("editorTaskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("localFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TORRENT_FILES, new org.apache.thrift.meta_data.FieldMetaData("torrentFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("fileFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("timeLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLARITY, new org.apache.thrift.meta_data.FieldMetaData("clarity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBTITLE, new org.apache.thrift.meta_data.FieldMetaData("subtitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYTE_RATE, new org.apache.thrift.meta_data.FieldMetaData("byteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DUB_ONE, new org.apache.thrift.meta_data.FieldMetaData("dubOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUB_TWO, new org.apache.thrift.meta_data.FieldMetaData("dubTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayInfoRec.class, metaDataMap);
  }

  public PlayInfoRec() {
  }

  public PlayInfoRec(
    int playInfoID,
    int mediaID,
    int serialID,
    String hashID,
    String cID,
    String editorTaskName,
    String taskName,
    String localFilePath,
    String torrentFiles,
    String fileFormat,
    long fileSize,
    int timeLength,
    String clarity,
    String subtitle,
    short byteRate,
    String dubOne,
    String dubTwo)
  {
    this();
    this.playInfoID = playInfoID;
    setPlayInfoIDIsSet(true);
    this.mediaID = mediaID;
    setMediaIDIsSet(true);
    this.serialID = serialID;
    setSerialIDIsSet(true);
    this.hashID = hashID;
    this.cID = cID;
    this.editorTaskName = editorTaskName;
    this.taskName = taskName;
    this.localFilePath = localFilePath;
    this.torrentFiles = torrentFiles;
    this.fileFormat = fileFormat;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.timeLength = timeLength;
    setTimeLengthIsSet(true);
    this.clarity = clarity;
    this.subtitle = subtitle;
    this.byteRate = byteRate;
    setByteRateIsSet(true);
    this.dubOne = dubOne;
    this.dubTwo = dubTwo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayInfoRec(PlayInfoRec other) {
    __isset_bitfield = other.__isset_bitfield;
    this.playInfoID = other.playInfoID;
    this.mediaID = other.mediaID;
    this.serialID = other.serialID;
    if (other.isSetHashID()) {
      this.hashID = other.hashID;
    }
    if (other.isSetCID()) {
      this.cID = other.cID;
    }
    if (other.isSetEditorTaskName()) {
      this.editorTaskName = other.editorTaskName;
    }
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetLocalFilePath()) {
      this.localFilePath = other.localFilePath;
    }
    if (other.isSetTorrentFiles()) {
      this.torrentFiles = other.torrentFiles;
    }
    if (other.isSetFileFormat()) {
      this.fileFormat = other.fileFormat;
    }
    this.fileSize = other.fileSize;
    this.timeLength = other.timeLength;
    if (other.isSetClarity()) {
      this.clarity = other.clarity;
    }
    if (other.isSetSubtitle()) {
      this.subtitle = other.subtitle;
    }
    this.byteRate = other.byteRate;
    if (other.isSetDubOne()) {
      this.dubOne = other.dubOne;
    }
    if (other.isSetDubTwo()) {
      this.dubTwo = other.dubTwo;
    }
  }

  public PlayInfoRec deepCopy() {
    return new PlayInfoRec(this);
  }

  @Override
  public void clear() {
    setPlayInfoIDIsSet(false);
    this.playInfoID = 0;
    setMediaIDIsSet(false);
    this.mediaID = 0;
    setSerialIDIsSet(false);
    this.serialID = 0;
    this.hashID = null;
    this.cID = null;
    this.editorTaskName = null;
    this.taskName = null;
    this.localFilePath = null;
    this.torrentFiles = null;
    this.fileFormat = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    setTimeLengthIsSet(false);
    this.timeLength = 0;
    this.clarity = null;
    this.subtitle = null;
    setByteRateIsSet(false);
    this.byteRate = 0;
    this.dubOne = null;
    this.dubTwo = null;
  }

  public int getPlayInfoID() {
    return this.playInfoID;
  }

  public PlayInfoRec setPlayInfoID(int playInfoID) {
    this.playInfoID = playInfoID;
    setPlayInfoIDIsSet(true);
    return this;
  }

  public void unsetPlayInfoID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYINFOID_ISSET_ID);
  }

  /** Returns true if field playInfoID is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayInfoID() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYINFOID_ISSET_ID);
  }

  public void setPlayInfoIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYINFOID_ISSET_ID, value);
  }

  public int getMediaID() {
    return this.mediaID;
  }

  public PlayInfoRec setMediaID(int mediaID) {
    this.mediaID = mediaID;
    setMediaIDIsSet(true);
    return this;
  }

  public void unsetMediaID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAID_ISSET_ID);
  }

  /** Returns true if field mediaID is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaID() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIAID_ISSET_ID);
  }

  public void setMediaIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAID_ISSET_ID, value);
  }

  public int getSerialID() {
    return this.serialID;
  }

  public PlayInfoRec setSerialID(int serialID) {
    this.serialID = serialID;
    setSerialIDIsSet(true);
    return this;
  }

  public void unsetSerialID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALID_ISSET_ID);
  }

  /** Returns true if field serialID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALID_ISSET_ID);
  }

  public void setSerialIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALID_ISSET_ID, value);
  }

  public String getHashID() {
    return this.hashID;
  }

  public PlayInfoRec setHashID(String hashID) {
    this.hashID = hashID;
    return this;
  }

  public void unsetHashID() {
    this.hashID = null;
  }

  /** Returns true if field hashID is set (has been assigned a value) and false otherwise */
  public boolean isSetHashID() {
    return this.hashID != null;
  }

  public void setHashIDIsSet(boolean value) {
    if (!value) {
      this.hashID = null;
    }
  }

  public String getCID() {
    return this.cID;
  }

  public PlayInfoRec setCID(String cID) {
    this.cID = cID;
    return this;
  }

  public void unsetCID() {
    this.cID = null;
  }

  /** Returns true if field cID is set (has been assigned a value) and false otherwise */
  public boolean isSetCID() {
    return this.cID != null;
  }

  public void setCIDIsSet(boolean value) {
    if (!value) {
      this.cID = null;
    }
  }

  public String getEditorTaskName() {
    return this.editorTaskName;
  }

  public PlayInfoRec setEditorTaskName(String editorTaskName) {
    this.editorTaskName = editorTaskName;
    return this;
  }

  public void unsetEditorTaskName() {
    this.editorTaskName = null;
  }

  /** Returns true if field editorTaskName is set (has been assigned a value) and false otherwise */
  public boolean isSetEditorTaskName() {
    return this.editorTaskName != null;
  }

  public void setEditorTaskNameIsSet(boolean value) {
    if (!value) {
      this.editorTaskName = null;
    }
  }

  public String getTaskName() {
    return this.taskName;
  }

  public PlayInfoRec setTaskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public String getLocalFilePath() {
    return this.localFilePath;
  }

  public PlayInfoRec setLocalFilePath(String localFilePath) {
    this.localFilePath = localFilePath;
    return this;
  }

  public void unsetLocalFilePath() {
    this.localFilePath = null;
  }

  /** Returns true if field localFilePath is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalFilePath() {
    return this.localFilePath != null;
  }

  public void setLocalFilePathIsSet(boolean value) {
    if (!value) {
      this.localFilePath = null;
    }
  }

  public String getTorrentFiles() {
    return this.torrentFiles;
  }

  public PlayInfoRec setTorrentFiles(String torrentFiles) {
    this.torrentFiles = torrentFiles;
    return this;
  }

  public void unsetTorrentFiles() {
    this.torrentFiles = null;
  }

  /** Returns true if field torrentFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetTorrentFiles() {
    return this.torrentFiles != null;
  }

  public void setTorrentFilesIsSet(boolean value) {
    if (!value) {
      this.torrentFiles = null;
    }
  }

  public String getFileFormat() {
    return this.fileFormat;
  }

  public PlayInfoRec setFileFormat(String fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  public void unsetFileFormat() {
    this.fileFormat = null;
  }

  /** Returns true if field fileFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetFileFormat() {
    return this.fileFormat != null;
  }

  public void setFileFormatIsSet(boolean value) {
    if (!value) {
      this.fileFormat = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public PlayInfoRec setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public int getTimeLength() {
    return this.timeLength;
  }

  public PlayInfoRec setTimeLength(int timeLength) {
    this.timeLength = timeLength;
    setTimeLengthIsSet(true);
    return this;
  }

  public void unsetTimeLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMELENGTH_ISSET_ID);
  }

  /** Returns true if field timeLength is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeLength() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMELENGTH_ISSET_ID);
  }

  public void setTimeLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMELENGTH_ISSET_ID, value);
  }

  public String getClarity() {
    return this.clarity;
  }

  public PlayInfoRec setClarity(String clarity) {
    this.clarity = clarity;
    return this;
  }

  public void unsetClarity() {
    this.clarity = null;
  }

  /** Returns true if field clarity is set (has been assigned a value) and false otherwise */
  public boolean isSetClarity() {
    return this.clarity != null;
  }

  public void setClarityIsSet(boolean value) {
    if (!value) {
      this.clarity = null;
    }
  }

  public String getSubtitle() {
    return this.subtitle;
  }

  public PlayInfoRec setSubtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  public void unsetSubtitle() {
    this.subtitle = null;
  }

  /** Returns true if field subtitle is set (has been assigned a value) and false otherwise */
  public boolean isSetSubtitle() {
    return this.subtitle != null;
  }

  public void setSubtitleIsSet(boolean value) {
    if (!value) {
      this.subtitle = null;
    }
  }

  public short getByteRate() {
    return this.byteRate;
  }

  public PlayInfoRec setByteRate(short byteRate) {
    this.byteRate = byteRate;
    setByteRateIsSet(true);
    return this;
  }

  public void unsetByteRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTERATE_ISSET_ID);
  }

  /** Returns true if field byteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetByteRate() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTERATE_ISSET_ID);
  }

  public void setByteRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTERATE_ISSET_ID, value);
  }

  public String getDubOne() {
    return this.dubOne;
  }

  public PlayInfoRec setDubOne(String dubOne) {
    this.dubOne = dubOne;
    return this;
  }

  public void unsetDubOne() {
    this.dubOne = null;
  }

  /** Returns true if field dubOne is set (has been assigned a value) and false otherwise */
  public boolean isSetDubOne() {
    return this.dubOne != null;
  }

  public void setDubOneIsSet(boolean value) {
    if (!value) {
      this.dubOne = null;
    }
  }

  public String getDubTwo() {
    return this.dubTwo;
  }

  public PlayInfoRec setDubTwo(String dubTwo) {
    this.dubTwo = dubTwo;
    return this;
  }

  public void unsetDubTwo() {
    this.dubTwo = null;
  }

  /** Returns true if field dubTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetDubTwo() {
    return this.dubTwo != null;
  }

  public void setDubTwoIsSet(boolean value) {
    if (!value) {
      this.dubTwo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAY_INFO_ID:
      if (value == null) {
        unsetPlayInfoID();
      } else {
        setPlayInfoID((Integer)value);
      }
      break;

    case MEDIA_ID:
      if (value == null) {
        unsetMediaID();
      } else {
        setMediaID((Integer)value);
      }
      break;

    case SERIAL_ID:
      if (value == null) {
        unsetSerialID();
      } else {
        setSerialID((Integer)value);
      }
      break;

    case HASH_ID:
      if (value == null) {
        unsetHashID();
      } else {
        setHashID((String)value);
      }
      break;

    case C_ID:
      if (value == null) {
        unsetCID();
      } else {
        setCID((String)value);
      }
      break;

    case EDITOR_TASK_NAME:
      if (value == null) {
        unsetEditorTaskName();
      } else {
        setEditorTaskName((String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case LOCAL_FILE_PATH:
      if (value == null) {
        unsetLocalFilePath();
      } else {
        setLocalFilePath((String)value);
      }
      break;

    case TORRENT_FILES:
      if (value == null) {
        unsetTorrentFiles();
      } else {
        setTorrentFiles((String)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFileFormat();
      } else {
        setFileFormat((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Long)value);
      }
      break;

    case TIME_LENGTH:
      if (value == null) {
        unsetTimeLength();
      } else {
        setTimeLength((Integer)value);
      }
      break;

    case CLARITY:
      if (value == null) {
        unsetClarity();
      } else {
        setClarity((String)value);
      }
      break;

    case SUBTITLE:
      if (value == null) {
        unsetSubtitle();
      } else {
        setSubtitle((String)value);
      }
      break;

    case BYTE_RATE:
      if (value == null) {
        unsetByteRate();
      } else {
        setByteRate((Short)value);
      }
      break;

    case DUB_ONE:
      if (value == null) {
        unsetDubOne();
      } else {
        setDubOne((String)value);
      }
      break;

    case DUB_TWO:
      if (value == null) {
        unsetDubTwo();
      } else {
        setDubTwo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAY_INFO_ID:
      return Integer.valueOf(getPlayInfoID());

    case MEDIA_ID:
      return Integer.valueOf(getMediaID());

    case SERIAL_ID:
      return Integer.valueOf(getSerialID());

    case HASH_ID:
      return getHashID();

    case C_ID:
      return getCID();

    case EDITOR_TASK_NAME:
      return getEditorTaskName();

    case TASK_NAME:
      return getTaskName();

    case LOCAL_FILE_PATH:
      return getLocalFilePath();

    case TORRENT_FILES:
      return getTorrentFiles();

    case FILE_FORMAT:
      return getFileFormat();

    case FILE_SIZE:
      return Long.valueOf(getFileSize());

    case TIME_LENGTH:
      return Integer.valueOf(getTimeLength());

    case CLARITY:
      return getClarity();

    case SUBTITLE:
      return getSubtitle();

    case BYTE_RATE:
      return Short.valueOf(getByteRate());

    case DUB_ONE:
      return getDubOne();

    case DUB_TWO:
      return getDubTwo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAY_INFO_ID:
      return isSetPlayInfoID();
    case MEDIA_ID:
      return isSetMediaID();
    case SERIAL_ID:
      return isSetSerialID();
    case HASH_ID:
      return isSetHashID();
    case C_ID:
      return isSetCID();
    case EDITOR_TASK_NAME:
      return isSetEditorTaskName();
    case TASK_NAME:
      return isSetTaskName();
    case LOCAL_FILE_PATH:
      return isSetLocalFilePath();
    case TORRENT_FILES:
      return isSetTorrentFiles();
    case FILE_FORMAT:
      return isSetFileFormat();
    case FILE_SIZE:
      return isSetFileSize();
    case TIME_LENGTH:
      return isSetTimeLength();
    case CLARITY:
      return isSetClarity();
    case SUBTITLE:
      return isSetSubtitle();
    case BYTE_RATE:
      return isSetByteRate();
    case DUB_ONE:
      return isSetDubOne();
    case DUB_TWO:
      return isSetDubTwo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayInfoRec)
      return this.equals((PlayInfoRec)that);
    return false;
  }

  public boolean equals(PlayInfoRec that) {
    if (that == null)
      return false;

    boolean this_present_playInfoID = true;
    boolean that_present_playInfoID = true;
    if (this_present_playInfoID || that_present_playInfoID) {
      if (!(this_present_playInfoID && that_present_playInfoID))
        return false;
      if (this.playInfoID != that.playInfoID)
        return false;
    }

    boolean this_present_mediaID = true;
    boolean that_present_mediaID = true;
    if (this_present_mediaID || that_present_mediaID) {
      if (!(this_present_mediaID && that_present_mediaID))
        return false;
      if (this.mediaID != that.mediaID)
        return false;
    }

    boolean this_present_serialID = true;
    boolean that_present_serialID = true;
    if (this_present_serialID || that_present_serialID) {
      if (!(this_present_serialID && that_present_serialID))
        return false;
      if (this.serialID != that.serialID)
        return false;
    }

    boolean this_present_hashID = true && this.isSetHashID();
    boolean that_present_hashID = true && that.isSetHashID();
    if (this_present_hashID || that_present_hashID) {
      if (!(this_present_hashID && that_present_hashID))
        return false;
      if (!this.hashID.equals(that.hashID))
        return false;
    }

    boolean this_present_cID = true && this.isSetCID();
    boolean that_present_cID = true && that.isSetCID();
    if (this_present_cID || that_present_cID) {
      if (!(this_present_cID && that_present_cID))
        return false;
      if (!this.cID.equals(that.cID))
        return false;
    }

    boolean this_present_editorTaskName = true && this.isSetEditorTaskName();
    boolean that_present_editorTaskName = true && that.isSetEditorTaskName();
    if (this_present_editorTaskName || that_present_editorTaskName) {
      if (!(this_present_editorTaskName && that_present_editorTaskName))
        return false;
      if (!this.editorTaskName.equals(that.editorTaskName))
        return false;
    }

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_localFilePath = true && this.isSetLocalFilePath();
    boolean that_present_localFilePath = true && that.isSetLocalFilePath();
    if (this_present_localFilePath || that_present_localFilePath) {
      if (!(this_present_localFilePath && that_present_localFilePath))
        return false;
      if (!this.localFilePath.equals(that.localFilePath))
        return false;
    }

    boolean this_present_torrentFiles = true && this.isSetTorrentFiles();
    boolean that_present_torrentFiles = true && that.isSetTorrentFiles();
    if (this_present_torrentFiles || that_present_torrentFiles) {
      if (!(this_present_torrentFiles && that_present_torrentFiles))
        return false;
      if (!this.torrentFiles.equals(that.torrentFiles))
        return false;
    }

    boolean this_present_fileFormat = true && this.isSetFileFormat();
    boolean that_present_fileFormat = true && that.isSetFileFormat();
    if (this_present_fileFormat || that_present_fileFormat) {
      if (!(this_present_fileFormat && that_present_fileFormat))
        return false;
      if (!this.fileFormat.equals(that.fileFormat))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_timeLength = true;
    boolean that_present_timeLength = true;
    if (this_present_timeLength || that_present_timeLength) {
      if (!(this_present_timeLength && that_present_timeLength))
        return false;
      if (this.timeLength != that.timeLength)
        return false;
    }

    boolean this_present_clarity = true && this.isSetClarity();
    boolean that_present_clarity = true && that.isSetClarity();
    if (this_present_clarity || that_present_clarity) {
      if (!(this_present_clarity && that_present_clarity))
        return false;
      if (!this.clarity.equals(that.clarity))
        return false;
    }

    boolean this_present_subtitle = true && this.isSetSubtitle();
    boolean that_present_subtitle = true && that.isSetSubtitle();
    if (this_present_subtitle || that_present_subtitle) {
      if (!(this_present_subtitle && that_present_subtitle))
        return false;
      if (!this.subtitle.equals(that.subtitle))
        return false;
    }

    boolean this_present_byteRate = true;
    boolean that_present_byteRate = true;
    if (this_present_byteRate || that_present_byteRate) {
      if (!(this_present_byteRate && that_present_byteRate))
        return false;
      if (this.byteRate != that.byteRate)
        return false;
    }

    boolean this_present_dubOne = true && this.isSetDubOne();
    boolean that_present_dubOne = true && that.isSetDubOne();
    if (this_present_dubOne || that_present_dubOne) {
      if (!(this_present_dubOne && that_present_dubOne))
        return false;
      if (!this.dubOne.equals(that.dubOne))
        return false;
    }

    boolean this_present_dubTwo = true && this.isSetDubTwo();
    boolean that_present_dubTwo = true && that.isSetDubTwo();
    if (this_present_dubTwo || that_present_dubTwo) {
      if (!(this_present_dubTwo && that_present_dubTwo))
        return false;
      if (!this.dubTwo.equals(that.dubTwo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PlayInfoRec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PlayInfoRec typedOther = (PlayInfoRec)other;

    lastComparison = Boolean.valueOf(isSetPlayInfoID()).compareTo(typedOther.isSetPlayInfoID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayInfoID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playInfoID, typedOther.playInfoID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaID()).compareTo(typedOther.isSetMediaID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaID, typedOther.mediaID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialID()).compareTo(typedOther.isSetSerialID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialID, typedOther.serialID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashID()).compareTo(typedOther.isSetHashID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashID, typedOther.hashID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCID()).compareTo(typedOther.isSetCID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cID, typedOther.cID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEditorTaskName()).compareTo(typedOther.isSetEditorTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEditorTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.editorTaskName, typedOther.editorTaskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskName()).compareTo(typedOther.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, typedOther.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalFilePath()).compareTo(typedOther.isSetLocalFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localFilePath, typedOther.localFilePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTorrentFiles()).compareTo(typedOther.isSetTorrentFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTorrentFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.torrentFiles, typedOther.torrentFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileFormat()).compareTo(typedOther.isSetFileFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileFormat, typedOther.fileFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(typedOther.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, typedOther.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeLength()).compareTo(typedOther.isSetTimeLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeLength, typedOther.timeLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClarity()).compareTo(typedOther.isSetClarity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClarity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clarity, typedOther.clarity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubtitle()).compareTo(typedOther.isSetSubtitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubtitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subtitle, typedOther.subtitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteRate()).compareTo(typedOther.isSetByteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteRate, typedOther.byteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDubOne()).compareTo(typedOther.isSetDubOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDubOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dubOne, typedOther.dubOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDubTwo()).compareTo(typedOther.isSetDubTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDubTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dubTwo, typedOther.dubTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayInfoRec(");
    boolean first = true;

    sb.append("playInfoID:");
    sb.append(this.playInfoID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaID:");
    sb.append(this.mediaID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialID:");
    sb.append(this.serialID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashID:");
    if (this.hashID == null) {
      sb.append("null");
    } else {
      sb.append(this.hashID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cID:");
    if (this.cID == null) {
      sb.append("null");
    } else {
      sb.append(this.cID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("editorTaskName:");
    if (this.editorTaskName == null) {
      sb.append("null");
    } else {
      sb.append(this.editorTaskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localFilePath:");
    if (this.localFilePath == null) {
      sb.append("null");
    } else {
      sb.append(this.localFilePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("torrentFiles:");
    if (this.torrentFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.torrentFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileFormat:");
    if (this.fileFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.fileFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeLength:");
    sb.append(this.timeLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clarity:");
    if (this.clarity == null) {
      sb.append("null");
    } else {
      sb.append(this.clarity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subtitle:");
    if (this.subtitle == null) {
      sb.append("null");
    } else {
      sb.append(this.subtitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteRate:");
    sb.append(this.byteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dubOne:");
    if (this.dubOne == null) {
      sb.append("null");
    } else {
      sb.append(this.dubOne);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dubTwo:");
    if (this.dubTwo == null) {
      sb.append("null");
    } else {
      sb.append(this.dubTwo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayInfoRecStandardSchemeFactory implements SchemeFactory {
    public PlayInfoRecStandardScheme getScheme() {
      return new PlayInfoRecStandardScheme();
    }
  }

  private static class PlayInfoRecStandardScheme extends StandardScheme<PlayInfoRec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayInfoRec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAY_INFO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playInfoID = iprot.readI32();
              struct.setPlayInfoIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaID = iprot.readI32();
              struct.setMediaIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERIAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serialID = iprot.readI32();
              struct.setSerialIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HASH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hashID = iprot.readString();
              struct.setHashIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // C_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cID = iprot.readString();
              struct.setCIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EDITOR_TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.editorTaskName = iprot.readString();
              struct.setEditorTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOCAL_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localFilePath = iprot.readString();
              struct.setLocalFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TORRENT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.torrentFiles = iprot.readString();
              struct.setTorrentFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileFormat = iprot.readString();
              struct.setFileFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TIME_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeLength = iprot.readI32();
              struct.setTimeLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clarity = iprot.readString();
              struct.setClarityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SUBTITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subtitle = iprot.readString();
              struct.setSubtitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BYTE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.byteRate = iprot.readI16();
              struct.setByteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DUB_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dubOne = iprot.readString();
              struct.setDubOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DUB_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dubTwo = iprot.readString();
              struct.setDubTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayInfoRec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PLAY_INFO_ID_FIELD_DESC);
      oprot.writeI32(struct.playInfoID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERIAL_ID_FIELD_DESC);
      oprot.writeI32(struct.serialID);
      oprot.writeFieldEnd();
      if (struct.hashID != null) {
        oprot.writeFieldBegin(HASH_ID_FIELD_DESC);
        oprot.writeString(struct.hashID);
        oprot.writeFieldEnd();
      }
      if (struct.cID != null) {
        oprot.writeFieldBegin(C_ID_FIELD_DESC);
        oprot.writeString(struct.cID);
        oprot.writeFieldEnd();
      }
      if (struct.editorTaskName != null) {
        oprot.writeFieldBegin(EDITOR_TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.editorTaskName);
        oprot.writeFieldEnd();
      }
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      if (struct.localFilePath != null) {
        oprot.writeFieldBegin(LOCAL_FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.localFilePath);
        oprot.writeFieldEnd();
      }
      if (struct.torrentFiles != null) {
        oprot.writeFieldBegin(TORRENT_FILES_FIELD_DESC);
        oprot.writeString(struct.torrentFiles);
        oprot.writeFieldEnd();
      }
      if (struct.fileFormat != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeString(struct.fileFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fileSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.timeLength);
      oprot.writeFieldEnd();
      if (struct.clarity != null) {
        oprot.writeFieldBegin(CLARITY_FIELD_DESC);
        oprot.writeString(struct.clarity);
        oprot.writeFieldEnd();
      }
      if (struct.subtitle != null) {
        oprot.writeFieldBegin(SUBTITLE_FIELD_DESC);
        oprot.writeString(struct.subtitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BYTE_RATE_FIELD_DESC);
      oprot.writeI16(struct.byteRate);
      oprot.writeFieldEnd();
      if (struct.dubOne != null) {
        oprot.writeFieldBegin(DUB_ONE_FIELD_DESC);
        oprot.writeString(struct.dubOne);
        oprot.writeFieldEnd();
      }
      if (struct.dubTwo != null) {
        oprot.writeFieldBegin(DUB_TWO_FIELD_DESC);
        oprot.writeString(struct.dubTwo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayInfoRecTupleSchemeFactory implements SchemeFactory {
    public PlayInfoRecTupleScheme getScheme() {
      return new PlayInfoRecTupleScheme();
    }
  }

  private static class PlayInfoRecTupleScheme extends TupleScheme<PlayInfoRec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayInfoRec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayInfoID()) {
        optionals.set(0);
      }
      if (struct.isSetMediaID()) {
        optionals.set(1);
      }
      if (struct.isSetSerialID()) {
        optionals.set(2);
      }
      if (struct.isSetHashID()) {
        optionals.set(3);
      }
      if (struct.isSetCID()) {
        optionals.set(4);
      }
      if (struct.isSetEditorTaskName()) {
        optionals.set(5);
      }
      if (struct.isSetTaskName()) {
        optionals.set(6);
      }
      if (struct.isSetLocalFilePath()) {
        optionals.set(7);
      }
      if (struct.isSetTorrentFiles()) {
        optionals.set(8);
      }
      if (struct.isSetFileFormat()) {
        optionals.set(9);
      }
      if (struct.isSetFileSize()) {
        optionals.set(10);
      }
      if (struct.isSetTimeLength()) {
        optionals.set(11);
      }
      if (struct.isSetClarity()) {
        optionals.set(12);
      }
      if (struct.isSetSubtitle()) {
        optionals.set(13);
      }
      if (struct.isSetByteRate()) {
        optionals.set(14);
      }
      if (struct.isSetDubOne()) {
        optionals.set(15);
      }
      if (struct.isSetDubTwo()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPlayInfoID()) {
        oprot.writeI32(struct.playInfoID);
      }
      if (struct.isSetMediaID()) {
        oprot.writeI32(struct.mediaID);
      }
      if (struct.isSetSerialID()) {
        oprot.writeI32(struct.serialID);
      }
      if (struct.isSetHashID()) {
        oprot.writeString(struct.hashID);
      }
      if (struct.isSetCID()) {
        oprot.writeString(struct.cID);
      }
      if (struct.isSetEditorTaskName()) {
        oprot.writeString(struct.editorTaskName);
      }
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetLocalFilePath()) {
        oprot.writeString(struct.localFilePath);
      }
      if (struct.isSetTorrentFiles()) {
        oprot.writeString(struct.torrentFiles);
      }
      if (struct.isSetFileFormat()) {
        oprot.writeString(struct.fileFormat);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.fileSize);
      }
      if (struct.isSetTimeLength()) {
        oprot.writeI32(struct.timeLength);
      }
      if (struct.isSetClarity()) {
        oprot.writeString(struct.clarity);
      }
      if (struct.isSetSubtitle()) {
        oprot.writeString(struct.subtitle);
      }
      if (struct.isSetByteRate()) {
        oprot.writeI16(struct.byteRate);
      }
      if (struct.isSetDubOne()) {
        oprot.writeString(struct.dubOne);
      }
      if (struct.isSetDubTwo()) {
        oprot.writeString(struct.dubTwo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayInfoRec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.playInfoID = iprot.readI32();
        struct.setPlayInfoIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mediaID = iprot.readI32();
        struct.setMediaIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serialID = iprot.readI32();
        struct.setSerialIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hashID = iprot.readString();
        struct.setHashIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cID = iprot.readString();
        struct.setCIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.editorTaskName = iprot.readString();
        struct.setEditorTaskNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.localFilePath = iprot.readString();
        struct.setLocalFilePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.torrentFiles = iprot.readString();
        struct.setTorrentFilesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fileFormat = iprot.readString();
        struct.setFileFormatIsSet(true);
      }
      if (incoming.get(10)) {
        struct.fileSize = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timeLength = iprot.readI32();
        struct.setTimeLengthIsSet(true);
      }
      if (incoming.get(12)) {
        struct.clarity = iprot.readString();
        struct.setClarityIsSet(true);
      }
      if (incoming.get(13)) {
        struct.subtitle = iprot.readString();
        struct.setSubtitleIsSet(true);
      }
      if (incoming.get(14)) {
        struct.byteRate = iprot.readI16();
        struct.setByteRateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.dubOne = iprot.readString();
        struct.setDubOneIsSet(true);
      }
      if (incoming.get(16)) {
        struct.dubTwo = iprot.readString();
        struct.setDubTwoIsSet(true);
      }
    }
  }

}

