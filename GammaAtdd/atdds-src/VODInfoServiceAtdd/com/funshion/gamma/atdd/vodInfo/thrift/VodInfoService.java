/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.gamma.atdd.vodInfo.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VodInfoService {

  public interface Iface {

    public PlayInfoList getInfoByPlayIDList(List<Integer> playIDs) throws org.apache.thrift.TException;

    public PlayInfoList getInfoByHashIDList(List<String> hashIDs) throws org.apache.thrift.TException;

    public PlayInfoList getInfoByMediaID(int mediaID) throws org.apache.thrift.TException;

    public SerialInfo getSerialInfoByMediaID(int mediaID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getInfoByPlayIDList(List<Integer> playIDs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInfoByPlayIDList_call> resultHandler) throws org.apache.thrift.TException;

    public void getInfoByHashIDList(List<String> hashIDs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInfoByHashIDList_call> resultHandler) throws org.apache.thrift.TException;

    public void getInfoByMediaID(int mediaID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInfoByMediaID_call> resultHandler) throws org.apache.thrift.TException;

    public void getSerialInfoByMediaID(int mediaID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSerialInfoByMediaID_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PlayInfoList getInfoByPlayIDList(List<Integer> playIDs) throws org.apache.thrift.TException
    {
      send_getInfoByPlayIDList(playIDs);
      return recv_getInfoByPlayIDList();
    }

    public void send_getInfoByPlayIDList(List<Integer> playIDs) throws org.apache.thrift.TException
    {
      getInfoByPlayIDList_args args = new getInfoByPlayIDList_args();
      args.setPlayIDs(playIDs);
      sendBase("getInfoByPlayIDList", args);
    }

    public PlayInfoList recv_getInfoByPlayIDList() throws org.apache.thrift.TException
    {
      getInfoByPlayIDList_result result = new getInfoByPlayIDList_result();
      receiveBase(result, "getInfoByPlayIDList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfoByPlayIDList failed: unknown result");
    }

    public PlayInfoList getInfoByHashIDList(List<String> hashIDs) throws org.apache.thrift.TException
    {
      send_getInfoByHashIDList(hashIDs);
      return recv_getInfoByHashIDList();
    }

    public void send_getInfoByHashIDList(List<String> hashIDs) throws org.apache.thrift.TException
    {
      getInfoByHashIDList_args args = new getInfoByHashIDList_args();
      args.setHashIDs(hashIDs);
      sendBase("getInfoByHashIDList", args);
    }

    public PlayInfoList recv_getInfoByHashIDList() throws org.apache.thrift.TException
    {
      getInfoByHashIDList_result result = new getInfoByHashIDList_result();
      receiveBase(result, "getInfoByHashIDList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfoByHashIDList failed: unknown result");
    }

    public PlayInfoList getInfoByMediaID(int mediaID) throws org.apache.thrift.TException
    {
      send_getInfoByMediaID(mediaID);
      return recv_getInfoByMediaID();
    }

    public void send_getInfoByMediaID(int mediaID) throws org.apache.thrift.TException
    {
      getInfoByMediaID_args args = new getInfoByMediaID_args();
      args.setMediaID(mediaID);
      sendBase("getInfoByMediaID", args);
    }

    public PlayInfoList recv_getInfoByMediaID() throws org.apache.thrift.TException
    {
      getInfoByMediaID_result result = new getInfoByMediaID_result();
      receiveBase(result, "getInfoByMediaID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfoByMediaID failed: unknown result");
    }

    public SerialInfo getSerialInfoByMediaID(int mediaID) throws org.apache.thrift.TException
    {
      send_getSerialInfoByMediaID(mediaID);
      return recv_getSerialInfoByMediaID();
    }

    public void send_getSerialInfoByMediaID(int mediaID) throws org.apache.thrift.TException
    {
      getSerialInfoByMediaID_args args = new getSerialInfoByMediaID_args();
      args.setMediaID(mediaID);
      sendBase("getSerialInfoByMediaID", args);
    }

    public SerialInfo recv_getSerialInfoByMediaID() throws org.apache.thrift.TException
    {
      getSerialInfoByMediaID_result result = new getSerialInfoByMediaID_result();
      receiveBase(result, "getSerialInfoByMediaID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSerialInfoByMediaID failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getInfoByPlayIDList(List<Integer> playIDs, org.apache.thrift.async.AsyncMethodCallback<getInfoByPlayIDList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInfoByPlayIDList_call method_call = new getInfoByPlayIDList_call(playIDs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInfoByPlayIDList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> playIDs;
      public getInfoByPlayIDList_call(List<Integer> playIDs, org.apache.thrift.async.AsyncMethodCallback<getInfoByPlayIDList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.playIDs = playIDs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfoByPlayIDList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInfoByPlayIDList_args args = new getInfoByPlayIDList_args();
        args.setPlayIDs(playIDs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PlayInfoList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInfoByPlayIDList();
      }
    }

    public void getInfoByHashIDList(List<String> hashIDs, org.apache.thrift.async.AsyncMethodCallback<getInfoByHashIDList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInfoByHashIDList_call method_call = new getInfoByHashIDList_call(hashIDs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInfoByHashIDList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> hashIDs;
      public getInfoByHashIDList_call(List<String> hashIDs, org.apache.thrift.async.AsyncMethodCallback<getInfoByHashIDList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hashIDs = hashIDs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfoByHashIDList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInfoByHashIDList_args args = new getInfoByHashIDList_args();
        args.setHashIDs(hashIDs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PlayInfoList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInfoByHashIDList();
      }
    }

    public void getInfoByMediaID(int mediaID, org.apache.thrift.async.AsyncMethodCallback<getInfoByMediaID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInfoByMediaID_call method_call = new getInfoByMediaID_call(mediaID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInfoByMediaID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int mediaID;
      public getInfoByMediaID_call(int mediaID, org.apache.thrift.async.AsyncMethodCallback<getInfoByMediaID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mediaID = mediaID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfoByMediaID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInfoByMediaID_args args = new getInfoByMediaID_args();
        args.setMediaID(mediaID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PlayInfoList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInfoByMediaID();
      }
    }

    public void getSerialInfoByMediaID(int mediaID, org.apache.thrift.async.AsyncMethodCallback<getSerialInfoByMediaID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSerialInfoByMediaID_call method_call = new getSerialInfoByMediaID_call(mediaID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSerialInfoByMediaID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int mediaID;
      public getSerialInfoByMediaID_call(int mediaID, org.apache.thrift.async.AsyncMethodCallback<getSerialInfoByMediaID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mediaID = mediaID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSerialInfoByMediaID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSerialInfoByMediaID_args args = new getSerialInfoByMediaID_args();
        args.setMediaID(mediaID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SerialInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSerialInfoByMediaID();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getInfoByPlayIDList", new getInfoByPlayIDList());
      processMap.put("getInfoByHashIDList", new getInfoByHashIDList());
      processMap.put("getInfoByMediaID", new getInfoByMediaID());
      processMap.put("getSerialInfoByMediaID", new getSerialInfoByMediaID());
      return processMap;
    }

    public static class getInfoByPlayIDList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoByPlayIDList_args> {
      public getInfoByPlayIDList() {
        super("getInfoByPlayIDList");
      }

      public getInfoByPlayIDList_args getEmptyArgsInstance() {
        return new getInfoByPlayIDList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInfoByPlayIDList_result getResult(I iface, getInfoByPlayIDList_args args) throws org.apache.thrift.TException {
        getInfoByPlayIDList_result result = new getInfoByPlayIDList_result();
        result.success = iface.getInfoByPlayIDList(args.playIDs);
        return result;
      }
    }

    public static class getInfoByHashIDList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoByHashIDList_args> {
      public getInfoByHashIDList() {
        super("getInfoByHashIDList");
      }

      public getInfoByHashIDList_args getEmptyArgsInstance() {
        return new getInfoByHashIDList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInfoByHashIDList_result getResult(I iface, getInfoByHashIDList_args args) throws org.apache.thrift.TException {
        getInfoByHashIDList_result result = new getInfoByHashIDList_result();
        result.success = iface.getInfoByHashIDList(args.hashIDs);
        return result;
      }
    }

    public static class getInfoByMediaID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoByMediaID_args> {
      public getInfoByMediaID() {
        super("getInfoByMediaID");
      }

      public getInfoByMediaID_args getEmptyArgsInstance() {
        return new getInfoByMediaID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInfoByMediaID_result getResult(I iface, getInfoByMediaID_args args) throws org.apache.thrift.TException {
        getInfoByMediaID_result result = new getInfoByMediaID_result();
        result.success = iface.getInfoByMediaID(args.mediaID);
        return result;
      }
    }

    public static class getSerialInfoByMediaID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSerialInfoByMediaID_args> {
      public getSerialInfoByMediaID() {
        super("getSerialInfoByMediaID");
      }

      public getSerialInfoByMediaID_args getEmptyArgsInstance() {
        return new getSerialInfoByMediaID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSerialInfoByMediaID_result getResult(I iface, getSerialInfoByMediaID_args args) throws org.apache.thrift.TException {
        getSerialInfoByMediaID_result result = new getSerialInfoByMediaID_result();
        result.success = iface.getSerialInfoByMediaID(args.mediaID);
        return result;
      }
    }

  }

  public static class getInfoByPlayIDList_args implements org.apache.thrift.TBase<getInfoByPlayIDList_args, getInfoByPlayIDList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByPlayIDList_args");

    private static final org.apache.thrift.protocol.TField PLAY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("playIDs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfoByPlayIDList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfoByPlayIDList_argsTupleSchemeFactory());
    }

    public List<Integer> playIDs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLAY_IDS((short)1, "playIDs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLAY_IDS
            return PLAY_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLAY_IDS, new org.apache.thrift.meta_data.FieldMetaData("playIDs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByPlayIDList_args.class, metaDataMap);
    }

    public getInfoByPlayIDList_args() {
    }

    public getInfoByPlayIDList_args(
      List<Integer> playIDs)
    {
      this();
      this.playIDs = playIDs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByPlayIDList_args(getInfoByPlayIDList_args other) {
      if (other.isSetPlayIDs()) {
        List<Integer> __this__playIDs = new ArrayList<Integer>();
        for (Integer other_element : other.playIDs) {
          __this__playIDs.add(other_element);
        }
        this.playIDs = __this__playIDs;
      }
    }

    public getInfoByPlayIDList_args deepCopy() {
      return new getInfoByPlayIDList_args(this);
    }

    @Override
    public void clear() {
      this.playIDs = null;
    }

    public int getPlayIDsSize() {
      return (this.playIDs == null) ? 0 : this.playIDs.size();
    }

    public java.util.Iterator<Integer> getPlayIDsIterator() {
      return (this.playIDs == null) ? null : this.playIDs.iterator();
    }

    public void addToPlayIDs(int elem) {
      if (this.playIDs == null) {
        this.playIDs = new ArrayList<Integer>();
      }
      this.playIDs.add(elem);
    }

    public List<Integer> getPlayIDs() {
      return this.playIDs;
    }

    public getInfoByPlayIDList_args setPlayIDs(List<Integer> playIDs) {
      this.playIDs = playIDs;
      return this;
    }

    public void unsetPlayIDs() {
      this.playIDs = null;
    }

    /** Returns true if field playIDs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayIDs() {
      return this.playIDs != null;
    }

    public void setPlayIDsIsSet(boolean value) {
      if (!value) {
        this.playIDs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLAY_IDS:
        if (value == null) {
          unsetPlayIDs();
        } else {
          setPlayIDs((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLAY_IDS:
        return getPlayIDs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLAY_IDS:
        return isSetPlayIDs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByPlayIDList_args)
        return this.equals((getInfoByPlayIDList_args)that);
      return false;
    }

    public boolean equals(getInfoByPlayIDList_args that) {
      if (that == null)
        return false;

      boolean this_present_playIDs = true && this.isSetPlayIDs();
      boolean that_present_playIDs = true && that.isSetPlayIDs();
      if (this_present_playIDs || that_present_playIDs) {
        if (!(this_present_playIDs && that_present_playIDs))
          return false;
        if (!this.playIDs.equals(that.playIDs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfoByPlayIDList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfoByPlayIDList_args typedOther = (getInfoByPlayIDList_args)other;

      lastComparison = Boolean.valueOf(isSetPlayIDs()).compareTo(typedOther.isSetPlayIDs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlayIDs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playIDs, typedOther.playIDs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoByPlayIDList_args(");
      boolean first = true;

      sb.append("playIDs:");
      if (this.playIDs == null) {
        sb.append("null");
      } else {
        sb.append(this.playIDs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByPlayIDList_argsStandardSchemeFactory implements SchemeFactory {
      public getInfoByPlayIDList_argsStandardScheme getScheme() {
        return new getInfoByPlayIDList_argsStandardScheme();
      }
    }

    private static class getInfoByPlayIDList_argsStandardScheme extends StandardScheme<getInfoByPlayIDList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByPlayIDList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLAY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.playIDs = new ArrayList<Integer>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    int _elem18; // required
                    _elem18 = iprot.readI32();
                    struct.playIDs.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setPlayIDsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByPlayIDList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.playIDs != null) {
          oprot.writeFieldBegin(PLAY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.playIDs.size()));
            for (int _iter19 : struct.playIDs)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByPlayIDList_argsTupleSchemeFactory implements SchemeFactory {
      public getInfoByPlayIDList_argsTupleScheme getScheme() {
        return new getInfoByPlayIDList_argsTupleScheme();
      }
    }

    private static class getInfoByPlayIDList_argsTupleScheme extends TupleScheme<getInfoByPlayIDList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByPlayIDList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlayIDs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlayIDs()) {
          {
            oprot.writeI32(struct.playIDs.size());
            for (int _iter20 : struct.playIDs)
            {
              oprot.writeI32(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByPlayIDList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.playIDs = new ArrayList<Integer>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              int _elem23; // required
              _elem23 = iprot.readI32();
              struct.playIDs.add(_elem23);
            }
          }
          struct.setPlayIDsIsSet(true);
        }
      }
    }

  }

  public static class getInfoByPlayIDList_result implements org.apache.thrift.TBase<getInfoByPlayIDList_result, getInfoByPlayIDList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByPlayIDList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfoByPlayIDList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfoByPlayIDList_resultTupleSchemeFactory());
    }

    public PlayInfoList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayInfoList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByPlayIDList_result.class, metaDataMap);
    }

    public getInfoByPlayIDList_result() {
    }

    public getInfoByPlayIDList_result(
      PlayInfoList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByPlayIDList_result(getInfoByPlayIDList_result other) {
      if (other.isSetSuccess()) {
        this.success = new PlayInfoList(other.success);
      }
    }

    public getInfoByPlayIDList_result deepCopy() {
      return new getInfoByPlayIDList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PlayInfoList getSuccess() {
      return this.success;
    }

    public getInfoByPlayIDList_result setSuccess(PlayInfoList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PlayInfoList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByPlayIDList_result)
        return this.equals((getInfoByPlayIDList_result)that);
      return false;
    }

    public boolean equals(getInfoByPlayIDList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfoByPlayIDList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfoByPlayIDList_result typedOther = (getInfoByPlayIDList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoByPlayIDList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByPlayIDList_resultStandardSchemeFactory implements SchemeFactory {
      public getInfoByPlayIDList_resultStandardScheme getScheme() {
        return new getInfoByPlayIDList_resultStandardScheme();
      }
    }

    private static class getInfoByPlayIDList_resultStandardScheme extends StandardScheme<getInfoByPlayIDList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByPlayIDList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PlayInfoList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByPlayIDList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByPlayIDList_resultTupleSchemeFactory implements SchemeFactory {
      public getInfoByPlayIDList_resultTupleScheme getScheme() {
        return new getInfoByPlayIDList_resultTupleScheme();
      }
    }

    private static class getInfoByPlayIDList_resultTupleScheme extends TupleScheme<getInfoByPlayIDList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByPlayIDList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByPlayIDList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PlayInfoList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInfoByHashIDList_args implements org.apache.thrift.TBase<getInfoByHashIDList_args, getInfoByHashIDList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByHashIDList_args");

    private static final org.apache.thrift.protocol.TField HASH_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("hashIDs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfoByHashIDList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfoByHashIDList_argsTupleSchemeFactory());
    }

    public List<String> hashIDs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASH_IDS((short)1, "hashIDs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASH_IDS
            return HASH_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASH_IDS, new org.apache.thrift.meta_data.FieldMetaData("hashIDs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByHashIDList_args.class, metaDataMap);
    }

    public getInfoByHashIDList_args() {
    }

    public getInfoByHashIDList_args(
      List<String> hashIDs)
    {
      this();
      this.hashIDs = hashIDs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByHashIDList_args(getInfoByHashIDList_args other) {
      if (other.isSetHashIDs()) {
        List<String> __this__hashIDs = new ArrayList<String>();
        for (String other_element : other.hashIDs) {
          __this__hashIDs.add(other_element);
        }
        this.hashIDs = __this__hashIDs;
      }
    }

    public getInfoByHashIDList_args deepCopy() {
      return new getInfoByHashIDList_args(this);
    }

    @Override
    public void clear() {
      this.hashIDs = null;
    }

    public int getHashIDsSize() {
      return (this.hashIDs == null) ? 0 : this.hashIDs.size();
    }

    public java.util.Iterator<String> getHashIDsIterator() {
      return (this.hashIDs == null) ? null : this.hashIDs.iterator();
    }

    public void addToHashIDs(String elem) {
      if (this.hashIDs == null) {
        this.hashIDs = new ArrayList<String>();
      }
      this.hashIDs.add(elem);
    }

    public List<String> getHashIDs() {
      return this.hashIDs;
    }

    public getInfoByHashIDList_args setHashIDs(List<String> hashIDs) {
      this.hashIDs = hashIDs;
      return this;
    }

    public void unsetHashIDs() {
      this.hashIDs = null;
    }

    /** Returns true if field hashIDs is set (has been assigned a value) and false otherwise */
    public boolean isSetHashIDs() {
      return this.hashIDs != null;
    }

    public void setHashIDsIsSet(boolean value) {
      if (!value) {
        this.hashIDs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HASH_IDS:
        if (value == null) {
          unsetHashIDs();
        } else {
          setHashIDs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HASH_IDS:
        return getHashIDs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HASH_IDS:
        return isSetHashIDs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByHashIDList_args)
        return this.equals((getInfoByHashIDList_args)that);
      return false;
    }

    public boolean equals(getInfoByHashIDList_args that) {
      if (that == null)
        return false;

      boolean this_present_hashIDs = true && this.isSetHashIDs();
      boolean that_present_hashIDs = true && that.isSetHashIDs();
      if (this_present_hashIDs || that_present_hashIDs) {
        if (!(this_present_hashIDs && that_present_hashIDs))
          return false;
        if (!this.hashIDs.equals(that.hashIDs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfoByHashIDList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfoByHashIDList_args typedOther = (getInfoByHashIDList_args)other;

      lastComparison = Boolean.valueOf(isSetHashIDs()).compareTo(typedOther.isSetHashIDs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashIDs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashIDs, typedOther.hashIDs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoByHashIDList_args(");
      boolean first = true;

      sb.append("hashIDs:");
      if (this.hashIDs == null) {
        sb.append("null");
      } else {
        sb.append(this.hashIDs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByHashIDList_argsStandardSchemeFactory implements SchemeFactory {
      public getInfoByHashIDList_argsStandardScheme getScheme() {
        return new getInfoByHashIDList_argsStandardScheme();
      }
    }

    private static class getInfoByHashIDList_argsStandardScheme extends StandardScheme<getInfoByHashIDList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByHashIDList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASH_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.hashIDs = new ArrayList<String>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    String _elem26; // required
                    _elem26 = iprot.readString();
                    struct.hashIDs.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setHashIDsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByHashIDList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hashIDs != null) {
          oprot.writeFieldBegin(HASH_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hashIDs.size()));
            for (String _iter27 : struct.hashIDs)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByHashIDList_argsTupleSchemeFactory implements SchemeFactory {
      public getInfoByHashIDList_argsTupleScheme getScheme() {
        return new getInfoByHashIDList_argsTupleScheme();
      }
    }

    private static class getInfoByHashIDList_argsTupleScheme extends TupleScheme<getInfoByHashIDList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByHashIDList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHashIDs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHashIDs()) {
          {
            oprot.writeI32(struct.hashIDs.size());
            for (String _iter28 : struct.hashIDs)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByHashIDList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.hashIDs = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              String _elem31; // required
              _elem31 = iprot.readString();
              struct.hashIDs.add(_elem31);
            }
          }
          struct.setHashIDsIsSet(true);
        }
      }
    }

  }

  public static class getInfoByHashIDList_result implements org.apache.thrift.TBase<getInfoByHashIDList_result, getInfoByHashIDList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByHashIDList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfoByHashIDList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfoByHashIDList_resultTupleSchemeFactory());
    }

    public PlayInfoList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayInfoList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByHashIDList_result.class, metaDataMap);
    }

    public getInfoByHashIDList_result() {
    }

    public getInfoByHashIDList_result(
      PlayInfoList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByHashIDList_result(getInfoByHashIDList_result other) {
      if (other.isSetSuccess()) {
        this.success = new PlayInfoList(other.success);
      }
    }

    public getInfoByHashIDList_result deepCopy() {
      return new getInfoByHashIDList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PlayInfoList getSuccess() {
      return this.success;
    }

    public getInfoByHashIDList_result setSuccess(PlayInfoList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PlayInfoList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByHashIDList_result)
        return this.equals((getInfoByHashIDList_result)that);
      return false;
    }

    public boolean equals(getInfoByHashIDList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfoByHashIDList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfoByHashIDList_result typedOther = (getInfoByHashIDList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoByHashIDList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByHashIDList_resultStandardSchemeFactory implements SchemeFactory {
      public getInfoByHashIDList_resultStandardScheme getScheme() {
        return new getInfoByHashIDList_resultStandardScheme();
      }
    }

    private static class getInfoByHashIDList_resultStandardScheme extends StandardScheme<getInfoByHashIDList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByHashIDList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PlayInfoList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByHashIDList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByHashIDList_resultTupleSchemeFactory implements SchemeFactory {
      public getInfoByHashIDList_resultTupleScheme getScheme() {
        return new getInfoByHashIDList_resultTupleScheme();
      }
    }

    private static class getInfoByHashIDList_resultTupleScheme extends TupleScheme<getInfoByHashIDList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByHashIDList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByHashIDList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PlayInfoList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInfoByMediaID_args implements org.apache.thrift.TBase<getInfoByMediaID_args, getInfoByMediaID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByMediaID_args");

    private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfoByMediaID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfoByMediaID_argsTupleSchemeFactory());
    }

    public int mediaID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEDIA_ID((short)1, "mediaID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEDIA_ID
            return MEDIA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEDIAID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByMediaID_args.class, metaDataMap);
    }

    public getInfoByMediaID_args() {
    }

    public getInfoByMediaID_args(
      int mediaID)
    {
      this();
      this.mediaID = mediaID;
      setMediaIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByMediaID_args(getInfoByMediaID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mediaID = other.mediaID;
    }

    public getInfoByMediaID_args deepCopy() {
      return new getInfoByMediaID_args(this);
    }

    @Override
    public void clear() {
      setMediaIDIsSet(false);
      this.mediaID = 0;
    }

    public int getMediaID() {
      return this.mediaID;
    }

    public getInfoByMediaID_args setMediaID(int mediaID) {
      this.mediaID = mediaID;
      setMediaIDIsSet(true);
      return this;
    }

    public void unsetMediaID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAID_ISSET_ID);
    }

    /** Returns true if field mediaID is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaID() {
      return EncodingUtils.testBit(__isset_bitfield, __MEDIAID_ISSET_ID);
    }

    public void setMediaIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEDIA_ID:
        if (value == null) {
          unsetMediaID();
        } else {
          setMediaID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEDIA_ID:
        return Integer.valueOf(getMediaID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEDIA_ID:
        return isSetMediaID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByMediaID_args)
        return this.equals((getInfoByMediaID_args)that);
      return false;
    }

    public boolean equals(getInfoByMediaID_args that) {
      if (that == null)
        return false;

      boolean this_present_mediaID = true;
      boolean that_present_mediaID = true;
      if (this_present_mediaID || that_present_mediaID) {
        if (!(this_present_mediaID && that_present_mediaID))
          return false;
        if (this.mediaID != that.mediaID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfoByMediaID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfoByMediaID_args typedOther = (getInfoByMediaID_args)other;

      lastComparison = Boolean.valueOf(isSetMediaID()).compareTo(typedOther.isSetMediaID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaID, typedOther.mediaID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoByMediaID_args(");
      boolean first = true;

      sb.append("mediaID:");
      sb.append(this.mediaID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByMediaID_argsStandardSchemeFactory implements SchemeFactory {
      public getInfoByMediaID_argsStandardScheme getScheme() {
        return new getInfoByMediaID_argsStandardScheme();
      }
    }

    private static class getInfoByMediaID_argsStandardScheme extends StandardScheme<getInfoByMediaID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByMediaID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEDIA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mediaID = iprot.readI32();
                struct.setMediaIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByMediaID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
        oprot.writeI32(struct.mediaID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByMediaID_argsTupleSchemeFactory implements SchemeFactory {
      public getInfoByMediaID_argsTupleScheme getScheme() {
        return new getInfoByMediaID_argsTupleScheme();
      }
    }

    private static class getInfoByMediaID_argsTupleScheme extends TupleScheme<getInfoByMediaID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByMediaID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMediaID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMediaID()) {
          oprot.writeI32(struct.mediaID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByMediaID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mediaID = iprot.readI32();
          struct.setMediaIDIsSet(true);
        }
      }
    }

  }

  public static class getInfoByMediaID_result implements org.apache.thrift.TBase<getInfoByMediaID_result, getInfoByMediaID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByMediaID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInfoByMediaID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInfoByMediaID_resultTupleSchemeFactory());
    }

    public PlayInfoList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PlayInfoList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByMediaID_result.class, metaDataMap);
    }

    public getInfoByMediaID_result() {
    }

    public getInfoByMediaID_result(
      PlayInfoList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByMediaID_result(getInfoByMediaID_result other) {
      if (other.isSetSuccess()) {
        this.success = new PlayInfoList(other.success);
      }
    }

    public getInfoByMediaID_result deepCopy() {
      return new getInfoByMediaID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PlayInfoList getSuccess() {
      return this.success;
    }

    public getInfoByMediaID_result setSuccess(PlayInfoList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PlayInfoList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByMediaID_result)
        return this.equals((getInfoByMediaID_result)that);
      return false;
    }

    public boolean equals(getInfoByMediaID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInfoByMediaID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInfoByMediaID_result typedOther = (getInfoByMediaID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInfoByMediaID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByMediaID_resultStandardSchemeFactory implements SchemeFactory {
      public getInfoByMediaID_resultStandardScheme getScheme() {
        return new getInfoByMediaID_resultStandardScheme();
      }
    }

    private static class getInfoByMediaID_resultStandardScheme extends StandardScheme<getInfoByMediaID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByMediaID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PlayInfoList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByMediaID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByMediaID_resultTupleSchemeFactory implements SchemeFactory {
      public getInfoByMediaID_resultTupleScheme getScheme() {
        return new getInfoByMediaID_resultTupleScheme();
      }
    }

    private static class getInfoByMediaID_resultTupleScheme extends TupleScheme<getInfoByMediaID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByMediaID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByMediaID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PlayInfoList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSerialInfoByMediaID_args implements org.apache.thrift.TBase<getSerialInfoByMediaID_args, getSerialInfoByMediaID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSerialInfoByMediaID_args");

    private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSerialInfoByMediaID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSerialInfoByMediaID_argsTupleSchemeFactory());
    }

    public int mediaID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEDIA_ID((short)1, "mediaID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEDIA_ID
            return MEDIA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEDIAID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSerialInfoByMediaID_args.class, metaDataMap);
    }

    public getSerialInfoByMediaID_args() {
    }

    public getSerialInfoByMediaID_args(
      int mediaID)
    {
      this();
      this.mediaID = mediaID;
      setMediaIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSerialInfoByMediaID_args(getSerialInfoByMediaID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mediaID = other.mediaID;
    }

    public getSerialInfoByMediaID_args deepCopy() {
      return new getSerialInfoByMediaID_args(this);
    }

    @Override
    public void clear() {
      setMediaIDIsSet(false);
      this.mediaID = 0;
    }

    public int getMediaID() {
      return this.mediaID;
    }

    public getSerialInfoByMediaID_args setMediaID(int mediaID) {
      this.mediaID = mediaID;
      setMediaIDIsSet(true);
      return this;
    }

    public void unsetMediaID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAID_ISSET_ID);
    }

    /** Returns true if field mediaID is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaID() {
      return EncodingUtils.testBit(__isset_bitfield, __MEDIAID_ISSET_ID);
    }

    public void setMediaIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEDIA_ID:
        if (value == null) {
          unsetMediaID();
        } else {
          setMediaID((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEDIA_ID:
        return Integer.valueOf(getMediaID());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEDIA_ID:
        return isSetMediaID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSerialInfoByMediaID_args)
        return this.equals((getSerialInfoByMediaID_args)that);
      return false;
    }

    public boolean equals(getSerialInfoByMediaID_args that) {
      if (that == null)
        return false;

      boolean this_present_mediaID = true;
      boolean that_present_mediaID = true;
      if (this_present_mediaID || that_present_mediaID) {
        if (!(this_present_mediaID && that_present_mediaID))
          return false;
        if (this.mediaID != that.mediaID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSerialInfoByMediaID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSerialInfoByMediaID_args typedOther = (getSerialInfoByMediaID_args)other;

      lastComparison = Boolean.valueOf(isSetMediaID()).compareTo(typedOther.isSetMediaID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaID, typedOther.mediaID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSerialInfoByMediaID_args(");
      boolean first = true;

      sb.append("mediaID:");
      sb.append(this.mediaID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSerialInfoByMediaID_argsStandardSchemeFactory implements SchemeFactory {
      public getSerialInfoByMediaID_argsStandardScheme getScheme() {
        return new getSerialInfoByMediaID_argsStandardScheme();
      }
    }

    private static class getSerialInfoByMediaID_argsStandardScheme extends StandardScheme<getSerialInfoByMediaID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSerialInfoByMediaID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEDIA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mediaID = iprot.readI32();
                struct.setMediaIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSerialInfoByMediaID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
        oprot.writeI32(struct.mediaID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSerialInfoByMediaID_argsTupleSchemeFactory implements SchemeFactory {
      public getSerialInfoByMediaID_argsTupleScheme getScheme() {
        return new getSerialInfoByMediaID_argsTupleScheme();
      }
    }

    private static class getSerialInfoByMediaID_argsTupleScheme extends TupleScheme<getSerialInfoByMediaID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSerialInfoByMediaID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMediaID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMediaID()) {
          oprot.writeI32(struct.mediaID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSerialInfoByMediaID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mediaID = iprot.readI32();
          struct.setMediaIDIsSet(true);
        }
      }
    }

  }

  public static class getSerialInfoByMediaID_result implements org.apache.thrift.TBase<getSerialInfoByMediaID_result, getSerialInfoByMediaID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSerialInfoByMediaID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSerialInfoByMediaID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSerialInfoByMediaID_resultTupleSchemeFactory());
    }

    public SerialInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SerialInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSerialInfoByMediaID_result.class, metaDataMap);
    }

    public getSerialInfoByMediaID_result() {
    }

    public getSerialInfoByMediaID_result(
      SerialInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSerialInfoByMediaID_result(getSerialInfoByMediaID_result other) {
      if (other.isSetSuccess()) {
        this.success = new SerialInfo(other.success);
      }
    }

    public getSerialInfoByMediaID_result deepCopy() {
      return new getSerialInfoByMediaID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SerialInfo getSuccess() {
      return this.success;
    }

    public getSerialInfoByMediaID_result setSuccess(SerialInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SerialInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSerialInfoByMediaID_result)
        return this.equals((getSerialInfoByMediaID_result)that);
      return false;
    }

    public boolean equals(getSerialInfoByMediaID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSerialInfoByMediaID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSerialInfoByMediaID_result typedOther = (getSerialInfoByMediaID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSerialInfoByMediaID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSerialInfoByMediaID_resultStandardSchemeFactory implements SchemeFactory {
      public getSerialInfoByMediaID_resultStandardScheme getScheme() {
        return new getSerialInfoByMediaID_resultStandardScheme();
      }
    }

    private static class getSerialInfoByMediaID_resultStandardScheme extends StandardScheme<getSerialInfoByMediaID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSerialInfoByMediaID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SerialInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSerialInfoByMediaID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSerialInfoByMediaID_resultTupleSchemeFactory implements SchemeFactory {
      public getSerialInfoByMediaID_resultTupleScheme getScheme() {
        return new getSerialInfoByMediaID_resultTupleScheme();
      }
    }

    private static class getSerialInfoByMediaID_resultTupleScheme extends TupleScheme<getSerialInfoByMediaID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSerialInfoByMediaID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSerialInfoByMediaID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SerialInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
