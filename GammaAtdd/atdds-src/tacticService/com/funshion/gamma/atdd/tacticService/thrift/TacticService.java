/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.funshion.gamma.atdd.tacticService.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TacticService {

  public interface Iface {

    public MediaIdList getAvailableMedia(List<Integer> mediaIds, String ucs) throws org.apache.thrift.TException;

    public MediaTacticList getMediaTactic(List<Integer> mediaIds, String ucs) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAvailableMedia(List<Integer> mediaIds, String ucs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getAvailableMedia_call> resultHandler) throws org.apache.thrift.TException;

    public void getMediaTactic(List<Integer> mediaIds, String ucs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMediaTactic_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public MediaIdList getAvailableMedia(List<Integer> mediaIds, String ucs) throws org.apache.thrift.TException
    {
      send_getAvailableMedia(mediaIds, ucs);
      return recv_getAvailableMedia();
    }

    public void send_getAvailableMedia(List<Integer> mediaIds, String ucs) throws org.apache.thrift.TException
    {
      getAvailableMedia_args args = new getAvailableMedia_args();
      args.setMediaIds(mediaIds);
      args.setUcs(ucs);
      sendBase("getAvailableMedia", args);
    }

    public MediaIdList recv_getAvailableMedia() throws org.apache.thrift.TException
    {
      getAvailableMedia_result result = new getAvailableMedia_result();
      receiveBase(result, "getAvailableMedia");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAvailableMedia failed: unknown result");
    }

    public MediaTacticList getMediaTactic(List<Integer> mediaIds, String ucs) throws org.apache.thrift.TException
    {
      send_getMediaTactic(mediaIds, ucs);
      return recv_getMediaTactic();
    }

    public void send_getMediaTactic(List<Integer> mediaIds, String ucs) throws org.apache.thrift.TException
    {
      getMediaTactic_args args = new getMediaTactic_args();
      args.setMediaIds(mediaIds);
      args.setUcs(ucs);
      sendBase("getMediaTactic", args);
    }

    public MediaTacticList recv_getMediaTactic() throws org.apache.thrift.TException
    {
      getMediaTactic_result result = new getMediaTactic_result();
      receiveBase(result, "getMediaTactic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMediaTactic failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAvailableMedia(List<Integer> mediaIds, String ucs, org.apache.thrift.async.AsyncMethodCallback<getAvailableMedia_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAvailableMedia_call method_call = new getAvailableMedia_call(mediaIds, ucs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAvailableMedia_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> mediaIds;
      private String ucs;
      public getAvailableMedia_call(List<Integer> mediaIds, String ucs, org.apache.thrift.async.AsyncMethodCallback<getAvailableMedia_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mediaIds = mediaIds;
        this.ucs = ucs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAvailableMedia", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAvailableMedia_args args = new getAvailableMedia_args();
        args.setMediaIds(mediaIds);
        args.setUcs(ucs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MediaIdList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAvailableMedia();
      }
    }

    public void getMediaTactic(List<Integer> mediaIds, String ucs, org.apache.thrift.async.AsyncMethodCallback<getMediaTactic_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMediaTactic_call method_call = new getMediaTactic_call(mediaIds, ucs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMediaTactic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> mediaIds;
      private String ucs;
      public getMediaTactic_call(List<Integer> mediaIds, String ucs, org.apache.thrift.async.AsyncMethodCallback<getMediaTactic_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mediaIds = mediaIds;
        this.ucs = ucs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMediaTactic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMediaTactic_args args = new getMediaTactic_args();
        args.setMediaIds(mediaIds);
        args.setUcs(ucs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MediaTacticList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMediaTactic();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAvailableMedia", new getAvailableMedia());
      processMap.put("getMediaTactic", new getMediaTactic());
      return processMap;
    }

    public static class getAvailableMedia<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAvailableMedia_args> {
      public getAvailableMedia() {
        super("getAvailableMedia");
      }

      public getAvailableMedia_args getEmptyArgsInstance() {
        return new getAvailableMedia_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAvailableMedia_result getResult(I iface, getAvailableMedia_args args) throws org.apache.thrift.TException {
        getAvailableMedia_result result = new getAvailableMedia_result();
        result.success = iface.getAvailableMedia(args.mediaIds, args.ucs);
        return result;
      }
    }

    public static class getMediaTactic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMediaTactic_args> {
      public getMediaTactic() {
        super("getMediaTactic");
      }

      public getMediaTactic_args getEmptyArgsInstance() {
        return new getMediaTactic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMediaTactic_result getResult(I iface, getMediaTactic_args args) throws org.apache.thrift.TException {
        getMediaTactic_result result = new getMediaTactic_result();
        result.success = iface.getMediaTactic(args.mediaIds, args.ucs);
        return result;
      }
    }

  }

  public static class getAvailableMedia_args implements org.apache.thrift.TBase<getAvailableMedia_args, getAvailableMedia_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAvailableMedia_args");

    private static final org.apache.thrift.protocol.TField MEDIA_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField UCS_FIELD_DESC = new org.apache.thrift.protocol.TField("ucs", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAvailableMedia_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAvailableMedia_argsTupleSchemeFactory());
    }

    public List<Integer> mediaIds; // required
    public String ucs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEDIA_IDS((short)1, "mediaIds"),
      UCS((short)2, "ucs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEDIA_IDS
            return MEDIA_IDS;
          case 2: // UCS
            return UCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEDIA_IDS, new org.apache.thrift.meta_data.FieldMetaData("mediaIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.UCS, new org.apache.thrift.meta_data.FieldMetaData("ucs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAvailableMedia_args.class, metaDataMap);
    }

    public getAvailableMedia_args() {
    }

    public getAvailableMedia_args(
      List<Integer> mediaIds,
      String ucs)
    {
      this();
      this.mediaIds = mediaIds;
      this.ucs = ucs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailableMedia_args(getAvailableMedia_args other) {
      if (other.isSetMediaIds()) {
        List<Integer> __this__mediaIds = new ArrayList<Integer>();
        for (Integer other_element : other.mediaIds) {
          __this__mediaIds.add(other_element);
        }
        this.mediaIds = __this__mediaIds;
      }
      if (other.isSetUcs()) {
        this.ucs = other.ucs;
      }
    }

    public getAvailableMedia_args deepCopy() {
      return new getAvailableMedia_args(this);
    }

    @Override
    public void clear() {
      this.mediaIds = null;
      this.ucs = null;
    }

    public int getMediaIdsSize() {
      return (this.mediaIds == null) ? 0 : this.mediaIds.size();
    }

    public java.util.Iterator<Integer> getMediaIdsIterator() {
      return (this.mediaIds == null) ? null : this.mediaIds.iterator();
    }

    public void addToMediaIds(int elem) {
      if (this.mediaIds == null) {
        this.mediaIds = new ArrayList<Integer>();
      }
      this.mediaIds.add(elem);
    }

    public List<Integer> getMediaIds() {
      return this.mediaIds;
    }

    public getAvailableMedia_args setMediaIds(List<Integer> mediaIds) {
      this.mediaIds = mediaIds;
      return this;
    }

    public void unsetMediaIds() {
      this.mediaIds = null;
    }

    /** Returns true if field mediaIds is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaIds() {
      return this.mediaIds != null;
    }

    public void setMediaIdsIsSet(boolean value) {
      if (!value) {
        this.mediaIds = null;
      }
    }

    public String getUcs() {
      return this.ucs;
    }

    public getAvailableMedia_args setUcs(String ucs) {
      this.ucs = ucs;
      return this;
    }

    public void unsetUcs() {
      this.ucs = null;
    }

    /** Returns true if field ucs is set (has been assigned a value) and false otherwise */
    public boolean isSetUcs() {
      return this.ucs != null;
    }

    public void setUcsIsSet(boolean value) {
      if (!value) {
        this.ucs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEDIA_IDS:
        if (value == null) {
          unsetMediaIds();
        } else {
          setMediaIds((List<Integer>)value);
        }
        break;

      case UCS:
        if (value == null) {
          unsetUcs();
        } else {
          setUcs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEDIA_IDS:
        return getMediaIds();

      case UCS:
        return getUcs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEDIA_IDS:
        return isSetMediaIds();
      case UCS:
        return isSetUcs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailableMedia_args)
        return this.equals((getAvailableMedia_args)that);
      return false;
    }

    public boolean equals(getAvailableMedia_args that) {
      if (that == null)
        return false;

      boolean this_present_mediaIds = true && this.isSetMediaIds();
      boolean that_present_mediaIds = true && that.isSetMediaIds();
      if (this_present_mediaIds || that_present_mediaIds) {
        if (!(this_present_mediaIds && that_present_mediaIds))
          return false;
        if (!this.mediaIds.equals(that.mediaIds))
          return false;
      }

      boolean this_present_ucs = true && this.isSetUcs();
      boolean that_present_ucs = true && that.isSetUcs();
      if (this_present_ucs || that_present_ucs) {
        if (!(this_present_ucs && that_present_ucs))
          return false;
        if (!this.ucs.equals(that.ucs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAvailableMedia_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAvailableMedia_args typedOther = (getAvailableMedia_args)other;

      lastComparison = Boolean.valueOf(isSetMediaIds()).compareTo(typedOther.isSetMediaIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaIds, typedOther.mediaIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUcs()).compareTo(typedOther.isSetUcs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUcs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucs, typedOther.ucs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailableMedia_args(");
      boolean first = true;

      sb.append("mediaIds:");
      if (this.mediaIds == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ucs:");
      if (this.ucs == null) {
        sb.append("null");
      } else {
        sb.append(this.ucs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAvailableMedia_argsStandardSchemeFactory implements SchemeFactory {
      public getAvailableMedia_argsStandardScheme getScheme() {
        return new getAvailableMedia_argsStandardScheme();
      }
    }

    private static class getAvailableMedia_argsStandardScheme extends StandardScheme<getAvailableMedia_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAvailableMedia_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEDIA_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.mediaIds = new ArrayList<Integer>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    int _elem18; // required
                    _elem18 = iprot.readI32();
                    struct.mediaIds.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setMediaIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UCS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ucs = iprot.readString();
                struct.setUcsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAvailableMedia_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mediaIds != null) {
          oprot.writeFieldBegin(MEDIA_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mediaIds.size()));
            for (int _iter19 : struct.mediaIds)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ucs != null) {
          oprot.writeFieldBegin(UCS_FIELD_DESC);
          oprot.writeString(struct.ucs);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAvailableMedia_argsTupleSchemeFactory implements SchemeFactory {
      public getAvailableMedia_argsTupleScheme getScheme() {
        return new getAvailableMedia_argsTupleScheme();
      }
    }

    private static class getAvailableMedia_argsTupleScheme extends TupleScheme<getAvailableMedia_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAvailableMedia_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMediaIds()) {
          optionals.set(0);
        }
        if (struct.isSetUcs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMediaIds()) {
          {
            oprot.writeI32(struct.mediaIds.size());
            for (int _iter20 : struct.mediaIds)
            {
              oprot.writeI32(_iter20);
            }
          }
        }
        if (struct.isSetUcs()) {
          oprot.writeString(struct.ucs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAvailableMedia_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.mediaIds = new ArrayList<Integer>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              int _elem23; // required
              _elem23 = iprot.readI32();
              struct.mediaIds.add(_elem23);
            }
          }
          struct.setMediaIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ucs = iprot.readString();
          struct.setUcsIsSet(true);
        }
      }
    }

  }

  public static class getAvailableMedia_result implements org.apache.thrift.TBase<getAvailableMedia_result, getAvailableMedia_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAvailableMedia_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAvailableMedia_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAvailableMedia_resultTupleSchemeFactory());
    }

    public MediaIdList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MediaIdList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAvailableMedia_result.class, metaDataMap);
    }

    public getAvailableMedia_result() {
    }

    public getAvailableMedia_result(
      MediaIdList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailableMedia_result(getAvailableMedia_result other) {
      if (other.isSetSuccess()) {
        this.success = new MediaIdList(other.success);
      }
    }

    public getAvailableMedia_result deepCopy() {
      return new getAvailableMedia_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MediaIdList getSuccess() {
      return this.success;
    }

    public getAvailableMedia_result setSuccess(MediaIdList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MediaIdList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailableMedia_result)
        return this.equals((getAvailableMedia_result)that);
      return false;
    }

    public boolean equals(getAvailableMedia_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getAvailableMedia_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getAvailableMedia_result typedOther = (getAvailableMedia_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailableMedia_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAvailableMedia_resultStandardSchemeFactory implements SchemeFactory {
      public getAvailableMedia_resultStandardScheme getScheme() {
        return new getAvailableMedia_resultStandardScheme();
      }
    }

    private static class getAvailableMedia_resultStandardScheme extends StandardScheme<getAvailableMedia_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAvailableMedia_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MediaIdList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAvailableMedia_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAvailableMedia_resultTupleSchemeFactory implements SchemeFactory {
      public getAvailableMedia_resultTupleScheme getScheme() {
        return new getAvailableMedia_resultTupleScheme();
      }
    }

    private static class getAvailableMedia_resultTupleScheme extends TupleScheme<getAvailableMedia_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAvailableMedia_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAvailableMedia_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MediaIdList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMediaTactic_args implements org.apache.thrift.TBase<getMediaTactic_args, getMediaTactic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaTactic_args");

    private static final org.apache.thrift.protocol.TField MEDIA_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField UCS_FIELD_DESC = new org.apache.thrift.protocol.TField("ucs", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaTactic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaTactic_argsTupleSchemeFactory());
    }

    public List<Integer> mediaIds; // required
    public String ucs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEDIA_IDS((short)1, "mediaIds"),
      UCS((short)2, "ucs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEDIA_IDS
            return MEDIA_IDS;
          case 2: // UCS
            return UCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEDIA_IDS, new org.apache.thrift.meta_data.FieldMetaData("mediaIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.UCS, new org.apache.thrift.meta_data.FieldMetaData("ucs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaTactic_args.class, metaDataMap);
    }

    public getMediaTactic_args() {
    }

    public getMediaTactic_args(
      List<Integer> mediaIds,
      String ucs)
    {
      this();
      this.mediaIds = mediaIds;
      this.ucs = ucs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaTactic_args(getMediaTactic_args other) {
      if (other.isSetMediaIds()) {
        List<Integer> __this__mediaIds = new ArrayList<Integer>();
        for (Integer other_element : other.mediaIds) {
          __this__mediaIds.add(other_element);
        }
        this.mediaIds = __this__mediaIds;
      }
      if (other.isSetUcs()) {
        this.ucs = other.ucs;
      }
    }

    public getMediaTactic_args deepCopy() {
      return new getMediaTactic_args(this);
    }

    @Override
    public void clear() {
      this.mediaIds = null;
      this.ucs = null;
    }

    public int getMediaIdsSize() {
      return (this.mediaIds == null) ? 0 : this.mediaIds.size();
    }

    public java.util.Iterator<Integer> getMediaIdsIterator() {
      return (this.mediaIds == null) ? null : this.mediaIds.iterator();
    }

    public void addToMediaIds(int elem) {
      if (this.mediaIds == null) {
        this.mediaIds = new ArrayList<Integer>();
      }
      this.mediaIds.add(elem);
    }

    public List<Integer> getMediaIds() {
      return this.mediaIds;
    }

    public getMediaTactic_args setMediaIds(List<Integer> mediaIds) {
      this.mediaIds = mediaIds;
      return this;
    }

    public void unsetMediaIds() {
      this.mediaIds = null;
    }

    /** Returns true if field mediaIds is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaIds() {
      return this.mediaIds != null;
    }

    public void setMediaIdsIsSet(boolean value) {
      if (!value) {
        this.mediaIds = null;
      }
    }

    public String getUcs() {
      return this.ucs;
    }

    public getMediaTactic_args setUcs(String ucs) {
      this.ucs = ucs;
      return this;
    }

    public void unsetUcs() {
      this.ucs = null;
    }

    /** Returns true if field ucs is set (has been assigned a value) and false otherwise */
    public boolean isSetUcs() {
      return this.ucs != null;
    }

    public void setUcsIsSet(boolean value) {
      if (!value) {
        this.ucs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEDIA_IDS:
        if (value == null) {
          unsetMediaIds();
        } else {
          setMediaIds((List<Integer>)value);
        }
        break;

      case UCS:
        if (value == null) {
          unsetUcs();
        } else {
          setUcs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEDIA_IDS:
        return getMediaIds();

      case UCS:
        return getUcs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEDIA_IDS:
        return isSetMediaIds();
      case UCS:
        return isSetUcs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaTactic_args)
        return this.equals((getMediaTactic_args)that);
      return false;
    }

    public boolean equals(getMediaTactic_args that) {
      if (that == null)
        return false;

      boolean this_present_mediaIds = true && this.isSetMediaIds();
      boolean that_present_mediaIds = true && that.isSetMediaIds();
      if (this_present_mediaIds || that_present_mediaIds) {
        if (!(this_present_mediaIds && that_present_mediaIds))
          return false;
        if (!this.mediaIds.equals(that.mediaIds))
          return false;
      }

      boolean this_present_ucs = true && this.isSetUcs();
      boolean that_present_ucs = true && that.isSetUcs();
      if (this_present_ucs || that_present_ucs) {
        if (!(this_present_ucs && that_present_ucs))
          return false;
        if (!this.ucs.equals(that.ucs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaTactic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaTactic_args typedOther = (getMediaTactic_args)other;

      lastComparison = Boolean.valueOf(isSetMediaIds()).compareTo(typedOther.isSetMediaIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaIds, typedOther.mediaIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUcs()).compareTo(typedOther.isSetUcs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUcs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucs, typedOther.ucs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaTactic_args(");
      boolean first = true;

      sb.append("mediaIds:");
      if (this.mediaIds == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ucs:");
      if (this.ucs == null) {
        sb.append("null");
      } else {
        sb.append(this.ucs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaTactic_argsStandardSchemeFactory implements SchemeFactory {
      public getMediaTactic_argsStandardScheme getScheme() {
        return new getMediaTactic_argsStandardScheme();
      }
    }

    private static class getMediaTactic_argsStandardScheme extends StandardScheme<getMediaTactic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaTactic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEDIA_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.mediaIds = new ArrayList<Integer>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    int _elem26; // required
                    _elem26 = iprot.readI32();
                    struct.mediaIds.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setMediaIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UCS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ucs = iprot.readString();
                struct.setUcsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaTactic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mediaIds != null) {
          oprot.writeFieldBegin(MEDIA_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mediaIds.size()));
            for (int _iter27 : struct.mediaIds)
            {
              oprot.writeI32(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ucs != null) {
          oprot.writeFieldBegin(UCS_FIELD_DESC);
          oprot.writeString(struct.ucs);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaTactic_argsTupleSchemeFactory implements SchemeFactory {
      public getMediaTactic_argsTupleScheme getScheme() {
        return new getMediaTactic_argsTupleScheme();
      }
    }

    private static class getMediaTactic_argsTupleScheme extends TupleScheme<getMediaTactic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaTactic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMediaIds()) {
          optionals.set(0);
        }
        if (struct.isSetUcs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMediaIds()) {
          {
            oprot.writeI32(struct.mediaIds.size());
            for (int _iter28 : struct.mediaIds)
            {
              oprot.writeI32(_iter28);
            }
          }
        }
        if (struct.isSetUcs()) {
          oprot.writeString(struct.ucs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaTactic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.mediaIds = new ArrayList<Integer>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              int _elem31; // required
              _elem31 = iprot.readI32();
              struct.mediaIds.add(_elem31);
            }
          }
          struct.setMediaIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ucs = iprot.readString();
          struct.setUcsIsSet(true);
        }
      }
    }

  }

  public static class getMediaTactic_result implements org.apache.thrift.TBase<getMediaTactic_result, getMediaTactic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaTactic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaTactic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaTactic_resultTupleSchemeFactory());
    }

    public MediaTacticList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MediaTacticList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaTactic_result.class, metaDataMap);
    }

    public getMediaTactic_result() {
    }

    public getMediaTactic_result(
      MediaTacticList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaTactic_result(getMediaTactic_result other) {
      if (other.isSetSuccess()) {
        this.success = new MediaTacticList(other.success);
      }
    }

    public getMediaTactic_result deepCopy() {
      return new getMediaTactic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MediaTacticList getSuccess() {
      return this.success;
    }

    public getMediaTactic_result setSuccess(MediaTacticList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MediaTacticList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaTactic_result)
        return this.equals((getMediaTactic_result)that);
      return false;
    }

    public boolean equals(getMediaTactic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaTactic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaTactic_result typedOther = (getMediaTactic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaTactic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaTactic_resultStandardSchemeFactory implements SchemeFactory {
      public getMediaTactic_resultStandardScheme getScheme() {
        return new getMediaTactic_resultStandardScheme();
      }
    }

    private static class getMediaTactic_resultStandardScheme extends StandardScheme<getMediaTactic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaTactic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MediaTacticList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaTactic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaTactic_resultTupleSchemeFactory implements SchemeFactory {
      public getMediaTactic_resultTupleScheme getScheme() {
        return new getMediaTactic_resultTupleScheme();
      }
    }

    private static class getMediaTactic_resultTupleScheme extends TupleScheme<getMediaTactic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaTactic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaTactic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MediaTacticList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
