package com.funshion.gamma.media.thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MediaV2 implements org.apache.thrift.TBase<MediaV2, MediaV2._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MediaV2");

  private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_CN_FIELD_DESC = new org.apache.thrift.protocol.TField("nameCN", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_EN_FIELD_DESC = new org.apache.thrift.protocol.TField("nameEN", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_OT_FIELD_DESC = new org.apache.thrift.protocol.TField("nameOT", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MEDIA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaLength", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RELEASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RELEASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseInfo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MODIFY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PINYIN_CN_FIELD_DESC = new org.apache.thrift.protocol.TField("pinyinCN", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField KARMA_FIELD_DESC = new org.apache.thrift.protocol.TField("karma", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CUT_PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("cutPic", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField FSP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("fspStatus", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CLARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("clarity", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField AD_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("adWord", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField COVER_PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("coverPic", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField PROGRAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("programType", org.apache.thrift.protocol.TType.I16, (short)21);
  private static final org.apache.thrift.protocol.TField WEB_CLARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("webClarity", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField ISPLAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isplay", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RELATE_VIDEOS_FIELD_DESC = new org.apache.thrift.protocol.TField("relateVideos", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField MEDIA_CLASSES_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaClasses", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField MEDIA_TACTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaTactics", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MediaV2StandardSchemeFactory());
    schemes.put(TupleScheme.class, new MediaV2TupleSchemeFactory());
  }

  public int mediaId; // required
  public String nameCN; // required
  public String nameEN; // required
  public String nameOT; // required
  public String displayType; // required
  public String language; // required
  public String mediaLength; // required
  public String country; // required
  public String releaseDate; // required
  public String releaseInfo; // required
  public String createDate; // required
  public String modifyDate; // required
  public String website; // required
  public String pinyinCN; // required
  public String karma; // required
  public int cutPic; // required
  public String fspStatus; // required
  public String clarity; // required
  public String adWord; // required
  public int coverPic; // required
  public short programType; // required
  public String webClarity; // required
  public String isplay; // required
  public List<Integer> relateVideos; // required
  public List<Integer> mediaClasses; // required
  public String mediaTactics; // required
  public boolean deleted; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_ID((short)1, "mediaId"),
    NAME_CN((short)2, "nameCN"),
    NAME_EN((short)3, "nameEN"),
    NAME_OT((short)4, "nameOT"),
    DISPLAY_TYPE((short)5, "displayType"),
    LANGUAGE((short)6, "language"),
    MEDIA_LENGTH((short)7, "mediaLength"),
    COUNTRY((short)8, "country"),
    RELEASE_DATE((short)9, "releaseDate"),
    RELEASE_INFO((short)10, "releaseInfo"),
    CREATE_DATE((short)11, "createDate"),
    MODIFY_DATE((short)12, "modifyDate"),
    WEBSITE((short)13, "website"),
    PINYIN_CN((short)14, "pinyinCN"),
    KARMA((short)15, "karma"),
    CUT_PIC((short)16, "cutPic"),
    FSP_STATUS((short)17, "fspStatus"),
    CLARITY((short)18, "clarity"),
    AD_WORD((short)19, "adWord"),
    COVER_PIC((short)20, "coverPic"),
    PROGRAM_TYPE((short)21, "programType"),
    WEB_CLARITY((short)22, "webClarity"),
    ISPLAY((short)23, "isplay"),
    RELATE_VIDEOS((short)24, "relateVideos"),
    MEDIA_CLASSES((short)25, "mediaClasses"),
    MEDIA_TACTICS((short)26, "mediaTactics"),
    DELETED((short)27, "deleted");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_ID
          return MEDIA_ID;
        case 2: // NAME_CN
          return NAME_CN;
        case 3: // NAME_EN
          return NAME_EN;
        case 4: // NAME_OT
          return NAME_OT;
        case 5: // DISPLAY_TYPE
          return DISPLAY_TYPE;
        case 6: // LANGUAGE
          return LANGUAGE;
        case 7: // MEDIA_LENGTH
          return MEDIA_LENGTH;
        case 8: // COUNTRY
          return COUNTRY;
        case 9: // RELEASE_DATE
          return RELEASE_DATE;
        case 10: // RELEASE_INFO
          return RELEASE_INFO;
        case 11: // CREATE_DATE
          return CREATE_DATE;
        case 12: // MODIFY_DATE
          return MODIFY_DATE;
        case 13: // WEBSITE
          return WEBSITE;
        case 14: // PINYIN_CN
          return PINYIN_CN;
        case 15: // KARMA
          return KARMA;
        case 16: // CUT_PIC
          return CUT_PIC;
        case 17: // FSP_STATUS
          return FSP_STATUS;
        case 18: // CLARITY
          return CLARITY;
        case 19: // AD_WORD
          return AD_WORD;
        case 20: // COVER_PIC
          return COVER_PIC;
        case 21: // PROGRAM_TYPE
          return PROGRAM_TYPE;
        case 22: // WEB_CLARITY
          return WEB_CLARITY;
        case 23: // ISPLAY
          return ISPLAY;
        case 24: // RELATE_VIDEOS
          return RELATE_VIDEOS;
        case 25: // MEDIA_CLASSES
          return MEDIA_CLASSES;
        case 26: // MEDIA_TACTICS
          return MEDIA_TACTICS;
        case 27: // DELETED
          return DELETED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEDIAID_ISSET_ID = 0;
  private static final int __CUTPIC_ISSET_ID = 1;
  private static final int __COVERPIC_ISSET_ID = 2;
  private static final int __PROGRAMTYPE_ISSET_ID = 3;
  private static final int __DELETED_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_CN, new org.apache.thrift.meta_data.FieldMetaData("nameCN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_EN, new org.apache.thrift.meta_data.FieldMetaData("nameEN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_OT, new org.apache.thrift.meta_data.FieldMetaData("nameOT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("displayType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("mediaLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("releaseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("releaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_DATE, new org.apache.thrift.meta_data.FieldMetaData("modifyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PINYIN_CN, new org.apache.thrift.meta_data.FieldMetaData("pinyinCN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KARMA, new org.apache.thrift.meta_data.FieldMetaData("karma", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUT_PIC, new org.apache.thrift.meta_data.FieldMetaData("cutPic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FSP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("fspStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLARITY, new org.apache.thrift.meta_data.FieldMetaData("clarity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_WORD, new org.apache.thrift.meta_data.FieldMetaData("adWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COVER_PIC, new org.apache.thrift.meta_data.FieldMetaData("coverPic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROGRAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("programType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.WEB_CLARITY, new org.apache.thrift.meta_data.FieldMetaData("webClarity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISPLAY, new org.apache.thrift.meta_data.FieldMetaData("isplay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATE_VIDEOS, new org.apache.thrift.meta_data.FieldMetaData("relateVideos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MEDIA_CLASSES, new org.apache.thrift.meta_data.FieldMetaData("mediaClasses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MEDIA_TACTICS, new org.apache.thrift.meta_data.FieldMetaData("mediaTactics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MediaV2.class, metaDataMap);
  }

  public MediaV2() {
  }

  public MediaV2(
    int mediaId,
    String nameCN,
    String nameEN,
    String nameOT,
    String displayType,
    String language,
    String mediaLength,
    String country,
    String releaseDate,
    String releaseInfo,
    String createDate,
    String modifyDate,
    String website,
    String pinyinCN,
    String karma,
    int cutPic,
    String fspStatus,
    String clarity,
    String adWord,
    int coverPic,
    short programType,
    String webClarity,
    String isplay,
    List<Integer> relateVideos,
    List<Integer> mediaClasses,
    String mediaTactics,
    boolean deleted)
  {
    this();
    this.mediaId = mediaId;
    setMediaIdIsSet(true);
    this.nameCN = nameCN;
    this.nameEN = nameEN;
    this.nameOT = nameOT;
    this.displayType = displayType;
    this.language = language;
    this.mediaLength = mediaLength;
    this.country = country;
    this.releaseDate = releaseDate;
    this.releaseInfo = releaseInfo;
    this.createDate = createDate;
    this.modifyDate = modifyDate;
    this.website = website;
    this.pinyinCN = pinyinCN;
    this.karma = karma;
    this.cutPic = cutPic;
    setCutPicIsSet(true);
    this.fspStatus = fspStatus;
    this.clarity = clarity;
    this.adWord = adWord;
    this.coverPic = coverPic;
    setCoverPicIsSet(true);
    this.programType = programType;
    setProgramTypeIsSet(true);
    this.webClarity = webClarity;
    this.isplay = isplay;
    this.relateVideos = relateVideos;
    this.mediaClasses = mediaClasses;
    this.mediaTactics = mediaTactics;
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MediaV2(MediaV2 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mediaId = other.mediaId;
    if (other.isSetNameCN()) {
      this.nameCN = other.nameCN;
    }
    if (other.isSetNameEN()) {
      this.nameEN = other.nameEN;
    }
    if (other.isSetNameOT()) {
      this.nameOT = other.nameOT;
    }
    if (other.isSetDisplayType()) {
      this.displayType = other.displayType;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetMediaLength()) {
      this.mediaLength = other.mediaLength;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetReleaseDate()) {
      this.releaseDate = other.releaseDate;
    }
    if (other.isSetReleaseInfo()) {
      this.releaseInfo = other.releaseInfo;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetModifyDate()) {
      this.modifyDate = other.modifyDate;
    }
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetPinyinCN()) {
      this.pinyinCN = other.pinyinCN;
    }
    if (other.isSetKarma()) {
      this.karma = other.karma;
    }
    this.cutPic = other.cutPic;
    if (other.isSetFspStatus()) {
      this.fspStatus = other.fspStatus;
    }
    if (other.isSetClarity()) {
      this.clarity = other.clarity;
    }
    if (other.isSetAdWord()) {
      this.adWord = other.adWord;
    }
    this.coverPic = other.coverPic;
    this.programType = other.programType;
    if (other.isSetWebClarity()) {
      this.webClarity = other.webClarity;
    }
    if (other.isSetIsplay()) {
      this.isplay = other.isplay;
    }
    if (other.isSetRelateVideos()) {
      List<Integer> __this__relateVideos = new ArrayList<Integer>();
      for (Integer other_element : other.relateVideos) {
        __this__relateVideos.add(other_element);
      }
      this.relateVideos = __this__relateVideos;
    }
    if (other.isSetMediaClasses()) {
      List<Integer> __this__mediaClasses = new ArrayList<Integer>();
      for (Integer other_element : other.mediaClasses) {
        __this__mediaClasses.add(other_element);
      }
      this.mediaClasses = __this__mediaClasses;
    }
    if (other.isSetMediaTactics()) {
      this.mediaTactics = other.mediaTactics;
    }
    this.deleted = other.deleted;
  }

  public MediaV2 deepCopy() {
    return new MediaV2(this);
  }

  @Override
  public void clear() {
    setMediaIdIsSet(false);
    this.mediaId = 0;
    this.nameCN = null;
    this.nameEN = null;
    this.nameOT = null;
    this.displayType = null;
    this.language = null;
    this.mediaLength = null;
    this.country = null;
    this.releaseDate = null;
    this.releaseInfo = null;
    this.createDate = null;
    this.modifyDate = null;
    this.website = null;
    this.pinyinCN = null;
    this.karma = null;
    setCutPicIsSet(false);
    this.cutPic = 0;
    this.fspStatus = null;
    this.clarity = null;
    this.adWord = null;
    setCoverPicIsSet(false);
    this.coverPic = 0;
    setProgramTypeIsSet(false);
    this.programType = 0;
    this.webClarity = null;
    this.isplay = null;
    this.relateVideos = null;
    this.mediaClasses = null;
    this.mediaTactics = null;
    setDeletedIsSet(false);
    this.deleted = false;
  }

  public int getMediaId() {
    return this.mediaId;
  }

  public MediaV2 setMediaId(int mediaId) {
    this.mediaId = mediaId;
    setMediaIdIsSet(true);
    return this;
  }

  public void unsetMediaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAID_ISSET_ID);
  }

  /** Returns true if field mediaId is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIAID_ISSET_ID);
  }

  public void setMediaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAID_ISSET_ID, value);
  }

  public String getNameCN() {
    return this.nameCN;
  }

  public MediaV2 setNameCN(String nameCN) {
    this.nameCN = nameCN;
    return this;
  }

  public void unsetNameCN() {
    this.nameCN = null;
  }

  /** Returns true if field nameCN is set (has been assigned a value) and false otherwise */
  public boolean isSetNameCN() {
    return this.nameCN != null;
  }

  public void setNameCNIsSet(boolean value) {
    if (!value) {
      this.nameCN = null;
    }
  }

  public String getNameEN() {
    return this.nameEN;
  }

  public MediaV2 setNameEN(String nameEN) {
    this.nameEN = nameEN;
    return this;
  }

  public void unsetNameEN() {
    this.nameEN = null;
  }

  /** Returns true if field nameEN is set (has been assigned a value) and false otherwise */
  public boolean isSetNameEN() {
    return this.nameEN != null;
  }

  public void setNameENIsSet(boolean value) {
    if (!value) {
      this.nameEN = null;
    }
  }

  public String getNameOT() {
    return this.nameOT;
  }

  public MediaV2 setNameOT(String nameOT) {
    this.nameOT = nameOT;
    return this;
  }

  public void unsetNameOT() {
    this.nameOT = null;
  }

  /** Returns true if field nameOT is set (has been assigned a value) and false otherwise */
  public boolean isSetNameOT() {
    return this.nameOT != null;
  }

  public void setNameOTIsSet(boolean value) {
    if (!value) {
      this.nameOT = null;
    }
  }

  public String getDisplayType() {
    return this.displayType;
  }

  public MediaV2 setDisplayType(String displayType) {
    this.displayType = displayType;
    return this;
  }

  public void unsetDisplayType() {
    this.displayType = null;
  }

  /** Returns true if field displayType is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayType() {
    return this.displayType != null;
  }

  public void setDisplayTypeIsSet(boolean value) {
    if (!value) {
      this.displayType = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public MediaV2 setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getMediaLength() {
    return this.mediaLength;
  }

  public MediaV2 setMediaLength(String mediaLength) {
    this.mediaLength = mediaLength;
    return this;
  }

  public void unsetMediaLength() {
    this.mediaLength = null;
  }

  /** Returns true if field mediaLength is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaLength() {
    return this.mediaLength != null;
  }

  public void setMediaLengthIsSet(boolean value) {
    if (!value) {
      this.mediaLength = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public MediaV2 setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getReleaseDate() {
    return this.releaseDate;
  }

  public MediaV2 setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  public void unsetReleaseDate() {
    this.releaseDate = null;
  }

  /** Returns true if field releaseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseDate() {
    return this.releaseDate != null;
  }

  public void setReleaseDateIsSet(boolean value) {
    if (!value) {
      this.releaseDate = null;
    }
  }

  public String getReleaseInfo() {
    return this.releaseInfo;
  }

  public MediaV2 setReleaseInfo(String releaseInfo) {
    this.releaseInfo = releaseInfo;
    return this;
  }

  public void unsetReleaseInfo() {
    this.releaseInfo = null;
  }

  /** Returns true if field releaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseInfo() {
    return this.releaseInfo != null;
  }

  public void setReleaseInfoIsSet(boolean value) {
    if (!value) {
      this.releaseInfo = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public MediaV2 setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getModifyDate() {
    return this.modifyDate;
  }

  public MediaV2 setModifyDate(String modifyDate) {
    this.modifyDate = modifyDate;
    return this;
  }

  public void unsetModifyDate() {
    this.modifyDate = null;
  }

  /** Returns true if field modifyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyDate() {
    return this.modifyDate != null;
  }

  public void setModifyDateIsSet(boolean value) {
    if (!value) {
      this.modifyDate = null;
    }
  }

  public String getWebsite() {
    return this.website;
  }

  public MediaV2 setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  public String getPinyinCN() {
    return this.pinyinCN;
  }

  public MediaV2 setPinyinCN(String pinyinCN) {
    this.pinyinCN = pinyinCN;
    return this;
  }

  public void unsetPinyinCN() {
    this.pinyinCN = null;
  }

  /** Returns true if field pinyinCN is set (has been assigned a value) and false otherwise */
  public boolean isSetPinyinCN() {
    return this.pinyinCN != null;
  }

  public void setPinyinCNIsSet(boolean value) {
    if (!value) {
      this.pinyinCN = null;
    }
  }

  public String getKarma() {
    return this.karma;
  }

  public MediaV2 setKarma(String karma) {
    this.karma = karma;
    return this;
  }

  public void unsetKarma() {
    this.karma = null;
  }

  /** Returns true if field karma is set (has been assigned a value) and false otherwise */
  public boolean isSetKarma() {
    return this.karma != null;
  }

  public void setKarmaIsSet(boolean value) {
    if (!value) {
      this.karma = null;
    }
  }

  public int getCutPic() {
    return this.cutPic;
  }

  public MediaV2 setCutPic(int cutPic) {
    this.cutPic = cutPic;
    setCutPicIsSet(true);
    return this;
  }

  public void unsetCutPic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUTPIC_ISSET_ID);
  }

  /** Returns true if field cutPic is set (has been assigned a value) and false otherwise */
  public boolean isSetCutPic() {
    return EncodingUtils.testBit(__isset_bitfield, __CUTPIC_ISSET_ID);
  }

  public void setCutPicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUTPIC_ISSET_ID, value);
  }

  public String getFspStatus() {
    return this.fspStatus;
  }

  public MediaV2 setFspStatus(String fspStatus) {
    this.fspStatus = fspStatus;
    return this;
  }

  public void unsetFspStatus() {
    this.fspStatus = null;
  }

  /** Returns true if field fspStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFspStatus() {
    return this.fspStatus != null;
  }

  public void setFspStatusIsSet(boolean value) {
    if (!value) {
      this.fspStatus = null;
    }
  }

  public String getClarity() {
    return this.clarity;
  }

  public MediaV2 setClarity(String clarity) {
    this.clarity = clarity;
    return this;
  }

  public void unsetClarity() {
    this.clarity = null;
  }

  /** Returns true if field clarity is set (has been assigned a value) and false otherwise */
  public boolean isSetClarity() {
    return this.clarity != null;
  }

  public void setClarityIsSet(boolean value) {
    if (!value) {
      this.clarity = null;
    }
  }

  public String getAdWord() {
    return this.adWord;
  }

  public MediaV2 setAdWord(String adWord) {
    this.adWord = adWord;
    return this;
  }

  public void unsetAdWord() {
    this.adWord = null;
  }

  /** Returns true if field adWord is set (has been assigned a value) and false otherwise */
  public boolean isSetAdWord() {
    return this.adWord != null;
  }

  public void setAdWordIsSet(boolean value) {
    if (!value) {
      this.adWord = null;
    }
  }

  public int getCoverPic() {
    return this.coverPic;
  }

  public MediaV2 setCoverPic(int coverPic) {
    this.coverPic = coverPic;
    setCoverPicIsSet(true);
    return this;
  }

  public void unsetCoverPic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COVERPIC_ISSET_ID);
  }

  /** Returns true if field coverPic is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverPic() {
    return EncodingUtils.testBit(__isset_bitfield, __COVERPIC_ISSET_ID);
  }

  public void setCoverPicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COVERPIC_ISSET_ID, value);
  }

  public short getProgramType() {
    return this.programType;
  }

  public MediaV2 setProgramType(short programType) {
    this.programType = programType;
    setProgramTypeIsSet(true);
    return this;
  }

  public void unsetProgramType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROGRAMTYPE_ISSET_ID);
  }

  /** Returns true if field programType is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROGRAMTYPE_ISSET_ID);
  }

  public void setProgramTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROGRAMTYPE_ISSET_ID, value);
  }

  public String getWebClarity() {
    return this.webClarity;
  }

  public MediaV2 setWebClarity(String webClarity) {
    this.webClarity = webClarity;
    return this;
  }

  public void unsetWebClarity() {
    this.webClarity = null;
  }

  /** Returns true if field webClarity is set (has been assigned a value) and false otherwise */
  public boolean isSetWebClarity() {
    return this.webClarity != null;
  }

  public void setWebClarityIsSet(boolean value) {
    if (!value) {
      this.webClarity = null;
    }
  }

  public String getIsplay() {
    return this.isplay;
  }

  public MediaV2 setIsplay(String isplay) {
    this.isplay = isplay;
    return this;
  }

  public void unsetIsplay() {
    this.isplay = null;
  }

  /** Returns true if field isplay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsplay() {
    return this.isplay != null;
  }

  public void setIsplayIsSet(boolean value) {
    if (!value) {
      this.isplay = null;
    }
  }

  public int getRelateVideosSize() {
    return (this.relateVideos == null) ? 0 : this.relateVideos.size();
  }

  public java.util.Iterator<Integer> getRelateVideosIterator() {
    return (this.relateVideos == null) ? null : this.relateVideos.iterator();
  }

  public void addToRelateVideos(int elem) {
    if (this.relateVideos == null) {
      this.relateVideos = new ArrayList<Integer>();
    }
    this.relateVideos.add(elem);
  }

  public List<Integer> getRelateVideos() {
    return this.relateVideos;
  }

  public MediaV2 setRelateVideos(List<Integer> relateVideos) {
    this.relateVideos = relateVideos;
    return this;
  }

  public void unsetRelateVideos() {
    this.relateVideos = null;
  }

  /** Returns true if field relateVideos is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateVideos() {
    return this.relateVideos != null;
  }

  public void setRelateVideosIsSet(boolean value) {
    if (!value) {
      this.relateVideos = null;
    }
  }

  public int getMediaClassesSize() {
    return (this.mediaClasses == null) ? 0 : this.mediaClasses.size();
  }

  public java.util.Iterator<Integer> getMediaClassesIterator() {
    return (this.mediaClasses == null) ? null : this.mediaClasses.iterator();
  }

  public void addToMediaClasses(int elem) {
    if (this.mediaClasses == null) {
      this.mediaClasses = new ArrayList<Integer>();
    }
    this.mediaClasses.add(elem);
  }

  public List<Integer> getMediaClasses() {
    return this.mediaClasses;
  }

  public MediaV2 setMediaClasses(List<Integer> mediaClasses) {
    this.mediaClasses = mediaClasses;
    return this;
  }

  public void unsetMediaClasses() {
    this.mediaClasses = null;
  }

  /** Returns true if field mediaClasses is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaClasses() {
    return this.mediaClasses != null;
  }

  public void setMediaClassesIsSet(boolean value) {
    if (!value) {
      this.mediaClasses = null;
    }
  }

  public String getMediaTactics() {
    return this.mediaTactics;
  }

  public MediaV2 setMediaTactics(String mediaTactics) {
    this.mediaTactics = mediaTactics;
    return this;
  }

  public void unsetMediaTactics() {
    this.mediaTactics = null;
  }

  /** Returns true if field mediaTactics is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaTactics() {
    return this.mediaTactics != null;
  }

  public void setMediaTacticsIsSet(boolean value) {
    if (!value) {
      this.mediaTactics = null;
    }
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public MediaV2 setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
    return this;
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_ID:
      if (value == null) {
        unsetMediaId();
      } else {
        setMediaId((Integer)value);
      }
      break;

    case NAME_CN:
      if (value == null) {
        unsetNameCN();
      } else {
        setNameCN((String)value);
      }
      break;

    case NAME_EN:
      if (value == null) {
        unsetNameEN();
      } else {
        setNameEN((String)value);
      }
      break;

    case NAME_OT:
      if (value == null) {
        unsetNameOT();
      } else {
        setNameOT((String)value);
      }
      break;

    case DISPLAY_TYPE:
      if (value == null) {
        unsetDisplayType();
      } else {
        setDisplayType((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case MEDIA_LENGTH:
      if (value == null) {
        unsetMediaLength();
      } else {
        setMediaLength((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case RELEASE_DATE:
      if (value == null) {
        unsetReleaseDate();
      } else {
        setReleaseDate((String)value);
      }
      break;

    case RELEASE_INFO:
      if (value == null) {
        unsetReleaseInfo();
      } else {
        setReleaseInfo((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case MODIFY_DATE:
      if (value == null) {
        unsetModifyDate();
      } else {
        setModifyDate((String)value);
      }
      break;

    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case PINYIN_CN:
      if (value == null) {
        unsetPinyinCN();
      } else {
        setPinyinCN((String)value);
      }
      break;

    case KARMA:
      if (value == null) {
        unsetKarma();
      } else {
        setKarma((String)value);
      }
      break;

    case CUT_PIC:
      if (value == null) {
        unsetCutPic();
      } else {
        setCutPic((Integer)value);
      }
      break;

    case FSP_STATUS:
      if (value == null) {
        unsetFspStatus();
      } else {
        setFspStatus((String)value);
      }
      break;

    case CLARITY:
      if (value == null) {
        unsetClarity();
      } else {
        setClarity((String)value);
      }
      break;

    case AD_WORD:
      if (value == null) {
        unsetAdWord();
      } else {
        setAdWord((String)value);
      }
      break;

    case COVER_PIC:
      if (value == null) {
        unsetCoverPic();
      } else {
        setCoverPic((Integer)value);
      }
      break;

    case PROGRAM_TYPE:
      if (value == null) {
        unsetProgramType();
      } else {
        setProgramType((Short)value);
      }
      break;

    case WEB_CLARITY:
      if (value == null) {
        unsetWebClarity();
      } else {
        setWebClarity((String)value);
      }
      break;

    case ISPLAY:
      if (value == null) {
        unsetIsplay();
      } else {
        setIsplay((String)value);
      }
      break;

    case RELATE_VIDEOS:
      if (value == null) {
        unsetRelateVideos();
      } else {
        setRelateVideos((List<Integer>)value);
      }
      break;

    case MEDIA_CLASSES:
      if (value == null) {
        unsetMediaClasses();
      } else {
        setMediaClasses((List<Integer>)value);
      }
      break;

    case MEDIA_TACTICS:
      if (value == null) {
        unsetMediaTactics();
      } else {
        setMediaTactics((String)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_ID:
      return Integer.valueOf(getMediaId());

    case NAME_CN:
      return getNameCN();

    case NAME_EN:
      return getNameEN();

    case NAME_OT:
      return getNameOT();

    case DISPLAY_TYPE:
      return getDisplayType();

    case LANGUAGE:
      return getLanguage();

    case MEDIA_LENGTH:
      return getMediaLength();

    case COUNTRY:
      return getCountry();

    case RELEASE_DATE:
      return getReleaseDate();

    case RELEASE_INFO:
      return getReleaseInfo();

    case CREATE_DATE:
      return getCreateDate();

    case MODIFY_DATE:
      return getModifyDate();

    case WEBSITE:
      return getWebsite();

    case PINYIN_CN:
      return getPinyinCN();

    case KARMA:
      return getKarma();

    case CUT_PIC:
      return Integer.valueOf(getCutPic());

    case FSP_STATUS:
      return getFspStatus();

    case CLARITY:
      return getClarity();

    case AD_WORD:
      return getAdWord();

    case COVER_PIC:
      return Integer.valueOf(getCoverPic());

    case PROGRAM_TYPE:
      return Short.valueOf(getProgramType());

    case WEB_CLARITY:
      return getWebClarity();

    case ISPLAY:
      return getIsplay();

    case RELATE_VIDEOS:
      return getRelateVideos();

    case MEDIA_CLASSES:
      return getMediaClasses();

    case MEDIA_TACTICS:
      return getMediaTactics();

    case DELETED:
      return Boolean.valueOf(isDeleted());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_ID:
      return isSetMediaId();
    case NAME_CN:
      return isSetNameCN();
    case NAME_EN:
      return isSetNameEN();
    case NAME_OT:
      return isSetNameOT();
    case DISPLAY_TYPE:
      return isSetDisplayType();
    case LANGUAGE:
      return isSetLanguage();
    case MEDIA_LENGTH:
      return isSetMediaLength();
    case COUNTRY:
      return isSetCountry();
    case RELEASE_DATE:
      return isSetReleaseDate();
    case RELEASE_INFO:
      return isSetReleaseInfo();
    case CREATE_DATE:
      return isSetCreateDate();
    case MODIFY_DATE:
      return isSetModifyDate();
    case WEBSITE:
      return isSetWebsite();
    case PINYIN_CN:
      return isSetPinyinCN();
    case KARMA:
      return isSetKarma();
    case CUT_PIC:
      return isSetCutPic();
    case FSP_STATUS:
      return isSetFspStatus();
    case CLARITY:
      return isSetClarity();
    case AD_WORD:
      return isSetAdWord();
    case COVER_PIC:
      return isSetCoverPic();
    case PROGRAM_TYPE:
      return isSetProgramType();
    case WEB_CLARITY:
      return isSetWebClarity();
    case ISPLAY:
      return isSetIsplay();
    case RELATE_VIDEOS:
      return isSetRelateVideos();
    case MEDIA_CLASSES:
      return isSetMediaClasses();
    case MEDIA_TACTICS:
      return isSetMediaTactics();
    case DELETED:
      return isSetDeleted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MediaV2)
      return this.equals((MediaV2)that);
    return false;
  }

  public boolean equals(MediaV2 that) {
    if (that == null)
      return false;

    boolean this_present_mediaId = true;
    boolean that_present_mediaId = true;
    if (this_present_mediaId || that_present_mediaId) {
      if (!(this_present_mediaId && that_present_mediaId))
        return false;
      if (this.mediaId != that.mediaId)
        return false;
    }

    boolean this_present_nameCN = true && this.isSetNameCN();
    boolean that_present_nameCN = true && that.isSetNameCN();
    if (this_present_nameCN || that_present_nameCN) {
      if (!(this_present_nameCN && that_present_nameCN))
        return false;
      if (!this.nameCN.equals(that.nameCN))
        return false;
    }

    boolean this_present_nameEN = true && this.isSetNameEN();
    boolean that_present_nameEN = true && that.isSetNameEN();
    if (this_present_nameEN || that_present_nameEN) {
      if (!(this_present_nameEN && that_present_nameEN))
        return false;
      if (!this.nameEN.equals(that.nameEN))
        return false;
    }

    boolean this_present_nameOT = true && this.isSetNameOT();
    boolean that_present_nameOT = true && that.isSetNameOT();
    if (this_present_nameOT || that_present_nameOT) {
      if (!(this_present_nameOT && that_present_nameOT))
        return false;
      if (!this.nameOT.equals(that.nameOT))
        return false;
    }

    boolean this_present_displayType = true && this.isSetDisplayType();
    boolean that_present_displayType = true && that.isSetDisplayType();
    if (this_present_displayType || that_present_displayType) {
      if (!(this_present_displayType && that_present_displayType))
        return false;
      if (!this.displayType.equals(that.displayType))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_mediaLength = true && this.isSetMediaLength();
    boolean that_present_mediaLength = true && that.isSetMediaLength();
    if (this_present_mediaLength || that_present_mediaLength) {
      if (!(this_present_mediaLength && that_present_mediaLength))
        return false;
      if (!this.mediaLength.equals(that.mediaLength))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_releaseDate = true && this.isSetReleaseDate();
    boolean that_present_releaseDate = true && that.isSetReleaseDate();
    if (this_present_releaseDate || that_present_releaseDate) {
      if (!(this_present_releaseDate && that_present_releaseDate))
        return false;
      if (!this.releaseDate.equals(that.releaseDate))
        return false;
    }

    boolean this_present_releaseInfo = true && this.isSetReleaseInfo();
    boolean that_present_releaseInfo = true && that.isSetReleaseInfo();
    if (this_present_releaseInfo || that_present_releaseInfo) {
      if (!(this_present_releaseInfo && that_present_releaseInfo))
        return false;
      if (!this.releaseInfo.equals(that.releaseInfo))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_modifyDate = true && this.isSetModifyDate();
    boolean that_present_modifyDate = true && that.isSetModifyDate();
    if (this_present_modifyDate || that_present_modifyDate) {
      if (!(this_present_modifyDate && that_present_modifyDate))
        return false;
      if (!this.modifyDate.equals(that.modifyDate))
        return false;
    }

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_pinyinCN = true && this.isSetPinyinCN();
    boolean that_present_pinyinCN = true && that.isSetPinyinCN();
    if (this_present_pinyinCN || that_present_pinyinCN) {
      if (!(this_present_pinyinCN && that_present_pinyinCN))
        return false;
      if (!this.pinyinCN.equals(that.pinyinCN))
        return false;
    }

    boolean this_present_karma = true && this.isSetKarma();
    boolean that_present_karma = true && that.isSetKarma();
    if (this_present_karma || that_present_karma) {
      if (!(this_present_karma && that_present_karma))
        return false;
      if (!this.karma.equals(that.karma))
        return false;
    }

    boolean this_present_cutPic = true;
    boolean that_present_cutPic = true;
    if (this_present_cutPic || that_present_cutPic) {
      if (!(this_present_cutPic && that_present_cutPic))
        return false;
      if (this.cutPic != that.cutPic)
        return false;
    }

    boolean this_present_fspStatus = true && this.isSetFspStatus();
    boolean that_present_fspStatus = true && that.isSetFspStatus();
    if (this_present_fspStatus || that_present_fspStatus) {
      if (!(this_present_fspStatus && that_present_fspStatus))
        return false;
      if (!this.fspStatus.equals(that.fspStatus))
        return false;
    }

    boolean this_present_clarity = true && this.isSetClarity();
    boolean that_present_clarity = true && that.isSetClarity();
    if (this_present_clarity || that_present_clarity) {
      if (!(this_present_clarity && that_present_clarity))
        return false;
      if (!this.clarity.equals(that.clarity))
        return false;
    }

    boolean this_present_adWord = true && this.isSetAdWord();
    boolean that_present_adWord = true && that.isSetAdWord();
    if (this_present_adWord || that_present_adWord) {
      if (!(this_present_adWord && that_present_adWord))
        return false;
      if (!this.adWord.equals(that.adWord))
        return false;
    }

    boolean this_present_coverPic = true;
    boolean that_present_coverPic = true;
    if (this_present_coverPic || that_present_coverPic) {
      if (!(this_present_coverPic && that_present_coverPic))
        return false;
      if (this.coverPic != that.coverPic)
        return false;
    }

    boolean this_present_programType = true;
    boolean that_present_programType = true;
    if (this_present_programType || that_present_programType) {
      if (!(this_present_programType && that_present_programType))
        return false;
      if (this.programType != that.programType)
        return false;
    }

    boolean this_present_webClarity = true && this.isSetWebClarity();
    boolean that_present_webClarity = true && that.isSetWebClarity();
    if (this_present_webClarity || that_present_webClarity) {
      if (!(this_present_webClarity && that_present_webClarity))
        return false;
      if (!this.webClarity.equals(that.webClarity))
        return false;
    }

    boolean this_present_isplay = true && this.isSetIsplay();
    boolean that_present_isplay = true && that.isSetIsplay();
    if (this_present_isplay || that_present_isplay) {
      if (!(this_present_isplay && that_present_isplay))
        return false;
      if (!this.isplay.equals(that.isplay))
        return false;
    }

    boolean this_present_relateVideos = true && this.isSetRelateVideos();
    boolean that_present_relateVideos = true && that.isSetRelateVideos();
    if (this_present_relateVideos || that_present_relateVideos) {
      if (!(this_present_relateVideos && that_present_relateVideos))
        return false;
      if (!this.relateVideos.equals(that.relateVideos))
        return false;
    }

    boolean this_present_mediaClasses = true && this.isSetMediaClasses();
    boolean that_present_mediaClasses = true && that.isSetMediaClasses();
    if (this_present_mediaClasses || that_present_mediaClasses) {
      if (!(this_present_mediaClasses && that_present_mediaClasses))
        return false;
      if (!this.mediaClasses.equals(that.mediaClasses))
        return false;
    }

    boolean this_present_mediaTactics = true && this.isSetMediaTactics();
    boolean that_present_mediaTactics = true && that.isSetMediaTactics();
    if (this_present_mediaTactics || that_present_mediaTactics) {
      if (!(this_present_mediaTactics && that_present_mediaTactics))
        return false;
      if (!this.mediaTactics.equals(that.mediaTactics))
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MediaV2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MediaV2 typedOther = (MediaV2)other;

    lastComparison = Boolean.valueOf(isSetMediaId()).compareTo(typedOther.isSetMediaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaId, typedOther.mediaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameCN()).compareTo(typedOther.isSetNameCN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameCN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameCN, typedOther.nameCN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameEN()).compareTo(typedOther.isSetNameEN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameEN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameEN, typedOther.nameEN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameOT()).compareTo(typedOther.isSetNameOT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameOT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameOT, typedOther.nameOT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayType()).compareTo(typedOther.isSetDisplayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayType, typedOther.displayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaLength()).compareTo(typedOther.isSetMediaLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaLength, typedOther.mediaLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleaseDate()).compareTo(typedOther.isSetReleaseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseDate, typedOther.releaseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleaseInfo()).compareTo(typedOther.isSetReleaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseInfo, typedOther.releaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(typedOther.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, typedOther.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyDate()).compareTo(typedOther.isSetModifyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyDate, typedOther.modifyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(typedOther.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, typedOther.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPinyinCN()).compareTo(typedOther.isSetPinyinCN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinyinCN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinyinCN, typedOther.pinyinCN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKarma()).compareTo(typedOther.isSetKarma());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKarma()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.karma, typedOther.karma);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutPic()).compareTo(typedOther.isSetCutPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutPic, typedOther.cutPic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFspStatus()).compareTo(typedOther.isSetFspStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFspStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fspStatus, typedOther.fspStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClarity()).compareTo(typedOther.isSetClarity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClarity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clarity, typedOther.clarity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdWord()).compareTo(typedOther.isSetAdWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adWord, typedOther.adWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverPic()).compareTo(typedOther.isSetCoverPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverPic, typedOther.coverPic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgramType()).compareTo(typedOther.isSetProgramType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programType, typedOther.programType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebClarity()).compareTo(typedOther.isSetWebClarity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebClarity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.webClarity, typedOther.webClarity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsplay()).compareTo(typedOther.isSetIsplay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsplay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isplay, typedOther.isplay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateVideos()).compareTo(typedOther.isSetRelateVideos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateVideos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateVideos, typedOther.relateVideos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaClasses()).compareTo(typedOther.isSetMediaClasses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaClasses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaClasses, typedOther.mediaClasses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaTactics()).compareTo(typedOther.isSetMediaTactics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaTactics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaTactics, typedOther.mediaTactics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MediaV2(");
    boolean first = true;

    sb.append("mediaId:");
    sb.append(this.mediaId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameCN:");
    if (this.nameCN == null) {
      sb.append("null");
    } else {
      sb.append(this.nameCN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameEN:");
    if (this.nameEN == null) {
      sb.append("null");
    } else {
      sb.append(this.nameEN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameOT:");
    if (this.nameOT == null) {
      sb.append("null");
    } else {
      sb.append(this.nameOT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayType:");
    if (this.displayType == null) {
      sb.append("null");
    } else {
      sb.append(this.displayType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaLength:");
    if (this.mediaLength == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("releaseDate:");
    if (this.releaseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.releaseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("releaseInfo:");
    if (this.releaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.releaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyDate:");
    if (this.modifyDate == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("website:");
    if (this.website == null) {
      sb.append("null");
    } else {
      sb.append(this.website);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pinyinCN:");
    if (this.pinyinCN == null) {
      sb.append("null");
    } else {
      sb.append(this.pinyinCN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("karma:");
    if (this.karma == null) {
      sb.append("null");
    } else {
      sb.append(this.karma);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutPic:");
    sb.append(this.cutPic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fspStatus:");
    if (this.fspStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.fspStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clarity:");
    if (this.clarity == null) {
      sb.append("null");
    } else {
      sb.append(this.clarity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adWord:");
    if (this.adWord == null) {
      sb.append("null");
    } else {
      sb.append(this.adWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coverPic:");
    sb.append(this.coverPic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("programType:");
    sb.append(this.programType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("webClarity:");
    if (this.webClarity == null) {
      sb.append("null");
    } else {
      sb.append(this.webClarity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isplay:");
    if (this.isplay == null) {
      sb.append("null");
    } else {
      sb.append(this.isplay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relateVideos:");
    if (this.relateVideos == null) {
      sb.append("null");
    } else {
      sb.append(this.relateVideos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaClasses:");
    if (this.mediaClasses == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaClasses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaTactics:");
    if (this.mediaTactics == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaTactics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MediaV2StandardSchemeFactory implements SchemeFactory {
    public MediaV2StandardScheme getScheme() {
      return new MediaV2StandardScheme();
    }
  }

  private static class MediaV2StandardScheme extends StandardScheme<MediaV2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MediaV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaId = iprot.readI32();
              struct.setMediaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_CN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameCN = iprot.readString();
              struct.setNameCNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME_EN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameEN = iprot.readString();
              struct.setNameENIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME_OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameOT = iprot.readString();
              struct.setNameOTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayType = iprot.readString();
              struct.setDisplayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEDIA_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaLength = iprot.readString();
              struct.setMediaLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RELEASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.releaseDate = iprot.readString();
              struct.setReleaseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RELEASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.releaseInfo = iprot.readString();
              struct.setReleaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MODIFY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyDate = iprot.readString();
              struct.setModifyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PINYIN_CN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pinyinCN = iprot.readString();
              struct.setPinyinCNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // KARMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.karma = iprot.readString();
              struct.setKarmaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUT_PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cutPic = iprot.readI32();
              struct.setCutPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FSP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fspStatus = iprot.readString();
              struct.setFspStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CLARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clarity = iprot.readString();
              struct.setClarityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AD_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adWord = iprot.readString();
              struct.setAdWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COVER_PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coverPic = iprot.readI32();
              struct.setCoverPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PROGRAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.programType = iprot.readI16();
              struct.setProgramTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // WEB_CLARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.webClarity = iprot.readString();
              struct.setWebClarityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ISPLAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isplay = iprot.readString();
              struct.setIsplayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RELATE_VIDEOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.relateVideos = new ArrayList<Integer>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  int _elem10; // required
                  _elem10 = iprot.readI32();
                  struct.relateVideos.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setRelateVideosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MEDIA_CLASSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.mediaClasses = new ArrayList<Integer>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  int _elem13; // required
                  _elem13 = iprot.readI32();
                  struct.mediaClasses.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMediaClassesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MEDIA_TACTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaTactics = iprot.readString();
              struct.setMediaTacticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MediaV2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaId);
      oprot.writeFieldEnd();
      if (struct.nameCN != null) {
        oprot.writeFieldBegin(NAME_CN_FIELD_DESC);
        oprot.writeString(struct.nameCN);
        oprot.writeFieldEnd();
      }
      if (struct.nameEN != null) {
        oprot.writeFieldBegin(NAME_EN_FIELD_DESC);
        oprot.writeString(struct.nameEN);
        oprot.writeFieldEnd();
      }
      if (struct.nameOT != null) {
        oprot.writeFieldBegin(NAME_OT_FIELD_DESC);
        oprot.writeString(struct.nameOT);
        oprot.writeFieldEnd();
      }
      if (struct.displayType != null) {
        oprot.writeFieldBegin(DISPLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.displayType);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.mediaLength != null) {
        oprot.writeFieldBegin(MEDIA_LENGTH_FIELD_DESC);
        oprot.writeString(struct.mediaLength);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.releaseDate != null) {
        oprot.writeFieldBegin(RELEASE_DATE_FIELD_DESC);
        oprot.writeString(struct.releaseDate);
        oprot.writeFieldEnd();
      }
      if (struct.releaseInfo != null) {
        oprot.writeFieldBegin(RELEASE_INFO_FIELD_DESC);
        oprot.writeString(struct.releaseInfo);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.modifyDate != null) {
        oprot.writeFieldBegin(MODIFY_DATE_FIELD_DESC);
        oprot.writeString(struct.modifyDate);
        oprot.writeFieldEnd();
      }
      if (struct.website != null) {
        oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
        oprot.writeString(struct.website);
        oprot.writeFieldEnd();
      }
      if (struct.pinyinCN != null) {
        oprot.writeFieldBegin(PINYIN_CN_FIELD_DESC);
        oprot.writeString(struct.pinyinCN);
        oprot.writeFieldEnd();
      }
      if (struct.karma != null) {
        oprot.writeFieldBegin(KARMA_FIELD_DESC);
        oprot.writeString(struct.karma);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUT_PIC_FIELD_DESC);
      oprot.writeI32(struct.cutPic);
      oprot.writeFieldEnd();
      if (struct.fspStatus != null) {
        oprot.writeFieldBegin(FSP_STATUS_FIELD_DESC);
        oprot.writeString(struct.fspStatus);
        oprot.writeFieldEnd();
      }
      if (struct.clarity != null) {
        oprot.writeFieldBegin(CLARITY_FIELD_DESC);
        oprot.writeString(struct.clarity);
        oprot.writeFieldEnd();
      }
      if (struct.adWord != null) {
        oprot.writeFieldBegin(AD_WORD_FIELD_DESC);
        oprot.writeString(struct.adWord);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COVER_PIC_FIELD_DESC);
      oprot.writeI32(struct.coverPic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROGRAM_TYPE_FIELD_DESC);
      oprot.writeI16(struct.programType);
      oprot.writeFieldEnd();
      if (struct.webClarity != null) {
        oprot.writeFieldBegin(WEB_CLARITY_FIELD_DESC);
        oprot.writeString(struct.webClarity);
        oprot.writeFieldEnd();
      }
      if (struct.isplay != null) {
        oprot.writeFieldBegin(ISPLAY_FIELD_DESC);
        oprot.writeString(struct.isplay);
        oprot.writeFieldEnd();
      }
      if (struct.relateVideos != null) {
        oprot.writeFieldBegin(RELATE_VIDEOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.relateVideos.size()));
          for (int _iter14 : struct.relateVideos)
          {
            oprot.writeI32(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mediaClasses != null) {
        oprot.writeFieldBegin(MEDIA_CLASSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mediaClasses.size()));
          for (int _iter15 : struct.mediaClasses)
          {
            oprot.writeI32(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mediaTactics != null) {
        oprot.writeFieldBegin(MEDIA_TACTICS_FIELD_DESC);
        oprot.writeString(struct.mediaTactics);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DELETED_FIELD_DESC);
      oprot.writeBool(struct.deleted);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MediaV2TupleSchemeFactory implements SchemeFactory {
    public MediaV2TupleScheme getScheme() {
      return new MediaV2TupleScheme();
    }
  }

  private static class MediaV2TupleScheme extends TupleScheme<MediaV2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MediaV2 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMediaId()) {
        optionals.set(0);
      }
      if (struct.isSetNameCN()) {
        optionals.set(1);
      }
      if (struct.isSetNameEN()) {
        optionals.set(2);
      }
      if (struct.isSetNameOT()) {
        optionals.set(3);
      }
      if (struct.isSetDisplayType()) {
        optionals.set(4);
      }
      if (struct.isSetLanguage()) {
        optionals.set(5);
      }
      if (struct.isSetMediaLength()) {
        optionals.set(6);
      }
      if (struct.isSetCountry()) {
        optionals.set(7);
      }
      if (struct.isSetReleaseDate()) {
        optionals.set(8);
      }
      if (struct.isSetReleaseInfo()) {
        optionals.set(9);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(10);
      }
      if (struct.isSetModifyDate()) {
        optionals.set(11);
      }
      if (struct.isSetWebsite()) {
        optionals.set(12);
      }
      if (struct.isSetPinyinCN()) {
        optionals.set(13);
      }
      if (struct.isSetKarma()) {
        optionals.set(14);
      }
      if (struct.isSetCutPic()) {
        optionals.set(15);
      }
      if (struct.isSetFspStatus()) {
        optionals.set(16);
      }
      if (struct.isSetClarity()) {
        optionals.set(17);
      }
      if (struct.isSetAdWord()) {
        optionals.set(18);
      }
      if (struct.isSetCoverPic()) {
        optionals.set(19);
      }
      if (struct.isSetProgramType()) {
        optionals.set(20);
      }
      if (struct.isSetWebClarity()) {
        optionals.set(21);
      }
      if (struct.isSetIsplay()) {
        optionals.set(22);
      }
      if (struct.isSetRelateVideos()) {
        optionals.set(23);
      }
      if (struct.isSetMediaClasses()) {
        optionals.set(24);
      }
      if (struct.isSetMediaTactics()) {
        optionals.set(25);
      }
      if (struct.isSetDeleted()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetMediaId()) {
        oprot.writeI32(struct.mediaId);
      }
      if (struct.isSetNameCN()) {
        oprot.writeString(struct.nameCN);
      }
      if (struct.isSetNameEN()) {
        oprot.writeString(struct.nameEN);
      }
      if (struct.isSetNameOT()) {
        oprot.writeString(struct.nameOT);
      }
      if (struct.isSetDisplayType()) {
        oprot.writeString(struct.displayType);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetMediaLength()) {
        oprot.writeString(struct.mediaLength);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetReleaseDate()) {
        oprot.writeString(struct.releaseDate);
      }
      if (struct.isSetReleaseInfo()) {
        oprot.writeString(struct.releaseInfo);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetModifyDate()) {
        oprot.writeString(struct.modifyDate);
      }
      if (struct.isSetWebsite()) {
        oprot.writeString(struct.website);
      }
      if (struct.isSetPinyinCN()) {
        oprot.writeString(struct.pinyinCN);
      }
      if (struct.isSetKarma()) {
        oprot.writeString(struct.karma);
      }
      if (struct.isSetCutPic()) {
        oprot.writeI32(struct.cutPic);
      }
      if (struct.isSetFspStatus()) {
        oprot.writeString(struct.fspStatus);
      }
      if (struct.isSetClarity()) {
        oprot.writeString(struct.clarity);
      }
      if (struct.isSetAdWord()) {
        oprot.writeString(struct.adWord);
      }
      if (struct.isSetCoverPic()) {
        oprot.writeI32(struct.coverPic);
      }
      if (struct.isSetProgramType()) {
        oprot.writeI16(struct.programType);
      }
      if (struct.isSetWebClarity()) {
        oprot.writeString(struct.webClarity);
      }
      if (struct.isSetIsplay()) {
        oprot.writeString(struct.isplay);
      }
      if (struct.isSetRelateVideos()) {
        {
          oprot.writeI32(struct.relateVideos.size());
          for (int _iter16 : struct.relateVideos)
          {
            oprot.writeI32(_iter16);
          }
        }
      }
      if (struct.isSetMediaClasses()) {
        {
          oprot.writeI32(struct.mediaClasses.size());
          for (int _iter17 : struct.mediaClasses)
          {
            oprot.writeI32(_iter17);
          }
        }
      }
      if (struct.isSetMediaTactics()) {
        oprot.writeString(struct.mediaTactics);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MediaV2 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.mediaId = iprot.readI32();
        struct.setMediaIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameCN = iprot.readString();
        struct.setNameCNIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nameEN = iprot.readString();
        struct.setNameENIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nameOT = iprot.readString();
        struct.setNameOTIsSet(true);
      }
      if (incoming.get(4)) {
        struct.displayType = iprot.readString();
        struct.setDisplayTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mediaLength = iprot.readString();
        struct.setMediaLengthIsSet(true);
      }
      if (incoming.get(7)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.releaseDate = iprot.readString();
        struct.setReleaseDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.releaseInfo = iprot.readString();
        struct.setReleaseInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.modifyDate = iprot.readString();
        struct.setModifyDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.website = iprot.readString();
        struct.setWebsiteIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pinyinCN = iprot.readString();
        struct.setPinyinCNIsSet(true);
      }
      if (incoming.get(14)) {
        struct.karma = iprot.readString();
        struct.setKarmaIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cutPic = iprot.readI32();
        struct.setCutPicIsSet(true);
      }
      if (incoming.get(16)) {
        struct.fspStatus = iprot.readString();
        struct.setFspStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.clarity = iprot.readString();
        struct.setClarityIsSet(true);
      }
      if (incoming.get(18)) {
        struct.adWord = iprot.readString();
        struct.setAdWordIsSet(true);
      }
      if (incoming.get(19)) {
        struct.coverPic = iprot.readI32();
        struct.setCoverPicIsSet(true);
      }
      if (incoming.get(20)) {
        struct.programType = iprot.readI16();
        struct.setProgramTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.webClarity = iprot.readString();
        struct.setWebClarityIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isplay = iprot.readString();
        struct.setIsplayIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.relateVideos = new ArrayList<Integer>(_list18.size);
          for (int _i19 = 0; _i19 < _list18.size; ++_i19)
          {
            int _elem20; // required
            _elem20 = iprot.readI32();
            struct.relateVideos.add(_elem20);
          }
        }
        struct.setRelateVideosIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mediaClasses = new ArrayList<Integer>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            int _elem23; // required
            _elem23 = iprot.readI32();
            struct.mediaClasses.add(_elem23);
          }
        }
        struct.setMediaClassesIsSet(true);
      }
      if (incoming.get(25)) {
        struct.mediaTactics = iprot.readString();
        struct.setMediaTacticsIsSet(true);
      }
      if (incoming.get(26)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
    }
  }

}

