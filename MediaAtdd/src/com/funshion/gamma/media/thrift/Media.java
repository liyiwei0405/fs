package com.funshion.gamma.media.thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Media implements org.apache.thrift.TBase<Media, Media._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Media");

  private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_CN_FIELD_DESC = new org.apache.thrift.protocol.TField("nameCN", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_EN_FIELD_DESC = new org.apache.thrift.protocol.TField("nameEN", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_OT_FIELD_DESC = new org.apache.thrift.protocol.TField("nameOT", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MEDIA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaLength", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RELEASE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField RELEASE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseInfo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField BEHIND_FIELD_DESC = new org.apache.thrift.protocol.TField("behind", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("plots", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MODIFY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PINYIN_CN_FIELD_DESC = new org.apache.thrift.protocol.TField("pinyinCN", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MediaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MediaTupleSchemeFactory());
  }

  public int mediaId; // required
  public String nameCN; // required
  public String nameEN; // required
  public String nameOT; // required
  public String displayType; // required
  public String language; // required
  public String mediaLength; // required
  public String country; // required
  public String releaseDate; // required
  public String releaseInfo; // required
  public String behind; // required
  public String plots; // required
  public String createDate; // required
  public String modifyDate; // required
  public String website; // required
  public String pinyinCN; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEDIA_ID((short)1, "mediaId"),
    NAME_CN((short)2, "nameCN"),
    NAME_EN((short)3, "nameEN"),
    NAME_OT((short)4, "nameOT"),
    DISPLAY_TYPE((short)5, "displayType"),
    LANGUAGE((short)6, "language"),
    MEDIA_LENGTH((short)7, "mediaLength"),
    COUNTRY((short)8, "country"),
    RELEASE_DATE((short)9, "releaseDate"),
    RELEASE_INFO((short)10, "releaseInfo"),
    BEHIND((short)11, "behind"),
    PLOTS((short)12, "plots"),
    CREATE_DATE((short)13, "createDate"),
    MODIFY_DATE((short)14, "modifyDate"),
    WEBSITE((short)15, "website"),
    PINYIN_CN((short)16, "pinyinCN");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEDIA_ID
          return MEDIA_ID;
        case 2: // NAME_CN
          return NAME_CN;
        case 3: // NAME_EN
          return NAME_EN;
        case 4: // NAME_OT
          return NAME_OT;
        case 5: // DISPLAY_TYPE
          return DISPLAY_TYPE;
        case 6: // LANGUAGE
          return LANGUAGE;
        case 7: // MEDIA_LENGTH
          return MEDIA_LENGTH;
        case 8: // COUNTRY
          return COUNTRY;
        case 9: // RELEASE_DATE
          return RELEASE_DATE;
        case 10: // RELEASE_INFO
          return RELEASE_INFO;
        case 11: // BEHIND
          return BEHIND;
        case 12: // PLOTS
          return PLOTS;
        case 13: // CREATE_DATE
          return CREATE_DATE;
        case 14: // MODIFY_DATE
          return MODIFY_DATE;
        case 15: // WEBSITE
          return WEBSITE;
        case 16: // PINYIN_CN
          return PINYIN_CN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEDIAID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_CN, new org.apache.thrift.meta_data.FieldMetaData("nameCN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_EN, new org.apache.thrift.meta_data.FieldMetaData("nameEN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_OT, new org.apache.thrift.meta_data.FieldMetaData("nameOT", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("displayType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDIA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("mediaLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEASE_DATE, new org.apache.thrift.meta_data.FieldMetaData("releaseDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEASE_INFO, new org.apache.thrift.meta_data.FieldMetaData("releaseInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEHIND, new org.apache.thrift.meta_data.FieldMetaData("behind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLOTS, new org.apache.thrift.meta_data.FieldMetaData("plots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_DATE, new org.apache.thrift.meta_data.FieldMetaData("modifyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PINYIN_CN, new org.apache.thrift.meta_data.FieldMetaData("pinyinCN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Media.class, metaDataMap);
  }

  public Media() {
  }

  public Media(
    int mediaId,
    String nameCN,
    String nameEN,
    String nameOT,
    String displayType,
    String language,
    String mediaLength,
    String country,
    String releaseDate,
    String releaseInfo,
    String behind,
    String plots,
    String createDate,
    String modifyDate,
    String website,
    String pinyinCN)
  {
    this();
    this.mediaId = mediaId;
    setMediaIdIsSet(true);
    this.nameCN = nameCN;
    this.nameEN = nameEN;
    this.nameOT = nameOT;
    this.displayType = displayType;
    this.language = language;
    this.mediaLength = mediaLength;
    this.country = country;
    this.releaseDate = releaseDate;
    this.releaseInfo = releaseInfo;
    this.behind = behind;
    this.plots = plots;
    this.createDate = createDate;
    this.modifyDate = modifyDate;
    this.website = website;
    this.pinyinCN = pinyinCN;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Media(Media other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mediaId = other.mediaId;
    if (other.isSetNameCN()) {
      this.nameCN = other.nameCN;
    }
    if (other.isSetNameEN()) {
      this.nameEN = other.nameEN;
    }
    if (other.isSetNameOT()) {
      this.nameOT = other.nameOT;
    }
    if (other.isSetDisplayType()) {
      this.displayType = other.displayType;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetMediaLength()) {
      this.mediaLength = other.mediaLength;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetReleaseDate()) {
      this.releaseDate = other.releaseDate;
    }
    if (other.isSetReleaseInfo()) {
      this.releaseInfo = other.releaseInfo;
    }
    if (other.isSetBehind()) {
      this.behind = other.behind;
    }
    if (other.isSetPlots()) {
      this.plots = other.plots;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetModifyDate()) {
      this.modifyDate = other.modifyDate;
    }
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetPinyinCN()) {
      this.pinyinCN = other.pinyinCN;
    }
  }

  public Media deepCopy() {
    return new Media(this);
  }

  @Override
  public void clear() {
    setMediaIdIsSet(false);
    this.mediaId = 0;
    this.nameCN = null;
    this.nameEN = null;
    this.nameOT = null;
    this.displayType = null;
    this.language = null;
    this.mediaLength = null;
    this.country = null;
    this.releaseDate = null;
    this.releaseInfo = null;
    this.behind = null;
    this.plots = null;
    this.createDate = null;
    this.modifyDate = null;
    this.website = null;
    this.pinyinCN = null;
  }

  public int getMediaId() {
    return this.mediaId;
  }

  public Media setMediaId(int mediaId) {
    this.mediaId = mediaId;
    setMediaIdIsSet(true);
    return this;
  }

  public void unsetMediaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAID_ISSET_ID);
  }

  /** Returns true if field mediaId is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIAID_ISSET_ID);
  }

  public void setMediaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAID_ISSET_ID, value);
  }

  public String getNameCN() {
    return this.nameCN;
  }

  public Media setNameCN(String nameCN) {
    this.nameCN = nameCN;
    return this;
  }

  public void unsetNameCN() {
    this.nameCN = null;
  }

  /** Returns true if field nameCN is set (has been assigned a value) and false otherwise */
  public boolean isSetNameCN() {
    return this.nameCN != null;
  }

  public void setNameCNIsSet(boolean value) {
    if (!value) {
      this.nameCN = null;
    }
  }

  public String getNameEN() {
    return this.nameEN;
  }

  public Media setNameEN(String nameEN) {
    this.nameEN = nameEN;
    return this;
  }

  public void unsetNameEN() {
    this.nameEN = null;
  }

  /** Returns true if field nameEN is set (has been assigned a value) and false otherwise */
  public boolean isSetNameEN() {
    return this.nameEN != null;
  }

  public void setNameENIsSet(boolean value) {
    if (!value) {
      this.nameEN = null;
    }
  }

  public String getNameOT() {
    return this.nameOT;
  }

  public Media setNameOT(String nameOT) {
    this.nameOT = nameOT;
    return this;
  }

  public void unsetNameOT() {
    this.nameOT = null;
  }

  /** Returns true if field nameOT is set (has been assigned a value) and false otherwise */
  public boolean isSetNameOT() {
    return this.nameOT != null;
  }

  public void setNameOTIsSet(boolean value) {
    if (!value) {
      this.nameOT = null;
    }
  }

  public String getDisplayType() {
    return this.displayType;
  }

  public Media setDisplayType(String displayType) {
    this.displayType = displayType;
    return this;
  }

  public void unsetDisplayType() {
    this.displayType = null;
  }

  /** Returns true if field displayType is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayType() {
    return this.displayType != null;
  }

  public void setDisplayTypeIsSet(boolean value) {
    if (!value) {
      this.displayType = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public Media setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getMediaLength() {
    return this.mediaLength;
  }

  public Media setMediaLength(String mediaLength) {
    this.mediaLength = mediaLength;
    return this;
  }

  public void unsetMediaLength() {
    this.mediaLength = null;
  }

  /** Returns true if field mediaLength is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaLength() {
    return this.mediaLength != null;
  }

  public void setMediaLengthIsSet(boolean value) {
    if (!value) {
      this.mediaLength = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public Media setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getReleaseDate() {
    return this.releaseDate;
  }

  public Media setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  public void unsetReleaseDate() {
    this.releaseDate = null;
  }

  /** Returns true if field releaseDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseDate() {
    return this.releaseDate != null;
  }

  public void setReleaseDateIsSet(boolean value) {
    if (!value) {
      this.releaseDate = null;
    }
  }

  public String getReleaseInfo() {
    return this.releaseInfo;
  }

  public Media setReleaseInfo(String releaseInfo) {
    this.releaseInfo = releaseInfo;
    return this;
  }

  public void unsetReleaseInfo() {
    this.releaseInfo = null;
  }

  /** Returns true if field releaseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseInfo() {
    return this.releaseInfo != null;
  }

  public void setReleaseInfoIsSet(boolean value) {
    if (!value) {
      this.releaseInfo = null;
    }
  }

  public String getBehind() {
    return this.behind;
  }

  public Media setBehind(String behind) {
    this.behind = behind;
    return this;
  }

  public void unsetBehind() {
    this.behind = null;
  }

  /** Returns true if field behind is set (has been assigned a value) and false otherwise */
  public boolean isSetBehind() {
    return this.behind != null;
  }

  public void setBehindIsSet(boolean value) {
    if (!value) {
      this.behind = null;
    }
  }

  public String getPlots() {
    return this.plots;
  }

  public Media setPlots(String plots) {
    this.plots = plots;
    return this;
  }

  public void unsetPlots() {
    this.plots = null;
  }

  /** Returns true if field plots is set (has been assigned a value) and false otherwise */
  public boolean isSetPlots() {
    return this.plots != null;
  }

  public void setPlotsIsSet(boolean value) {
    if (!value) {
      this.plots = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public Media setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getModifyDate() {
    return this.modifyDate;
  }

  public Media setModifyDate(String modifyDate) {
    this.modifyDate = modifyDate;
    return this;
  }

  public void unsetModifyDate() {
    this.modifyDate = null;
  }

  /** Returns true if field modifyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyDate() {
    return this.modifyDate != null;
  }

  public void setModifyDateIsSet(boolean value) {
    if (!value) {
      this.modifyDate = null;
    }
  }

  public String getWebsite() {
    return this.website;
  }

  public Media setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  public String getPinyinCN() {
    return this.pinyinCN;
  }

  public Media setPinyinCN(String pinyinCN) {
    this.pinyinCN = pinyinCN;
    return this;
  }

  public void unsetPinyinCN() {
    this.pinyinCN = null;
  }

  /** Returns true if field pinyinCN is set (has been assigned a value) and false otherwise */
  public boolean isSetPinyinCN() {
    return this.pinyinCN != null;
  }

  public void setPinyinCNIsSet(boolean value) {
    if (!value) {
      this.pinyinCN = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEDIA_ID:
      if (value == null) {
        unsetMediaId();
      } else {
        setMediaId((Integer)value);
      }
      break;

    case NAME_CN:
      if (value == null) {
        unsetNameCN();
      } else {
        setNameCN((String)value);
      }
      break;

    case NAME_EN:
      if (value == null) {
        unsetNameEN();
      } else {
        setNameEN((String)value);
      }
      break;

    case NAME_OT:
      if (value == null) {
        unsetNameOT();
      } else {
        setNameOT((String)value);
      }
      break;

    case DISPLAY_TYPE:
      if (value == null) {
        unsetDisplayType();
      } else {
        setDisplayType((String)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case MEDIA_LENGTH:
      if (value == null) {
        unsetMediaLength();
      } else {
        setMediaLength((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case RELEASE_DATE:
      if (value == null) {
        unsetReleaseDate();
      } else {
        setReleaseDate((String)value);
      }
      break;

    case RELEASE_INFO:
      if (value == null) {
        unsetReleaseInfo();
      } else {
        setReleaseInfo((String)value);
      }
      break;

    case BEHIND:
      if (value == null) {
        unsetBehind();
      } else {
        setBehind((String)value);
      }
      break;

    case PLOTS:
      if (value == null) {
        unsetPlots();
      } else {
        setPlots((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case MODIFY_DATE:
      if (value == null) {
        unsetModifyDate();
      } else {
        setModifyDate((String)value);
      }
      break;

    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case PINYIN_CN:
      if (value == null) {
        unsetPinyinCN();
      } else {
        setPinyinCN((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEDIA_ID:
      return Integer.valueOf(getMediaId());

    case NAME_CN:
      return getNameCN();

    case NAME_EN:
      return getNameEN();

    case NAME_OT:
      return getNameOT();

    case DISPLAY_TYPE:
      return getDisplayType();

    case LANGUAGE:
      return getLanguage();

    case MEDIA_LENGTH:
      return getMediaLength();

    case COUNTRY:
      return getCountry();

    case RELEASE_DATE:
      return getReleaseDate();

    case RELEASE_INFO:
      return getReleaseInfo();

    case BEHIND:
      return getBehind();

    case PLOTS:
      return getPlots();

    case CREATE_DATE:
      return getCreateDate();

    case MODIFY_DATE:
      return getModifyDate();

    case WEBSITE:
      return getWebsite();

    case PINYIN_CN:
      return getPinyinCN();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEDIA_ID:
      return isSetMediaId();
    case NAME_CN:
      return isSetNameCN();
    case NAME_EN:
      return isSetNameEN();
    case NAME_OT:
      return isSetNameOT();
    case DISPLAY_TYPE:
      return isSetDisplayType();
    case LANGUAGE:
      return isSetLanguage();
    case MEDIA_LENGTH:
      return isSetMediaLength();
    case COUNTRY:
      return isSetCountry();
    case RELEASE_DATE:
      return isSetReleaseDate();
    case RELEASE_INFO:
      return isSetReleaseInfo();
    case BEHIND:
      return isSetBehind();
    case PLOTS:
      return isSetPlots();
    case CREATE_DATE:
      return isSetCreateDate();
    case MODIFY_DATE:
      return isSetModifyDate();
    case WEBSITE:
      return isSetWebsite();
    case PINYIN_CN:
      return isSetPinyinCN();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Media)
      return this.equals((Media)that);
    return false;
  }

  public boolean equals(Media that) {
    if (that == null)
      return false;

    boolean this_present_mediaId = true;
    boolean that_present_mediaId = true;
    if (this_present_mediaId || that_present_mediaId) {
      if (!(this_present_mediaId && that_present_mediaId))
        return false;
      if (this.mediaId != that.mediaId)
        return false;
    }

    boolean this_present_nameCN = true && this.isSetNameCN();
    boolean that_present_nameCN = true && that.isSetNameCN();
    if (this_present_nameCN || that_present_nameCN) {
      if (!(this_present_nameCN && that_present_nameCN))
        return false;
      if (!this.nameCN.equals(that.nameCN))
        return false;
    }

    boolean this_present_nameEN = true && this.isSetNameEN();
    boolean that_present_nameEN = true && that.isSetNameEN();
    if (this_present_nameEN || that_present_nameEN) {
      if (!(this_present_nameEN && that_present_nameEN))
        return false;
      if (!this.nameEN.equals(that.nameEN))
        return false;
    }

    boolean this_present_nameOT = true && this.isSetNameOT();
    boolean that_present_nameOT = true && that.isSetNameOT();
    if (this_present_nameOT || that_present_nameOT) {
      if (!(this_present_nameOT && that_present_nameOT))
        return false;
      if (!this.nameOT.equals(that.nameOT))
        return false;
    }

    boolean this_present_displayType = true && this.isSetDisplayType();
    boolean that_present_displayType = true && that.isSetDisplayType();
    if (this_present_displayType || that_present_displayType) {
      if (!(this_present_displayType && that_present_displayType))
        return false;
      if (!this.displayType.equals(that.displayType))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_mediaLength = true && this.isSetMediaLength();
    boolean that_present_mediaLength = true && that.isSetMediaLength();
    if (this_present_mediaLength || that_present_mediaLength) {
      if (!(this_present_mediaLength && that_present_mediaLength))
        return false;
      if (!this.mediaLength.equals(that.mediaLength))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_releaseDate = true && this.isSetReleaseDate();
    boolean that_present_releaseDate = true && that.isSetReleaseDate();
    if (this_present_releaseDate || that_present_releaseDate) {
      if (!(this_present_releaseDate && that_present_releaseDate))
        return false;
      if (!this.releaseDate.equals(that.releaseDate))
        return false;
    }

    boolean this_present_releaseInfo = true && this.isSetReleaseInfo();
    boolean that_present_releaseInfo = true && that.isSetReleaseInfo();
    if (this_present_releaseInfo || that_present_releaseInfo) {
      if (!(this_present_releaseInfo && that_present_releaseInfo))
        return false;
      if (!this.releaseInfo.equals(that.releaseInfo))
        return false;
    }

    boolean this_present_behind = true && this.isSetBehind();
    boolean that_present_behind = true && that.isSetBehind();
    if (this_present_behind || that_present_behind) {
      if (!(this_present_behind && that_present_behind))
        return false;
      if (!this.behind.equals(that.behind))
        return false;
    }

    boolean this_present_plots = true && this.isSetPlots();
    boolean that_present_plots = true && that.isSetPlots();
    if (this_present_plots || that_present_plots) {
      if (!(this_present_plots && that_present_plots))
        return false;
      if (!this.plots.equals(that.plots))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_modifyDate = true && this.isSetModifyDate();
    boolean that_present_modifyDate = true && that.isSetModifyDate();
    if (this_present_modifyDate || that_present_modifyDate) {
      if (!(this_present_modifyDate && that_present_modifyDate))
        return false;
      if (!this.modifyDate.equals(that.modifyDate))
        return false;
    }

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_pinyinCN = true && this.isSetPinyinCN();
    boolean that_present_pinyinCN = true && that.isSetPinyinCN();
    if (this_present_pinyinCN || that_present_pinyinCN) {
      if (!(this_present_pinyinCN && that_present_pinyinCN))
        return false;
      if (!this.pinyinCN.equals(that.pinyinCN))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Media other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Media typedOther = (Media)other;

    lastComparison = Boolean.valueOf(isSetMediaId()).compareTo(typedOther.isSetMediaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaId, typedOther.mediaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameCN()).compareTo(typedOther.isSetNameCN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameCN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameCN, typedOther.nameCN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameEN()).compareTo(typedOther.isSetNameEN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameEN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameEN, typedOther.nameEN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameOT()).compareTo(typedOther.isSetNameOT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameOT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameOT, typedOther.nameOT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayType()).compareTo(typedOther.isSetDisplayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayType, typedOther.displayType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaLength()).compareTo(typedOther.isSetMediaLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaLength, typedOther.mediaLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleaseDate()).compareTo(typedOther.isSetReleaseDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseDate, typedOther.releaseDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleaseInfo()).compareTo(typedOther.isSetReleaseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseInfo, typedOther.releaseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBehind()).compareTo(typedOther.isSetBehind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBehind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behind, typedOther.behind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlots()).compareTo(typedOther.isSetPlots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plots, typedOther.plots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(typedOther.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, typedOther.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyDate()).compareTo(typedOther.isSetModifyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyDate, typedOther.modifyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(typedOther.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, typedOther.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPinyinCN()).compareTo(typedOther.isSetPinyinCN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinyinCN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinyinCN, typedOther.pinyinCN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Media(");
    boolean first = true;

    sb.append("mediaId:");
    sb.append(this.mediaId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameCN:");
    if (this.nameCN == null) {
      sb.append("null");
    } else {
      sb.append(this.nameCN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameEN:");
    if (this.nameEN == null) {
      sb.append("null");
    } else {
      sb.append(this.nameEN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nameOT:");
    if (this.nameOT == null) {
      sb.append("null");
    } else {
      sb.append(this.nameOT);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayType:");
    if (this.displayType == null) {
      sb.append("null");
    } else {
      sb.append(this.displayType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaLength:");
    if (this.mediaLength == null) {
      sb.append("null");
    } else {
      sb.append(this.mediaLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("releaseDate:");
    if (this.releaseDate == null) {
      sb.append("null");
    } else {
      sb.append(this.releaseDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("releaseInfo:");
    if (this.releaseInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.releaseInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("behind:");
    if (this.behind == null) {
      sb.append("null");
    } else {
      sb.append(this.behind);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plots:");
    if (this.plots == null) {
      sb.append("null");
    } else {
      sb.append(this.plots);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyDate:");
    if (this.modifyDate == null) {
      sb.append("null");
    } else {
      sb.append(this.modifyDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("website:");
    if (this.website == null) {
      sb.append("null");
    } else {
      sb.append(this.website);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pinyinCN:");
    if (this.pinyinCN == null) {
      sb.append("null");
    } else {
      sb.append(this.pinyinCN);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MediaStandardSchemeFactory implements SchemeFactory {
    public MediaStandardScheme getScheme() {
      return new MediaStandardScheme();
    }
  }

  private static class MediaStandardScheme extends StandardScheme<Media> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Media struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaId = iprot.readI32();
              struct.setMediaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_CN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameCN = iprot.readString();
              struct.setNameCNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME_EN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameEN = iprot.readString();
              struct.setNameENIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME_OT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameOT = iprot.readString();
              struct.setNameOTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayType = iprot.readString();
              struct.setDisplayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEDIA_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mediaLength = iprot.readString();
              struct.setMediaLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RELEASE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.releaseDate = iprot.readString();
              struct.setReleaseDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RELEASE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.releaseInfo = iprot.readString();
              struct.setReleaseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BEHIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.behind = iprot.readString();
              struct.setBehindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plots = iprot.readString();
              struct.setPlotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MODIFY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifyDate = iprot.readString();
              struct.setModifyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PINYIN_CN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pinyinCN = iprot.readString();
              struct.setPinyinCNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Media struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
      oprot.writeI32(struct.mediaId);
      oprot.writeFieldEnd();
      if (struct.nameCN != null) {
        oprot.writeFieldBegin(NAME_CN_FIELD_DESC);
        oprot.writeString(struct.nameCN);
        oprot.writeFieldEnd();
      }
      if (struct.nameEN != null) {
        oprot.writeFieldBegin(NAME_EN_FIELD_DESC);
        oprot.writeString(struct.nameEN);
        oprot.writeFieldEnd();
      }
      if (struct.nameOT != null) {
        oprot.writeFieldBegin(NAME_OT_FIELD_DESC);
        oprot.writeString(struct.nameOT);
        oprot.writeFieldEnd();
      }
      if (struct.displayType != null) {
        oprot.writeFieldBegin(DISPLAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.displayType);
        oprot.writeFieldEnd();
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.mediaLength != null) {
        oprot.writeFieldBegin(MEDIA_LENGTH_FIELD_DESC);
        oprot.writeString(struct.mediaLength);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.releaseDate != null) {
        oprot.writeFieldBegin(RELEASE_DATE_FIELD_DESC);
        oprot.writeString(struct.releaseDate);
        oprot.writeFieldEnd();
      }
      if (struct.releaseInfo != null) {
        oprot.writeFieldBegin(RELEASE_INFO_FIELD_DESC);
        oprot.writeString(struct.releaseInfo);
        oprot.writeFieldEnd();
      }
      if (struct.behind != null) {
        oprot.writeFieldBegin(BEHIND_FIELD_DESC);
        oprot.writeString(struct.behind);
        oprot.writeFieldEnd();
      }
      if (struct.plots != null) {
        oprot.writeFieldBegin(PLOTS_FIELD_DESC);
        oprot.writeString(struct.plots);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.modifyDate != null) {
        oprot.writeFieldBegin(MODIFY_DATE_FIELD_DESC);
        oprot.writeString(struct.modifyDate);
        oprot.writeFieldEnd();
      }
      if (struct.website != null) {
        oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
        oprot.writeString(struct.website);
        oprot.writeFieldEnd();
      }
      if (struct.pinyinCN != null) {
        oprot.writeFieldBegin(PINYIN_CN_FIELD_DESC);
        oprot.writeString(struct.pinyinCN);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MediaTupleSchemeFactory implements SchemeFactory {
    public MediaTupleScheme getScheme() {
      return new MediaTupleScheme();
    }
  }

  private static class MediaTupleScheme extends TupleScheme<Media> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Media struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMediaId()) {
        optionals.set(0);
      }
      if (struct.isSetNameCN()) {
        optionals.set(1);
      }
      if (struct.isSetNameEN()) {
        optionals.set(2);
      }
      if (struct.isSetNameOT()) {
        optionals.set(3);
      }
      if (struct.isSetDisplayType()) {
        optionals.set(4);
      }
      if (struct.isSetLanguage()) {
        optionals.set(5);
      }
      if (struct.isSetMediaLength()) {
        optionals.set(6);
      }
      if (struct.isSetCountry()) {
        optionals.set(7);
      }
      if (struct.isSetReleaseDate()) {
        optionals.set(8);
      }
      if (struct.isSetReleaseInfo()) {
        optionals.set(9);
      }
      if (struct.isSetBehind()) {
        optionals.set(10);
      }
      if (struct.isSetPlots()) {
        optionals.set(11);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(12);
      }
      if (struct.isSetModifyDate()) {
        optionals.set(13);
      }
      if (struct.isSetWebsite()) {
        optionals.set(14);
      }
      if (struct.isSetPinyinCN()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetMediaId()) {
        oprot.writeI32(struct.mediaId);
      }
      if (struct.isSetNameCN()) {
        oprot.writeString(struct.nameCN);
      }
      if (struct.isSetNameEN()) {
        oprot.writeString(struct.nameEN);
      }
      if (struct.isSetNameOT()) {
        oprot.writeString(struct.nameOT);
      }
      if (struct.isSetDisplayType()) {
        oprot.writeString(struct.displayType);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetMediaLength()) {
        oprot.writeString(struct.mediaLength);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetReleaseDate()) {
        oprot.writeString(struct.releaseDate);
      }
      if (struct.isSetReleaseInfo()) {
        oprot.writeString(struct.releaseInfo);
      }
      if (struct.isSetBehind()) {
        oprot.writeString(struct.behind);
      }
      if (struct.isSetPlots()) {
        oprot.writeString(struct.plots);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetModifyDate()) {
        oprot.writeString(struct.modifyDate);
      }
      if (struct.isSetWebsite()) {
        oprot.writeString(struct.website);
      }
      if (struct.isSetPinyinCN()) {
        oprot.writeString(struct.pinyinCN);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Media struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.mediaId = iprot.readI32();
        struct.setMediaIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nameCN = iprot.readString();
        struct.setNameCNIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nameEN = iprot.readString();
        struct.setNameENIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nameOT = iprot.readString();
        struct.setNameOTIsSet(true);
      }
      if (incoming.get(4)) {
        struct.displayType = iprot.readString();
        struct.setDisplayTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mediaLength = iprot.readString();
        struct.setMediaLengthIsSet(true);
      }
      if (incoming.get(7)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.releaseDate = iprot.readString();
        struct.setReleaseDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.releaseInfo = iprot.readString();
        struct.setReleaseInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.behind = iprot.readString();
        struct.setBehindIsSet(true);
      }
      if (incoming.get(11)) {
        struct.plots = iprot.readString();
        struct.setPlotsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.modifyDate = iprot.readString();
        struct.setModifyDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.website = iprot.readString();
        struct.setWebsiteIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pinyinCN = iprot.readString();
        struct.setPinyinCNIsSet(true);
      }
    }
  }

}

