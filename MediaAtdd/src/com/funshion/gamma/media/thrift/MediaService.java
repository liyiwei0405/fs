package com.funshion.gamma.media.thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MediaService {

  public interface Iface {

    public Media getMediaById(int mediaId, boolean hasBehind, boolean hasPlots) throws org.apache.thrift.TException;

    public List<Media> getMediaListByIds(List<Integer> mediaIds, boolean hasBehind, boolean hasPlots) throws org.apache.thrift.TException;

    public MediaList getMediaListByType(String displayType, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex) throws org.apache.thrift.TException;

    public MediaList getMediaListByDate(String modifyDate, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMediaById(int mediaId, boolean hasBehind, boolean hasPlots, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMediaById_call> resultHandler) throws org.apache.thrift.TException;

    public void getMediaListByIds(List<Integer> mediaIds, boolean hasBehind, boolean hasPlots, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMediaListByIds_call> resultHandler) throws org.apache.thrift.TException;

    public void getMediaListByType(String displayType, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMediaListByType_call> resultHandler) throws org.apache.thrift.TException;

    public void getMediaListByDate(String modifyDate, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMediaListByDate_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Media getMediaById(int mediaId, boolean hasBehind, boolean hasPlots) throws org.apache.thrift.TException
    {
      send_getMediaById(mediaId, hasBehind, hasPlots);
      return recv_getMediaById();
    }

    public void send_getMediaById(int mediaId, boolean hasBehind, boolean hasPlots) throws org.apache.thrift.TException
    {
      getMediaById_args args = new getMediaById_args();
      args.setMediaId(mediaId);
      args.setHasBehind(hasBehind);
      args.setHasPlots(hasPlots);
      sendBase("getMediaById", args);
    }

    public Media recv_getMediaById() throws org.apache.thrift.TException
    {
      getMediaById_result result = new getMediaById_result();
      receiveBase(result, "getMediaById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMediaById failed: unknown result");
    }

    public List<Media> getMediaListByIds(List<Integer> mediaIds, boolean hasBehind, boolean hasPlots) throws org.apache.thrift.TException
    {
      send_getMediaListByIds(mediaIds, hasBehind, hasPlots);
      return recv_getMediaListByIds();
    }

    public void send_getMediaListByIds(List<Integer> mediaIds, boolean hasBehind, boolean hasPlots) throws org.apache.thrift.TException
    {
      getMediaListByIds_args args = new getMediaListByIds_args();
      args.setMediaIds(mediaIds);
      args.setHasBehind(hasBehind);
      args.setHasPlots(hasPlots);
      sendBase("getMediaListByIds", args);
    }

    public List<Media> recv_getMediaListByIds() throws org.apache.thrift.TException
    {
      getMediaListByIds_result result = new getMediaListByIds_result();
      receiveBase(result, "getMediaListByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMediaListByIds failed: unknown result");
    }

    public MediaList getMediaListByType(String displayType, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex) throws org.apache.thrift.TException
    {
      send_getMediaListByType(displayType, hasBehind, hasPlots, pageSize, pageIndex);
      return recv_getMediaListByType();
    }

    public void send_getMediaListByType(String displayType, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex) throws org.apache.thrift.TException
    {
      getMediaListByType_args args = new getMediaListByType_args();
      args.setDisplayType(displayType);
      args.setHasBehind(hasBehind);
      args.setHasPlots(hasPlots);
      args.setPageSize(pageSize);
      args.setPageIndex(pageIndex);
      sendBase("getMediaListByType", args);
    }

    public MediaList recv_getMediaListByType() throws org.apache.thrift.TException
    {
      getMediaListByType_result result = new getMediaListByType_result();
      receiveBase(result, "getMediaListByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMediaListByType failed: unknown result");
    }

    public MediaList getMediaListByDate(String modifyDate, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex) throws org.apache.thrift.TException
    {
      send_getMediaListByDate(modifyDate, hasBehind, hasPlots, pageSize, pageIndex);
      return recv_getMediaListByDate();
    }

    public void send_getMediaListByDate(String modifyDate, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex) throws org.apache.thrift.TException
    {
      getMediaListByDate_args args = new getMediaListByDate_args();
      args.setModifyDate(modifyDate);
      args.setHasBehind(hasBehind);
      args.setHasPlots(hasPlots);
      args.setPageSize(pageSize);
      args.setPageIndex(pageIndex);
      sendBase("getMediaListByDate", args);
    }

    public MediaList recv_getMediaListByDate() throws org.apache.thrift.TException
    {
      getMediaListByDate_result result = new getMediaListByDate_result();
      receiveBase(result, "getMediaListByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMediaListByDate failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMediaById(int mediaId, boolean hasBehind, boolean hasPlots, org.apache.thrift.async.AsyncMethodCallback<getMediaById_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMediaById_call method_call = new getMediaById_call(mediaId, hasBehind, hasPlots, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMediaById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int mediaId;
      private boolean hasBehind;
      private boolean hasPlots;
      public getMediaById_call(int mediaId, boolean hasBehind, boolean hasPlots, org.apache.thrift.async.AsyncMethodCallback<getMediaById_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mediaId = mediaId;
        this.hasBehind = hasBehind;
        this.hasPlots = hasPlots;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMediaById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMediaById_args args = new getMediaById_args();
        args.setMediaId(mediaId);
        args.setHasBehind(hasBehind);
        args.setHasPlots(hasPlots);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Media getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMediaById();
      }
    }

    public void getMediaListByIds(List<Integer> mediaIds, boolean hasBehind, boolean hasPlots, org.apache.thrift.async.AsyncMethodCallback<getMediaListByIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMediaListByIds_call method_call = new getMediaListByIds_call(mediaIds, hasBehind, hasPlots, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMediaListByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> mediaIds;
      private boolean hasBehind;
      private boolean hasPlots;
      public getMediaListByIds_call(List<Integer> mediaIds, boolean hasBehind, boolean hasPlots, org.apache.thrift.async.AsyncMethodCallback<getMediaListByIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mediaIds = mediaIds;
        this.hasBehind = hasBehind;
        this.hasPlots = hasPlots;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMediaListByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMediaListByIds_args args = new getMediaListByIds_args();
        args.setMediaIds(mediaIds);
        args.setHasBehind(hasBehind);
        args.setHasPlots(hasPlots);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Media> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMediaListByIds();
      }
    }

    public void getMediaListByType(String displayType, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex, org.apache.thrift.async.AsyncMethodCallback<getMediaListByType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMediaListByType_call method_call = new getMediaListByType_call(displayType, hasBehind, hasPlots, pageSize, pageIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMediaListByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String displayType;
      private boolean hasBehind;
      private boolean hasPlots;
      private int pageSize;
      private int pageIndex;
      public getMediaListByType_call(String displayType, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex, org.apache.thrift.async.AsyncMethodCallback<getMediaListByType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.displayType = displayType;
        this.hasBehind = hasBehind;
        this.hasPlots = hasPlots;
        this.pageSize = pageSize;
        this.pageIndex = pageIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMediaListByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMediaListByType_args args = new getMediaListByType_args();
        args.setDisplayType(displayType);
        args.setHasBehind(hasBehind);
        args.setHasPlots(hasPlots);
        args.setPageSize(pageSize);
        args.setPageIndex(pageIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MediaList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMediaListByType();
      }
    }

    public void getMediaListByDate(String modifyDate, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex, org.apache.thrift.async.AsyncMethodCallback<getMediaListByDate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMediaListByDate_call method_call = new getMediaListByDate_call(modifyDate, hasBehind, hasPlots, pageSize, pageIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMediaListByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String modifyDate;
      private boolean hasBehind;
      private boolean hasPlots;
      private int pageSize;
      private int pageIndex;
      public getMediaListByDate_call(String modifyDate, boolean hasBehind, boolean hasPlots, int pageSize, int pageIndex, org.apache.thrift.async.AsyncMethodCallback<getMediaListByDate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modifyDate = modifyDate;
        this.hasBehind = hasBehind;
        this.hasPlots = hasPlots;
        this.pageSize = pageSize;
        this.pageIndex = pageIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMediaListByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMediaListByDate_args args = new getMediaListByDate_args();
        args.setModifyDate(modifyDate);
        args.setHasBehind(hasBehind);
        args.setHasPlots(hasPlots);
        args.setPageSize(pageSize);
        args.setPageIndex(pageIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MediaList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMediaListByDate();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMediaById", new getMediaById());
      processMap.put("getMediaListByIds", new getMediaListByIds());
      processMap.put("getMediaListByType", new getMediaListByType());
      processMap.put("getMediaListByDate", new getMediaListByDate());
      return processMap;
    }

    public static class getMediaById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMediaById_args> {
      public getMediaById() {
        super("getMediaById");
      }

      public getMediaById_args getEmptyArgsInstance() {
        return new getMediaById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMediaById_result getResult(I iface, getMediaById_args args) throws org.apache.thrift.TException {
        getMediaById_result result = new getMediaById_result();
        result.success = iface.getMediaById(args.mediaId, args.hasBehind, args.hasPlots);
        return result;
      }
    }

    public static class getMediaListByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMediaListByIds_args> {
      public getMediaListByIds() {
        super("getMediaListByIds");
      }

      public getMediaListByIds_args getEmptyArgsInstance() {
        return new getMediaListByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMediaListByIds_result getResult(I iface, getMediaListByIds_args args) throws org.apache.thrift.TException {
        getMediaListByIds_result result = new getMediaListByIds_result();
        result.success = iface.getMediaListByIds(args.mediaIds, args.hasBehind, args.hasPlots);
        return result;
      }
    }

    public static class getMediaListByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMediaListByType_args> {
      public getMediaListByType() {
        super("getMediaListByType");
      }

      public getMediaListByType_args getEmptyArgsInstance() {
        return new getMediaListByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMediaListByType_result getResult(I iface, getMediaListByType_args args) throws org.apache.thrift.TException {
        getMediaListByType_result result = new getMediaListByType_result();
        result.success = iface.getMediaListByType(args.displayType, args.hasBehind, args.hasPlots, args.pageSize, args.pageIndex);
        return result;
      }
    }

    public static class getMediaListByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMediaListByDate_args> {
      public getMediaListByDate() {
        super("getMediaListByDate");
      }

      public getMediaListByDate_args getEmptyArgsInstance() {
        return new getMediaListByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMediaListByDate_result getResult(I iface, getMediaListByDate_args args) throws org.apache.thrift.TException {
        getMediaListByDate_result result = new getMediaListByDate_result();
        result.success = iface.getMediaListByDate(args.modifyDate, args.hasBehind, args.hasPlots, args.pageSize, args.pageIndex);
        return result;
      }
    }

  }

  public static class getMediaById_args implements org.apache.thrift.TBase<getMediaById_args, getMediaById_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaById_args");

    private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HAS_BEHIND_FIELD_DESC = new org.apache.thrift.protocol.TField("hasBehind", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField HAS_PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPlots", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaById_argsTupleSchemeFactory());
    }

    public int mediaId; // required
    public boolean hasBehind; // required
    public boolean hasPlots; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEDIA_ID((short)1, "mediaId"),
      HAS_BEHIND((short)2, "hasBehind"),
      HAS_PLOTS((short)3, "hasPlots");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEDIA_ID
            return MEDIA_ID;
          case 2: // HAS_BEHIND
            return HAS_BEHIND;
          case 3: // HAS_PLOTS
            return HAS_PLOTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEDIAID_ISSET_ID = 0;
    private static final int __HASBEHIND_ISSET_ID = 1;
    private static final int __HASPLOTS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("mediaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HAS_BEHIND, new org.apache.thrift.meta_data.FieldMetaData("hasBehind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.HAS_PLOTS, new org.apache.thrift.meta_data.FieldMetaData("hasPlots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaById_args.class, metaDataMap);
    }

    public getMediaById_args() {
    }

    public getMediaById_args(
      int mediaId,
      boolean hasBehind,
      boolean hasPlots)
    {
      this();
      this.mediaId = mediaId;
      setMediaIdIsSet(true);
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaById_args(getMediaById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mediaId = other.mediaId;
      this.hasBehind = other.hasBehind;
      this.hasPlots = other.hasPlots;
    }

    public getMediaById_args deepCopy() {
      return new getMediaById_args(this);
    }

    @Override
    public void clear() {
      setMediaIdIsSet(false);
      this.mediaId = 0;
      setHasBehindIsSet(false);
      this.hasBehind = false;
      setHasPlotsIsSet(false);
      this.hasPlots = false;
    }

    public int getMediaId() {
      return this.mediaId;
    }

    public getMediaById_args setMediaId(int mediaId) {
      this.mediaId = mediaId;
      setMediaIdIsSet(true);
      return this;
    }

    public void unsetMediaId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIAID_ISSET_ID);
    }

    /** Returns true if field mediaId is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaId() {
      return EncodingUtils.testBit(__isset_bitfield, __MEDIAID_ISSET_ID);
    }

    public void setMediaIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIAID_ISSET_ID, value);
    }

    public boolean isHasBehind() {
      return this.hasBehind;
    }

    public getMediaById_args setHasBehind(boolean hasBehind) {
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      return this;
    }

    public void unsetHasBehind() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    /** Returns true if field hasBehind is set (has been assigned a value) and false otherwise */
    public boolean isSetHasBehind() {
      return EncodingUtils.testBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    public void setHasBehindIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASBEHIND_ISSET_ID, value);
    }

    public boolean isHasPlots() {
      return this.hasPlots;
    }

    public getMediaById_args setHasPlots(boolean hasPlots) {
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
      return this;
    }

    public void unsetHasPlots() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    /** Returns true if field hasPlots is set (has been assigned a value) and false otherwise */
    public boolean isSetHasPlots() {
      return EncodingUtils.testBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    public void setHasPlotsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPLOTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEDIA_ID:
        if (value == null) {
          unsetMediaId();
        } else {
          setMediaId((Integer)value);
        }
        break;

      case HAS_BEHIND:
        if (value == null) {
          unsetHasBehind();
        } else {
          setHasBehind((Boolean)value);
        }
        break;

      case HAS_PLOTS:
        if (value == null) {
          unsetHasPlots();
        } else {
          setHasPlots((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEDIA_ID:
        return Integer.valueOf(getMediaId());

      case HAS_BEHIND:
        return Boolean.valueOf(isHasBehind());

      case HAS_PLOTS:
        return Boolean.valueOf(isHasPlots());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEDIA_ID:
        return isSetMediaId();
      case HAS_BEHIND:
        return isSetHasBehind();
      case HAS_PLOTS:
        return isSetHasPlots();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaById_args)
        return this.equals((getMediaById_args)that);
      return false;
    }

    public boolean equals(getMediaById_args that) {
      if (that == null)
        return false;

      boolean this_present_mediaId = true;
      boolean that_present_mediaId = true;
      if (this_present_mediaId || that_present_mediaId) {
        if (!(this_present_mediaId && that_present_mediaId))
          return false;
        if (this.mediaId != that.mediaId)
          return false;
      }

      boolean this_present_hasBehind = true;
      boolean that_present_hasBehind = true;
      if (this_present_hasBehind || that_present_hasBehind) {
        if (!(this_present_hasBehind && that_present_hasBehind))
          return false;
        if (this.hasBehind != that.hasBehind)
          return false;
      }

      boolean this_present_hasPlots = true;
      boolean that_present_hasPlots = true;
      if (this_present_hasPlots || that_present_hasPlots) {
        if (!(this_present_hasPlots && that_present_hasPlots))
          return false;
        if (this.hasPlots != that.hasPlots)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaById_args typedOther = (getMediaById_args)other;

      lastComparison = Boolean.valueOf(isSetMediaId()).compareTo(typedOther.isSetMediaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaId, typedOther.mediaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasBehind()).compareTo(typedOther.isSetHasBehind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasBehind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasBehind, typedOther.hasBehind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasPlots()).compareTo(typedOther.isSetHasPlots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasPlots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPlots, typedOther.hasPlots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaById_args(");
      boolean first = true;

      sb.append("mediaId:");
      sb.append(this.mediaId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasBehind:");
      sb.append(this.hasBehind);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasPlots:");
      sb.append(this.hasPlots);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaById_argsStandardSchemeFactory implements SchemeFactory {
      public getMediaById_argsStandardScheme getScheme() {
        return new getMediaById_argsStandardScheme();
      }
    }

    private static class getMediaById_argsStandardScheme extends StandardScheme<getMediaById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEDIA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.mediaId = iprot.readI32();
                struct.setMediaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HAS_BEHIND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasBehind = iprot.readBool();
                struct.setHasBehindIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAS_PLOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasPlots = iprot.readBool();
                struct.setHasPlotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
        oprot.writeI32(struct.mediaId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HAS_BEHIND_FIELD_DESC);
        oprot.writeBool(struct.hasBehind);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HAS_PLOTS_FIELD_DESC);
        oprot.writeBool(struct.hasPlots);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaById_argsTupleSchemeFactory implements SchemeFactory {
      public getMediaById_argsTupleScheme getScheme() {
        return new getMediaById_argsTupleScheme();
      }
    }

    private static class getMediaById_argsTupleScheme extends TupleScheme<getMediaById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMediaId()) {
          optionals.set(0);
        }
        if (struct.isSetHasBehind()) {
          optionals.set(1);
        }
        if (struct.isSetHasPlots()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMediaId()) {
          oprot.writeI32(struct.mediaId);
        }
        if (struct.isSetHasBehind()) {
          oprot.writeBool(struct.hasBehind);
        }
        if (struct.isSetHasPlots()) {
          oprot.writeBool(struct.hasPlots);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.mediaId = iprot.readI32();
          struct.setMediaIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hasBehind = iprot.readBool();
          struct.setHasBehindIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hasPlots = iprot.readBool();
          struct.setHasPlotsIsSet(true);
        }
      }
    }

  }

  public static class getMediaById_result implements org.apache.thrift.TBase<getMediaById_result, getMediaById_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaById_resultTupleSchemeFactory());
    }

    public Media success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Media.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaById_result.class, metaDataMap);
    }

    public getMediaById_result() {
    }

    public getMediaById_result(
      Media success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaById_result(getMediaById_result other) {
      if (other.isSetSuccess()) {
        this.success = new Media(other.success);
      }
    }

    public getMediaById_result deepCopy() {
      return new getMediaById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Media getSuccess() {
      return this.success;
    }

    public getMediaById_result setSuccess(Media success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Media)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaById_result)
        return this.equals((getMediaById_result)that);
      return false;
    }

    public boolean equals(getMediaById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaById_result typedOther = (getMediaById_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaById_resultStandardSchemeFactory implements SchemeFactory {
      public getMediaById_resultStandardScheme getScheme() {
        return new getMediaById_resultStandardScheme();
      }
    }

    private static class getMediaById_resultStandardScheme extends StandardScheme<getMediaById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Media();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaById_resultTupleSchemeFactory implements SchemeFactory {
      public getMediaById_resultTupleScheme getScheme() {
        return new getMediaById_resultTupleScheme();
      }
    }

    private static class getMediaById_resultTupleScheme extends TupleScheme<getMediaById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Media();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMediaListByIds_args implements org.apache.thrift.TBase<getMediaListByIds_args, getMediaListByIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaListByIds_args");

    private static final org.apache.thrift.protocol.TField MEDIA_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField HAS_BEHIND_FIELD_DESC = new org.apache.thrift.protocol.TField("hasBehind", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField HAS_PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPlots", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaListByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaListByIds_argsTupleSchemeFactory());
    }

    public List<Integer> mediaIds; // required
    public boolean hasBehind; // required
    public boolean hasPlots; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEDIA_IDS((short)1, "mediaIds"),
      HAS_BEHIND((short)2, "hasBehind"),
      HAS_PLOTS((short)3, "hasPlots");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEDIA_IDS
            return MEDIA_IDS;
          case 2: // HAS_BEHIND
            return HAS_BEHIND;
          case 3: // HAS_PLOTS
            return HAS_PLOTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HASBEHIND_ISSET_ID = 0;
    private static final int __HASPLOTS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEDIA_IDS, new org.apache.thrift.meta_data.FieldMetaData("mediaIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.HAS_BEHIND, new org.apache.thrift.meta_data.FieldMetaData("hasBehind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.HAS_PLOTS, new org.apache.thrift.meta_data.FieldMetaData("hasPlots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaListByIds_args.class, metaDataMap);
    }

    public getMediaListByIds_args() {
    }

    public getMediaListByIds_args(
      List<Integer> mediaIds,
      boolean hasBehind,
      boolean hasPlots)
    {
      this();
      this.mediaIds = mediaIds;
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaListByIds_args(getMediaListByIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMediaIds()) {
        List<Integer> __this__mediaIds = new ArrayList<Integer>();
        for (Integer other_element : other.mediaIds) {
          __this__mediaIds.add(other_element);
        }
        this.mediaIds = __this__mediaIds;
      }
      this.hasBehind = other.hasBehind;
      this.hasPlots = other.hasPlots;
    }

    public getMediaListByIds_args deepCopy() {
      return new getMediaListByIds_args(this);
    }

    @Override
    public void clear() {
      this.mediaIds = null;
      setHasBehindIsSet(false);
      this.hasBehind = false;
      setHasPlotsIsSet(false);
      this.hasPlots = false;
    }

    public int getMediaIdsSize() {
      return (this.mediaIds == null) ? 0 : this.mediaIds.size();
    }

    public java.util.Iterator<Integer> getMediaIdsIterator() {
      return (this.mediaIds == null) ? null : this.mediaIds.iterator();
    }

    public void addToMediaIds(int elem) {
      if (this.mediaIds == null) {
        this.mediaIds = new ArrayList<Integer>();
      }
      this.mediaIds.add(elem);
    }

    public List<Integer> getMediaIds() {
      return this.mediaIds;
    }

    public getMediaListByIds_args setMediaIds(List<Integer> mediaIds) {
      this.mediaIds = mediaIds;
      return this;
    }

    public void unsetMediaIds() {
      this.mediaIds = null;
    }

    /** Returns true if field mediaIds is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaIds() {
      return this.mediaIds != null;
    }

    public void setMediaIdsIsSet(boolean value) {
      if (!value) {
        this.mediaIds = null;
      }
    }

    public boolean isHasBehind() {
      return this.hasBehind;
    }

    public getMediaListByIds_args setHasBehind(boolean hasBehind) {
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      return this;
    }

    public void unsetHasBehind() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    /** Returns true if field hasBehind is set (has been assigned a value) and false otherwise */
    public boolean isSetHasBehind() {
      return EncodingUtils.testBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    public void setHasBehindIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASBEHIND_ISSET_ID, value);
    }

    public boolean isHasPlots() {
      return this.hasPlots;
    }

    public getMediaListByIds_args setHasPlots(boolean hasPlots) {
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
      return this;
    }

    public void unsetHasPlots() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    /** Returns true if field hasPlots is set (has been assigned a value) and false otherwise */
    public boolean isSetHasPlots() {
      return EncodingUtils.testBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    public void setHasPlotsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPLOTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEDIA_IDS:
        if (value == null) {
          unsetMediaIds();
        } else {
          setMediaIds((List<Integer>)value);
        }
        break;

      case HAS_BEHIND:
        if (value == null) {
          unsetHasBehind();
        } else {
          setHasBehind((Boolean)value);
        }
        break;

      case HAS_PLOTS:
        if (value == null) {
          unsetHasPlots();
        } else {
          setHasPlots((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEDIA_IDS:
        return getMediaIds();

      case HAS_BEHIND:
        return Boolean.valueOf(isHasBehind());

      case HAS_PLOTS:
        return Boolean.valueOf(isHasPlots());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEDIA_IDS:
        return isSetMediaIds();
      case HAS_BEHIND:
        return isSetHasBehind();
      case HAS_PLOTS:
        return isSetHasPlots();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaListByIds_args)
        return this.equals((getMediaListByIds_args)that);
      return false;
    }

    public boolean equals(getMediaListByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_mediaIds = true && this.isSetMediaIds();
      boolean that_present_mediaIds = true && that.isSetMediaIds();
      if (this_present_mediaIds || that_present_mediaIds) {
        if (!(this_present_mediaIds && that_present_mediaIds))
          return false;
        if (!this.mediaIds.equals(that.mediaIds))
          return false;
      }

      boolean this_present_hasBehind = true;
      boolean that_present_hasBehind = true;
      if (this_present_hasBehind || that_present_hasBehind) {
        if (!(this_present_hasBehind && that_present_hasBehind))
          return false;
        if (this.hasBehind != that.hasBehind)
          return false;
      }

      boolean this_present_hasPlots = true;
      boolean that_present_hasPlots = true;
      if (this_present_hasPlots || that_present_hasPlots) {
        if (!(this_present_hasPlots && that_present_hasPlots))
          return false;
        if (this.hasPlots != that.hasPlots)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaListByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaListByIds_args typedOther = (getMediaListByIds_args)other;

      lastComparison = Boolean.valueOf(isSetMediaIds()).compareTo(typedOther.isSetMediaIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaIds, typedOther.mediaIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasBehind()).compareTo(typedOther.isSetHasBehind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasBehind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasBehind, typedOther.hasBehind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasPlots()).compareTo(typedOther.isSetHasPlots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasPlots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPlots, typedOther.hasPlots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaListByIds_args(");
      boolean first = true;

      sb.append("mediaIds:");
      if (this.mediaIds == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasBehind:");
      sb.append(this.hasBehind);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasPlots:");
      sb.append(this.hasPlots);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaListByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getMediaListByIds_argsStandardScheme getScheme() {
        return new getMediaListByIds_argsStandardScheme();
      }
    }

    private static class getMediaListByIds_argsStandardScheme extends StandardScheme<getMediaListByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaListByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEDIA_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.mediaIds = new ArrayList<Integer>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    int _elem42; // required
                    _elem42 = iprot.readI32();
                    struct.mediaIds.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setMediaIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HAS_BEHIND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasBehind = iprot.readBool();
                struct.setHasBehindIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAS_PLOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasPlots = iprot.readBool();
                struct.setHasPlotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaListByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mediaIds != null) {
          oprot.writeFieldBegin(MEDIA_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mediaIds.size()));
            for (int _iter43 : struct.mediaIds)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HAS_BEHIND_FIELD_DESC);
        oprot.writeBool(struct.hasBehind);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HAS_PLOTS_FIELD_DESC);
        oprot.writeBool(struct.hasPlots);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaListByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getMediaListByIds_argsTupleScheme getScheme() {
        return new getMediaListByIds_argsTupleScheme();
      }
    }

    private static class getMediaListByIds_argsTupleScheme extends TupleScheme<getMediaListByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaListByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMediaIds()) {
          optionals.set(0);
        }
        if (struct.isSetHasBehind()) {
          optionals.set(1);
        }
        if (struct.isSetHasPlots()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMediaIds()) {
          {
            oprot.writeI32(struct.mediaIds.size());
            for (int _iter44 : struct.mediaIds)
            {
              oprot.writeI32(_iter44);
            }
          }
        }
        if (struct.isSetHasBehind()) {
          oprot.writeBool(struct.hasBehind);
        }
        if (struct.isSetHasPlots()) {
          oprot.writeBool(struct.hasPlots);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaListByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.mediaIds = new ArrayList<Integer>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              int _elem47; // required
              _elem47 = iprot.readI32();
              struct.mediaIds.add(_elem47);
            }
          }
          struct.setMediaIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hasBehind = iprot.readBool();
          struct.setHasBehindIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hasPlots = iprot.readBool();
          struct.setHasPlotsIsSet(true);
        }
      }
    }

  }

  public static class getMediaListByIds_result implements org.apache.thrift.TBase<getMediaListByIds_result, getMediaListByIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaListByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaListByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaListByIds_resultTupleSchemeFactory());
    }

    public List<Media> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Media.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaListByIds_result.class, metaDataMap);
    }

    public getMediaListByIds_result() {
    }

    public getMediaListByIds_result(
      List<Media> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaListByIds_result(getMediaListByIds_result other) {
      if (other.isSetSuccess()) {
        List<Media> __this__success = new ArrayList<Media>();
        for (Media other_element : other.success) {
          __this__success.add(new Media(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMediaListByIds_result deepCopy() {
      return new getMediaListByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Media> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Media elem) {
      if (this.success == null) {
        this.success = new ArrayList<Media>();
      }
      this.success.add(elem);
    }

    public List<Media> getSuccess() {
      return this.success;
    }

    public getMediaListByIds_result setSuccess(List<Media> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Media>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaListByIds_result)
        return this.equals((getMediaListByIds_result)that);
      return false;
    }

    public boolean equals(getMediaListByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaListByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaListByIds_result typedOther = (getMediaListByIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaListByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaListByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getMediaListByIds_resultStandardScheme getScheme() {
        return new getMediaListByIds_resultStandardScheme();
      }
    }

    private static class getMediaListByIds_resultStandardScheme extends StandardScheme<getMediaListByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaListByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Media>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    Media _elem50; // required
                    _elem50 = new Media();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaListByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Media _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaListByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getMediaListByIds_resultTupleScheme getScheme() {
        return new getMediaListByIds_resultTupleScheme();
      }
    }

    private static class getMediaListByIds_resultTupleScheme extends TupleScheme<getMediaListByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaListByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Media _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaListByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Media>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              Media _elem55; // required
              _elem55 = new Media();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMediaListByType_args implements org.apache.thrift.TBase<getMediaListByType_args, getMediaListByType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaListByType_args");

    private static final org.apache.thrift.protocol.TField DISPLAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HAS_BEHIND_FIELD_DESC = new org.apache.thrift.protocol.TField("hasBehind", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField HAS_PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPlots", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaListByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaListByType_argsTupleSchemeFactory());
    }

    public String displayType; // required
    public boolean hasBehind; // required
    public boolean hasPlots; // required
    public int pageSize; // required
    public int pageIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DISPLAY_TYPE((short)1, "displayType"),
      HAS_BEHIND((short)2, "hasBehind"),
      HAS_PLOTS((short)3, "hasPlots"),
      PAGE_SIZE((short)4, "pageSize"),
      PAGE_INDEX((short)5, "pageIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DISPLAY_TYPE
            return DISPLAY_TYPE;
          case 2: // HAS_BEHIND
            return HAS_BEHIND;
          case 3: // HAS_PLOTS
            return HAS_PLOTS;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          case 5: // PAGE_INDEX
            return PAGE_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HASBEHIND_ISSET_ID = 0;
    private static final int __HASPLOTS_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __PAGEINDEX_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DISPLAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("displayType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HAS_BEHIND, new org.apache.thrift.meta_data.FieldMetaData("hasBehind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.HAS_PLOTS, new org.apache.thrift.meta_data.FieldMetaData("hasPlots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaListByType_args.class, metaDataMap);
    }

    public getMediaListByType_args() {
    }

    public getMediaListByType_args(
      String displayType,
      boolean hasBehind,
      boolean hasPlots,
      int pageSize,
      int pageIndex)
    {
      this();
      this.displayType = displayType;
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaListByType_args(getMediaListByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDisplayType()) {
        this.displayType = other.displayType;
      }
      this.hasBehind = other.hasBehind;
      this.hasPlots = other.hasPlots;
      this.pageSize = other.pageSize;
      this.pageIndex = other.pageIndex;
    }

    public getMediaListByType_args deepCopy() {
      return new getMediaListByType_args(this);
    }

    @Override
    public void clear() {
      this.displayType = null;
      setHasBehindIsSet(false);
      this.hasBehind = false;
      setHasPlotsIsSet(false);
      this.hasPlots = false;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
    }

    public String getDisplayType() {
      return this.displayType;
    }

    public getMediaListByType_args setDisplayType(String displayType) {
      this.displayType = displayType;
      return this;
    }

    public void unsetDisplayType() {
      this.displayType = null;
    }

    /** Returns true if field displayType is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayType() {
      return this.displayType != null;
    }

    public void setDisplayTypeIsSet(boolean value) {
      if (!value) {
        this.displayType = null;
      }
    }

    public boolean isHasBehind() {
      return this.hasBehind;
    }

    public getMediaListByType_args setHasBehind(boolean hasBehind) {
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      return this;
    }

    public void unsetHasBehind() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    /** Returns true if field hasBehind is set (has been assigned a value) and false otherwise */
    public boolean isSetHasBehind() {
      return EncodingUtils.testBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    public void setHasBehindIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASBEHIND_ISSET_ID, value);
    }

    public boolean isHasPlots() {
      return this.hasPlots;
    }

    public getMediaListByType_args setHasPlots(boolean hasPlots) {
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
      return this;
    }

    public void unsetHasPlots() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    /** Returns true if field hasPlots is set (has been assigned a value) and false otherwise */
    public boolean isSetHasPlots() {
      return EncodingUtils.testBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    public void setHasPlotsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPLOTS_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getMediaListByType_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public getMediaListByType_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DISPLAY_TYPE:
        if (value == null) {
          unsetDisplayType();
        } else {
          setDisplayType((String)value);
        }
        break;

      case HAS_BEHIND:
        if (value == null) {
          unsetHasBehind();
        } else {
          setHasBehind((Boolean)value);
        }
        break;

      case HAS_PLOTS:
        if (value == null) {
          unsetHasPlots();
        } else {
          setHasPlots((Boolean)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DISPLAY_TYPE:
        return getDisplayType();

      case HAS_BEHIND:
        return Boolean.valueOf(isHasBehind());

      case HAS_PLOTS:
        return Boolean.valueOf(isHasPlots());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case PAGE_INDEX:
        return Integer.valueOf(getPageIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DISPLAY_TYPE:
        return isSetDisplayType();
      case HAS_BEHIND:
        return isSetHasBehind();
      case HAS_PLOTS:
        return isSetHasPlots();
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_INDEX:
        return isSetPageIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaListByType_args)
        return this.equals((getMediaListByType_args)that);
      return false;
    }

    public boolean equals(getMediaListByType_args that) {
      if (that == null)
        return false;

      boolean this_present_displayType = true && this.isSetDisplayType();
      boolean that_present_displayType = true && that.isSetDisplayType();
      if (this_present_displayType || that_present_displayType) {
        if (!(this_present_displayType && that_present_displayType))
          return false;
        if (!this.displayType.equals(that.displayType))
          return false;
      }

      boolean this_present_hasBehind = true;
      boolean that_present_hasBehind = true;
      if (this_present_hasBehind || that_present_hasBehind) {
        if (!(this_present_hasBehind && that_present_hasBehind))
          return false;
        if (this.hasBehind != that.hasBehind)
          return false;
      }

      boolean this_present_hasPlots = true;
      boolean that_present_hasPlots = true;
      if (this_present_hasPlots || that_present_hasPlots) {
        if (!(this_present_hasPlots && that_present_hasPlots))
          return false;
        if (this.hasPlots != that.hasPlots)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaListByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaListByType_args typedOther = (getMediaListByType_args)other;

      lastComparison = Boolean.valueOf(isSetDisplayType()).compareTo(typedOther.isSetDisplayType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayType, typedOther.displayType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasBehind()).compareTo(typedOther.isSetHasBehind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasBehind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasBehind, typedOther.hasBehind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasPlots()).compareTo(typedOther.isSetHasPlots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasPlots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPlots, typedOther.hasPlots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(typedOther.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, typedOther.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaListByType_args(");
      boolean first = true;

      sb.append("displayType:");
      if (this.displayType == null) {
        sb.append("null");
      } else {
        sb.append(this.displayType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasBehind:");
      sb.append(this.hasBehind);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasPlots:");
      sb.append(this.hasPlots);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaListByType_argsStandardSchemeFactory implements SchemeFactory {
      public getMediaListByType_argsStandardScheme getScheme() {
        return new getMediaListByType_argsStandardScheme();
      }
    }

    private static class getMediaListByType_argsStandardScheme extends StandardScheme<getMediaListByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaListByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DISPLAY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.displayType = iprot.readString();
                struct.setDisplayTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HAS_BEHIND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasBehind = iprot.readBool();
                struct.setHasBehindIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAS_PLOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasPlots = iprot.readBool();
                struct.setHasPlotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaListByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.displayType != null) {
          oprot.writeFieldBegin(DISPLAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.displayType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HAS_BEHIND_FIELD_DESC);
        oprot.writeBool(struct.hasBehind);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HAS_PLOTS_FIELD_DESC);
        oprot.writeBool(struct.hasPlots);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaListByType_argsTupleSchemeFactory implements SchemeFactory {
      public getMediaListByType_argsTupleScheme getScheme() {
        return new getMediaListByType_argsTupleScheme();
      }
    }

    private static class getMediaListByType_argsTupleScheme extends TupleScheme<getMediaListByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaListByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDisplayType()) {
          optionals.set(0);
        }
        if (struct.isSetHasBehind()) {
          optionals.set(1);
        }
        if (struct.isSetHasPlots()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDisplayType()) {
          oprot.writeString(struct.displayType);
        }
        if (struct.isSetHasBehind()) {
          oprot.writeBool(struct.hasBehind);
        }
        if (struct.isSetHasPlots()) {
          oprot.writeBool(struct.hasPlots);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaListByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.displayType = iprot.readString();
          struct.setDisplayTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hasBehind = iprot.readBool();
          struct.setHasBehindIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hasPlots = iprot.readBool();
          struct.setHasPlotsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
      }
    }

  }

  public static class getMediaListByType_result implements org.apache.thrift.TBase<getMediaListByType_result, getMediaListByType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaListByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaListByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaListByType_resultTupleSchemeFactory());
    }

    public MediaList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MediaList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaListByType_result.class, metaDataMap);
    }

    public getMediaListByType_result() {
    }

    public getMediaListByType_result(
      MediaList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaListByType_result(getMediaListByType_result other) {
      if (other.isSetSuccess()) {
        this.success = new MediaList(other.success);
      }
    }

    public getMediaListByType_result deepCopy() {
      return new getMediaListByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MediaList getSuccess() {
      return this.success;
    }

    public getMediaListByType_result setSuccess(MediaList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MediaList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaListByType_result)
        return this.equals((getMediaListByType_result)that);
      return false;
    }

    public boolean equals(getMediaListByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaListByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaListByType_result typedOther = (getMediaListByType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaListByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaListByType_resultStandardSchemeFactory implements SchemeFactory {
      public getMediaListByType_resultStandardScheme getScheme() {
        return new getMediaListByType_resultStandardScheme();
      }
    }

    private static class getMediaListByType_resultStandardScheme extends StandardScheme<getMediaListByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaListByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MediaList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaListByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaListByType_resultTupleSchemeFactory implements SchemeFactory {
      public getMediaListByType_resultTupleScheme getScheme() {
        return new getMediaListByType_resultTupleScheme();
      }
    }

    private static class getMediaListByType_resultTupleScheme extends TupleScheme<getMediaListByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaListByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaListByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MediaList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMediaListByDate_args implements org.apache.thrift.TBase<getMediaListByDate_args, getMediaListByDate_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaListByDate_args");

    private static final org.apache.thrift.protocol.TField MODIFY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyDate", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HAS_BEHIND_FIELD_DESC = new org.apache.thrift.protocol.TField("hasBehind", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField HAS_PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPlots", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaListByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaListByDate_argsTupleSchemeFactory());
    }

    public String modifyDate; // required
    public boolean hasBehind; // required
    public boolean hasPlots; // required
    public int pageSize; // required
    public int pageIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODIFY_DATE((short)1, "modifyDate"),
      HAS_BEHIND((short)2, "hasBehind"),
      HAS_PLOTS((short)3, "hasPlots"),
      PAGE_SIZE((short)4, "pageSize"),
      PAGE_INDEX((short)5, "pageIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODIFY_DATE
            return MODIFY_DATE;
          case 2: // HAS_BEHIND
            return HAS_BEHIND;
          case 3: // HAS_PLOTS
            return HAS_PLOTS;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          case 5: // PAGE_INDEX
            return PAGE_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HASBEHIND_ISSET_ID = 0;
    private static final int __HASPLOTS_ISSET_ID = 1;
    private static final int __PAGESIZE_ISSET_ID = 2;
    private static final int __PAGEINDEX_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODIFY_DATE, new org.apache.thrift.meta_data.FieldMetaData("modifyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HAS_BEHIND, new org.apache.thrift.meta_data.FieldMetaData("hasBehind", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.HAS_PLOTS, new org.apache.thrift.meta_data.FieldMetaData("hasPlots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaListByDate_args.class, metaDataMap);
    }

    public getMediaListByDate_args() {
    }

    public getMediaListByDate_args(
      String modifyDate,
      boolean hasBehind,
      boolean hasPlots,
      int pageSize,
      int pageIndex)
    {
      this();
      this.modifyDate = modifyDate;
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaListByDate_args(getMediaListByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetModifyDate()) {
        this.modifyDate = other.modifyDate;
      }
      this.hasBehind = other.hasBehind;
      this.hasPlots = other.hasPlots;
      this.pageSize = other.pageSize;
      this.pageIndex = other.pageIndex;
    }

    public getMediaListByDate_args deepCopy() {
      return new getMediaListByDate_args(this);
    }

    @Override
    public void clear() {
      this.modifyDate = null;
      setHasBehindIsSet(false);
      this.hasBehind = false;
      setHasPlotsIsSet(false);
      this.hasPlots = false;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageIndexIsSet(false);
      this.pageIndex = 0;
    }

    public String getModifyDate() {
      return this.modifyDate;
    }

    public getMediaListByDate_args setModifyDate(String modifyDate) {
      this.modifyDate = modifyDate;
      return this;
    }

    public void unsetModifyDate() {
      this.modifyDate = null;
    }

    /** Returns true if field modifyDate is set (has been assigned a value) and false otherwise */
    public boolean isSetModifyDate() {
      return this.modifyDate != null;
    }

    public void setModifyDateIsSet(boolean value) {
      if (!value) {
        this.modifyDate = null;
      }
    }

    public boolean isHasBehind() {
      return this.hasBehind;
    }

    public getMediaListByDate_args setHasBehind(boolean hasBehind) {
      this.hasBehind = hasBehind;
      setHasBehindIsSet(true);
      return this;
    }

    public void unsetHasBehind() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    /** Returns true if field hasBehind is set (has been assigned a value) and false otherwise */
    public boolean isSetHasBehind() {
      return EncodingUtils.testBit(__isset_bitfield, __HASBEHIND_ISSET_ID);
    }

    public void setHasBehindIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASBEHIND_ISSET_ID, value);
    }

    public boolean isHasPlots() {
      return this.hasPlots;
    }

    public getMediaListByDate_args setHasPlots(boolean hasPlots) {
      this.hasPlots = hasPlots;
      setHasPlotsIsSet(true);
      return this;
    }

    public void unsetHasPlots() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    /** Returns true if field hasPlots is set (has been assigned a value) and false otherwise */
    public boolean isSetHasPlots() {
      return EncodingUtils.testBit(__isset_bitfield, __HASPLOTS_ISSET_ID);
    }

    public void setHasPlotsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASPLOTS_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public getMediaListByDate_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public int getPageIndex() {
      return this.pageIndex;
    }

    public getMediaListByDate_args setPageIndex(int pageIndex) {
      this.pageIndex = pageIndex;
      setPageIndexIsSet(true);
      return this;
    }

    public void unsetPageIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPageIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
    }

    public void setPageIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODIFY_DATE:
        if (value == null) {
          unsetModifyDate();
        } else {
          setModifyDate((String)value);
        }
        break;

      case HAS_BEHIND:
        if (value == null) {
          unsetHasBehind();
        } else {
          setHasBehind((Boolean)value);
        }
        break;

      case HAS_PLOTS:
        if (value == null) {
          unsetHasPlots();
        } else {
          setHasPlots((Boolean)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case PAGE_INDEX:
        if (value == null) {
          unsetPageIndex();
        } else {
          setPageIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODIFY_DATE:
        return getModifyDate();

      case HAS_BEHIND:
        return Boolean.valueOf(isHasBehind());

      case HAS_PLOTS:
        return Boolean.valueOf(isHasPlots());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case PAGE_INDEX:
        return Integer.valueOf(getPageIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODIFY_DATE:
        return isSetModifyDate();
      case HAS_BEHIND:
        return isSetHasBehind();
      case HAS_PLOTS:
        return isSetHasPlots();
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_INDEX:
        return isSetPageIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaListByDate_args)
        return this.equals((getMediaListByDate_args)that);
      return false;
    }

    public boolean equals(getMediaListByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_modifyDate = true && this.isSetModifyDate();
      boolean that_present_modifyDate = true && that.isSetModifyDate();
      if (this_present_modifyDate || that_present_modifyDate) {
        if (!(this_present_modifyDate && that_present_modifyDate))
          return false;
        if (!this.modifyDate.equals(that.modifyDate))
          return false;
      }

      boolean this_present_hasBehind = true;
      boolean that_present_hasBehind = true;
      if (this_present_hasBehind || that_present_hasBehind) {
        if (!(this_present_hasBehind && that_present_hasBehind))
          return false;
        if (this.hasBehind != that.hasBehind)
          return false;
      }

      boolean this_present_hasPlots = true;
      boolean that_present_hasPlots = true;
      if (this_present_hasPlots || that_present_hasPlots) {
        if (!(this_present_hasPlots && that_present_hasPlots))
          return false;
        if (this.hasPlots != that.hasPlots)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageIndex = true;
      boolean that_present_pageIndex = true;
      if (this_present_pageIndex || that_present_pageIndex) {
        if (!(this_present_pageIndex && that_present_pageIndex))
          return false;
        if (this.pageIndex != that.pageIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaListByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaListByDate_args typedOther = (getMediaListByDate_args)other;

      lastComparison = Boolean.valueOf(isSetModifyDate()).compareTo(typedOther.isSetModifyDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifyDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyDate, typedOther.modifyDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasBehind()).compareTo(typedOther.isSetHasBehind());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasBehind()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasBehind, typedOther.hasBehind);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHasPlots()).compareTo(typedOther.isSetHasPlots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHasPlots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPlots, typedOther.hasPlots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(typedOther.isSetPageIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, typedOther.pageIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaListByDate_args(");
      boolean first = true;

      sb.append("modifyDate:");
      if (this.modifyDate == null) {
        sb.append("null");
      } else {
        sb.append(this.modifyDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasBehind:");
      sb.append(this.hasBehind);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hasPlots:");
      sb.append(this.hasPlots);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageIndex:");
      sb.append(this.pageIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaListByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getMediaListByDate_argsStandardScheme getScheme() {
        return new getMediaListByDate_argsStandardScheme();
      }
    }

    private static class getMediaListByDate_argsStandardScheme extends StandardScheme<getMediaListByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaListByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODIFY_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modifyDate = iprot.readString();
                struct.setModifyDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HAS_BEHIND
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasBehind = iprot.readBool();
                struct.setHasBehindIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAS_PLOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hasPlots = iprot.readBool();
                struct.setHasPlotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageIndex = iprot.readI32();
                struct.setPageIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaListByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modifyDate != null) {
          oprot.writeFieldBegin(MODIFY_DATE_FIELD_DESC);
          oprot.writeString(struct.modifyDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HAS_BEHIND_FIELD_DESC);
        oprot.writeBool(struct.hasBehind);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HAS_PLOTS_FIELD_DESC);
        oprot.writeBool(struct.hasPlots);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.pageIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaListByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getMediaListByDate_argsTupleScheme getScheme() {
        return new getMediaListByDate_argsTupleScheme();
      }
    }

    private static class getMediaListByDate_argsTupleScheme extends TupleScheme<getMediaListByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaListByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModifyDate()) {
          optionals.set(0);
        }
        if (struct.isSetHasBehind()) {
          optionals.set(1);
        }
        if (struct.isSetHasPlots()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        if (struct.isSetPageIndex()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetModifyDate()) {
          oprot.writeString(struct.modifyDate);
        }
        if (struct.isSetHasBehind()) {
          oprot.writeBool(struct.hasBehind);
        }
        if (struct.isSetHasPlots()) {
          oprot.writeBool(struct.hasPlots);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetPageIndex()) {
          oprot.writeI32(struct.pageIndex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaListByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.modifyDate = iprot.readString();
          struct.setModifyDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hasBehind = iprot.readBool();
          struct.setHasBehindIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hasPlots = iprot.readBool();
          struct.setHasPlotsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageIndex = iprot.readI32();
          struct.setPageIndexIsSet(true);
        }
      }
    }

  }

  public static class getMediaListByDate_result implements org.apache.thrift.TBase<getMediaListByDate_result, getMediaListByDate_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMediaListByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMediaListByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMediaListByDate_resultTupleSchemeFactory());
    }

    public MediaList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MediaList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMediaListByDate_result.class, metaDataMap);
    }

    public getMediaListByDate_result() {
    }

    public getMediaListByDate_result(
      MediaList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMediaListByDate_result(getMediaListByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new MediaList(other.success);
      }
    }

    public getMediaListByDate_result deepCopy() {
      return new getMediaListByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MediaList getSuccess() {
      return this.success;
    }

    public getMediaListByDate_result setSuccess(MediaList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MediaList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMediaListByDate_result)
        return this.equals((getMediaListByDate_result)that);
      return false;
    }

    public boolean equals(getMediaListByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMediaListByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMediaListByDate_result typedOther = (getMediaListByDate_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMediaListByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMediaListByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getMediaListByDate_resultStandardScheme getScheme() {
        return new getMediaListByDate_resultStandardScheme();
      }
    }

    private static class getMediaListByDate_resultStandardScheme extends StandardScheme<getMediaListByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMediaListByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MediaList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMediaListByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMediaListByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getMediaListByDate_resultTupleScheme getScheme() {
        return new getMediaListByDate_resultTupleScheme();
      }
    }

    private static class getMediaListByDate_resultTupleScheme extends TupleScheme<getMediaListByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMediaListByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMediaListByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MediaList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
